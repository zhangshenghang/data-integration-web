"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[13651,64417],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>m});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),g=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=g(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),u=g(n),y=r,m=u["".concat(s,".").concat(y)]||u[y]||p[y]||l;return n?a.createElement(m,i(i({ref:t},d),{},{components:n})):a.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=y;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,i[1]=o;for(var g=2;g<l;g++)i[g]=n[g];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},59573:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>g});var a=n(58168),r=(n(96540),n(15680));const l={},i=void 0,o={unversionedId:"connector-v2/changelog/connector-sensorsdata",id:"connector-v2/changelog/connector-sensorsdata",title:"connector-sensorsdata",description:"Change Log",source:"@site/docs/connector-v2/changelog/connector-sensorsdata.md",sourceDirName:"connector-v2/changelog",slug:"/connector-v2/changelog/connector-sensorsdata",permalink:"/zh-CN/docs/connector-v2/changelog/connector-sensorsdata",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/docs/connector-v2/changelog/connector-sensorsdata.md",tags:[],version:"current",frontMatter:{}},s={},g=[],d={toc:g},u="wrapper";function p(e){let{components:t,...n}=e;return(0,r.yg)(u,(0,a.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("details",null,(0,r.yg)("summary",null," Change Log "),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Change"),(0,r.yg)("th",{parentName:"tr",align:null},"Commit"),(0,r.yg)("th",{parentName:"tr",align:null},"Version"))))))}p.isMDXComponent=!0},60662:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>o,default:()=>y,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var a=n(58168),r=(n(96540),n(15680)),l=n(59573);const i={},o="SensorsData",s={unversionedId:"connector-v2/sink/SensorsData",id:"connector-v2/sink/SensorsData",title:"SensorsData",description:"SensorsData sink connector",source:"@site/docs/connector-v2/sink/SensorsData.md",sourceDirName:"connector-v2/sink",slug:"/connector-v2/sink/SensorsData",permalink:"/zh-CN/docs/connector-v2/sink/SensorsData",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/docs/connector-v2/sink/SensorsData.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"SelectDB Cloud",permalink:"/zh-CN/docs/connector-v2/sink/SelectDB-Cloud"},next:{title:"Sentry",permalink:"/zh-CN/docs/connector-v2/sink/Sentry"}},g={},d=[{value:"Support Those Engines",id:"support-those-engines",level:2},{value:"Key features",id:"key-features",level:2},{value:"Description",id:"description",level:2},{value:"Sink Options",id:"sink-options",level:2},{value:"Parameter Interpretation",id:"parameter-interpretation",level:2},{value:"server_url string",id:"server_url-string",level:3},{value:"bulk_size int",id:"bulk_size-int",level:3},{value:"max_cache_row_sizeint",id:"max_cache_row_sizeint",level:3},{value:"consumerstring",id:"consumerstring",level:3},{value:"entity_namestring",id:"entity_namestring",level:3},{value:"record_typestring",id:"record_typestring",level:3},{value:"schemastring",id:"schemastring",level:3},{value:"distinct_id_columnstring",id:"distinct_id_columnstring",level:3},{value:"identity_fieldsarray",id:"identity_fieldsarray",level:3},{value:"property_fieldsarray",id:"property_fieldsarray",level:3},{value:"event_namestring",id:"event_namestring",level:3},{value:"time_columnstring",id:"time_columnstring",level:3},{value:"time_freeboolean",id:"time_freeboolean",level:3},{value:"detail_id_columnstring",id:"detail_id_columnstring",level:3},{value:"item_id_columnstring",id:"item_id_columnstring",level:3},{value:"item_type_columnstring",id:"item_type_columnstring",level:3},{value:"skip_error_recordboolean",id:"skip_error_recordboolean",level:3},{value:"instant_eventsarray",id:"instant_eventsarray",level:3},{value:"distinct_id_by_identitiesboolean",id:"distinct_id_by_identitiesboolean",level:3},{value:"null_as_profile_unsetboolean",id:"null_as_profile_unsetboolean",level:3},{value:"common options",id:"common-options",level:3},{value:"Examples",id:"examples",level:2},{value:"Basic Event Tracking",id:"basic-event-tracking",level:3},{value:"Dynamic Event Names",id:"dynamic-event-names",level:3},{value:"Profile Property Updates",id:"profile-property-updates",level:3},{value:"Item Tracking",id:"item-tracking",level:3},{value:"Console Output (for Testing)",id:"console-output-for-testing",level:3},{value:"Changelog",id:"changelog",level:2}],u={toc:d},p="wrapper";function y(e){let{components:t,...n}=e;return(0,r.yg)(p,(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"sensorsdata"},"SensorsData"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"SensorsData sink connector")),(0,r.yg)("h2",{id:"support-those-engines"},"Support Those Engines"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Spark",(0,r.yg)("br",null),"\nFlink",(0,r.yg)("br",null),"\nSeaTunnel Zeta",(0,r.yg)("br",null))),(0,r.yg)("h2",{id:"key-features"},"Key features"),(0,r.yg)("ul",{className:"contains-task-list"},(0,r.yg)("li",{parentName:"ul",className:"task-list-item"},(0,r.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",(0,r.yg)("a",{parentName:"li",href:"../../concept/connector-v2-features.md"},"exactly-once")),(0,r.yg)("li",{parentName:"ul",className:"task-list-item"},(0,r.yg)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ",(0,r.yg)("a",{parentName:"li",href:"../../concept/connector-v2-features.md"},"cdc"))),(0,r.yg)("h2",{id:"description"},"Description"),(0,r.yg)("p",null,"A sink plugin which use SensorsData SDK send data records."),(0,r.yg)("h2",{id:"sink-options"},"Sink Options"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"name"),(0,r.yg)("th",{parentName:"tr",align:null},"type"),(0,r.yg)("th",{parentName:"tr",align:null},"required"),(0,r.yg)("th",{parentName:"tr",align:null},"default value"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"server_url"),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"yes"),(0,r.yg)("td",{parentName:"tr",align:null},"-")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"bulk_size"),(0,r.yg)("td",{parentName:"tr",align:null},"int"),(0,r.yg)("td",{parentName:"tr",align:null},"no"),(0,r.yg)("td",{parentName:"tr",align:null},"50")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"max_cache_row_size"),(0,r.yg)("td",{parentName:"tr",align:null},"int"),(0,r.yg)("td",{parentName:"tr",align:null},"no"),(0,r.yg)("td",{parentName:"tr",align:null},"0")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"consumer"),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"no"),(0,r.yg)("td",{parentName:"tr",align:null},"batch")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"entity_name"),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"yes"),(0,r.yg)("td",{parentName:"tr",align:null},"users")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"record_type"),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"yes"),(0,r.yg)("td",{parentName:"tr",align:null},"users")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"schema"),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"yes"),(0,r.yg)("td",{parentName:"tr",align:null},"users")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"distinct_id_column"),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"yes"),(0,r.yg)("td",{parentName:"tr",align:null},"-")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"identity_fields"),(0,r.yg)("td",{parentName:"tr",align:null},"array"),(0,r.yg)("td",{parentName:"tr",align:null},"yes"),(0,r.yg)("td",{parentName:"tr",align:null},"-")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"property_fields"),(0,r.yg)("td",{parentName:"tr",align:null},"array"),(0,r.yg)("td",{parentName:"tr",align:null},"yes"),(0,r.yg)("td",{parentName:"tr",align:null},"-")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"event_name"),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"yes"),(0,r.yg)("td",{parentName:"tr",align:null},"-")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"time_column"),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"yes"),(0,r.yg)("td",{parentName:"tr",align:null},"-")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"time_free"),(0,r.yg)("td",{parentName:"tr",align:null},"boolean"),(0,r.yg)("td",{parentName:"tr",align:null},"no"),(0,r.yg)("td",{parentName:"tr",align:null},"false")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"detail_id_column"),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"no"),(0,r.yg)("td",{parentName:"tr",align:null},"-")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"item_id_column"),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"no"),(0,r.yg)("td",{parentName:"tr",align:null},"-")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"item_type_column"),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"no"),(0,r.yg)("td",{parentName:"tr",align:null},"-")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"skip_error_record"),(0,r.yg)("td",{parentName:"tr",align:null},"boolean"),(0,r.yg)("td",{parentName:"tr",align:null},"no"),(0,r.yg)("td",{parentName:"tr",align:null},"false")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"instant_events"),(0,r.yg)("td",{parentName:"tr",align:null},"array"),(0,r.yg)("td",{parentName:"tr",align:null},"no"),(0,r.yg)("td",{parentName:"tr",align:null},"-")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"distinct_id_by_identities"),(0,r.yg)("td",{parentName:"tr",align:null},"boolean"),(0,r.yg)("td",{parentName:"tr",align:null},"no"),(0,r.yg)("td",{parentName:"tr",align:null},"false")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"null_as_profile_unset"),(0,r.yg)("td",{parentName:"tr",align:null},"boolean"),(0,r.yg)("td",{parentName:"tr",align:null},"no"),(0,r.yg)("td",{parentName:"tr",align:null},"false")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"common-options"),(0,r.yg)("td",{parentName:"tr",align:null}),(0,r.yg)("td",{parentName:"tr",align:null},"no"),(0,r.yg)("td",{parentName:"tr",align:null},"-")))),(0,r.yg)("h2",{id:"parameter-interpretation"},"Parameter Interpretation"),(0,r.yg)("h3",{id:"server_url-string"},"server_url ","[string]"),(0,r.yg)("p",null,"SensorsData data sink address, the format is ",(0,r.yg)("inlineCode",{parentName:"p"},"https://${host}:8106/sa?project=${project}")),(0,r.yg)("h3",{id:"bulk_size-int"},"bulk_size ","[int]"),(0,r.yg)("p",null,"Threshold for the triggering flush operation in SensorsData SDK. When the memory cache queue reaches this value, the data in the cache will be sent. The default value is 50."),(0,r.yg)("h3",{id:"max_cache_row_sizeint"},"max_cache_row_size","[int]"),(0,r.yg)("p",null,"Maximum cache refresh size for SensorsData SDK. If it exceeds this value, the flush operation will be triggered immediately. The default value is 0, which depends on bulkSize."),(0,r.yg)("h3",{id:"consumerstring"},"consumer","[string]"),(0,r.yg)("p",null,'When consumer is set to "console", the data will be output to console instead of send to the server.'),(0,r.yg)("h3",{id:"entity_namestring"},"entity_name","[string]"),(0,r.yg)("p",null,"The entity name of the SensorsData entity data model to receive the data records."),(0,r.yg)("h3",{id:"record_typestring"},"record_type","[string]"),(0,r.yg)("p",null,"The record type of the SensorsData entity data model."),(0,r.yg)("h3",{id:"schemastring"},"schema","[string]"),(0,r.yg)("p",null,"The schema name of the SensorsData entity data model."),(0,r.yg)("h3",{id:"distinct_id_columnstring"},"distinct_id_column","[string]"),(0,r.yg)("p",null,"The distinct id column of the user entity."),(0,r.yg)("h3",{id:"identity_fieldsarray"},"identity_fields","[array]"),(0,r.yg)("p",null,"The identity fields of the user entity."),(0,r.yg)("h3",{id:"property_fieldsarray"},"property_fields","[array]"),(0,r.yg)("p",null,"The property fields of the data record. Dupported types:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"BOOLEAN"),(0,r.yg)("li",{parentName:"ul"},"DECIMAL"),(0,r.yg)("li",{parentName:"ul"},"INT"),(0,r.yg)("li",{parentName:"ul"},"BIGINT"),(0,r.yg)("li",{parentName:"ul"},"FLOAT"),(0,r.yg)("li",{parentName:"ul"},"DOUBLE"),(0,r.yg)("li",{parentName:"ul"},"NUMBER"),(0,r.yg)("li",{parentName:"ul"},"STRING"),(0,r.yg)("li",{parentName:"ul"},"DATE"),(0,r.yg)("li",{parentName:"ul"},"TIMESTAMP"),(0,r.yg)("li",{parentName:"ul"},"LIST"),(0,r.yg)("li",{parentName:"ul"},"LIST_COMMA"),(0,r.yg)("li",{parentName:"ul"},"LIST_SEMICOLON")),(0,r.yg)("h3",{id:"event_namestring"},"event_name","[string]"),(0,r.yg)("p",null,"Currently, two formats are supported:"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},"Fill in the name of the event record."),(0,r.yg)("li",{parentName:"ol"},"Use value of a field from upstream data as the event name, the format is ",(0,r.yg)("inlineCode",{parentName:"li"},"${your field name}"),", where event name is the value of the columns of the upstream data.")),(0,r.yg)("p",null,"For example, Upstream data is the following:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"name"),(0,r.yg)("th",{parentName:"tr",align:null},"prop1"),(0,r.yg)("th",{parentName:"tr",align:null},"prop2"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Purchase"),(0,r.yg)("td",{parentName:"tr",align:null},"16"),(0,r.yg)("td",{parentName:"tr",align:null},"data-example1")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"Order"),(0,r.yg)("td",{parentName:"tr",align:null},"23"),(0,r.yg)("td",{parentName:"tr",align:null},"data-example2")))),(0,r.yg)("p",null,"If ",(0,r.yg)("inlineCode",{parentName:"p"},"${name}"),' is set as the event name, the event name of the first row is "Purchase", and the event name of the second row is "Order".'),(0,r.yg)("h3",{id:"time_columnstring"},"time_column","[string]"),(0,r.yg)("p",null,"The time column of the event record."),(0,r.yg)("h3",{id:"time_freeboolean"},"time_free","[boolean]"),(0,r.yg)("p",null,"Enable historical data mode."),(0,r.yg)("h3",{id:"detail_id_columnstring"},"detail_id_column","[string]"),(0,r.yg)("p",null,"The detail id column of the user entity."),(0,r.yg)("h3",{id:"item_id_columnstring"},"item_id_column","[string]"),(0,r.yg)("p",null,"The item id column of the item entity."),(0,r.yg)("h3",{id:"item_type_columnstring"},"item_type_column","[string]"),(0,r.yg)("p",null,"The item type column of the item entity."),(0,r.yg)("h3",{id:"skip_error_recordboolean"},"skip_error_record","[boolean]"),(0,r.yg)("p",null,"Whether ignore the error in translating the data record."),(0,r.yg)("h3",{id:"instant_eventsarray"},"instant_events","[array]"),(0,r.yg)("p",null,"Given a list of event names, mark the event as an instant event."),(0,r.yg)("h3",{id:"distinct_id_by_identitiesboolean"},"distinct_id_by_identities","[boolean]"),(0,r.yg)("p",null,"When enabled, this option automatically fills the distinct_id using the values from identity_fields columns when the distinct_id_column value is null. This ensures that SensorsData receives a non-null distinct_id value as required."),(0,r.yg)("h3",{id:"null_as_profile_unsetboolean"},"null_as_profile_unset","[boolean]"),(0,r.yg)("p",null,"When enabled, null values in profile properties will be converted to profile unset operations, effectively removing the existing value from the profile."),(0,r.yg)("h3",{id:"common-options"},"common options"),(0,r.yg)("p",null,"Sink plugin common parameters, please refer to ",(0,r.yg)("a",{parentName:"p",href:"common-options.md"},"Sink Common Options")," for details"),(0,r.yg)("h2",{id:"examples"},"Examples"),(0,r.yg)("h3",{id:"basic-event-tracking"},"Basic Event Tracking"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-hocon"},'sink {\n  SensorsData {\n    server_url = "http://10.1.136.63:8106/sa?project=default"\n    time_free = true\n\n    record_type = events\n    schema = events\n    event_name = "$AppStart"\n    time_column = col_date\n    distinct_id_column = col_id\n    identity_fields = [\n      { source = col_id, target = "$identity_login_id" }\n      { source = col_id, target = "$identity_distinct_id" }\n    ]\n    property_fields = [\n      { target = prop1, source = col1, type = INT }\n      { target = prop2, source = col2, type = BIGINT }\n      { target = prop3, source = col3, type = STRING }\n      { target = prop4, source = col4, type = BOOLEAN }\n    ]\n    skip_error_record = true\n  }\n}\n')),(0,r.yg)("h3",{id:"dynamic-event-names"},"Dynamic Event Names"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-hocon"},'sink {\n  SensorsData {\n    server_url = "http://10.1.136.63:8106/sa?project=default"\n    time_free = true\n\n    record_type = events\n    schema = events\n    event_name = "${event_type}"  # Use dynamic event name from data\n    time_column = event_timestamp\n    distinct_id_column = user_id\n    identity_fields = [\n      { source = user_id, target = "$identity_login_id" }\n      { source = user_id, target = "$identity_distinct_id" }\n    ]\n    property_fields = [\n      { target = "price", source = amount, type = DECIMAL }\n      { target = "category", source = product_category, type = STRING }\n      { target = "device", source = device_type, type = STRING }\n    ]\n    instant_events = ["$AppStart", "$AppEnd"]  # Mark specific events as instant\n  }\n}\n')),(0,r.yg)("h3",{id:"profile-property-updates"},"Profile Property Updates"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-hocon"},'sink {\n  SensorsData {\n    server_url = "http://10.1.136.63:8106/sa?project=default"\n    time_free = true\n\n    entity_name = users\n    record_type = profile\n    schema = users\n    distinct_id_column = user_id\n    identity_fields = [\n      { source = email, target = "$identity_email" }\n      { source = phone, target = "$identity_phone" }\n    ]\n    property_fields = [\n      { target = "name", source = full_name, type = STRING }\n      { target = "age", source = user_age, type = INT }\n      { target = "gender", source = user_gender, type = STRING }\n      { target = "location", source = user_location, type = STRING }\n    ]\n    null_as_profile_unset = true  # Remove properties when null\n  }\n}\n')),(0,r.yg)("h3",{id:"item-tracking"},"Item Tracking"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-hocon"},'sink {\n  SensorsData {\n    server_url = "http://10.1.136.63:8106/sa?project=default"\n    time_free = true\n\n    record_type = items\n    schema = items\n    event_name = "$ItemViewed"\n    time_column = view_time\n    distinct_id_column = user_id\n    identity_fields = [\n      { source = user_id, target = "$identity_login_id" }\n    ]\n    property_fields = [\n      { target = "view_duration", source = duration, type = INT }\n      { target = "referrer", source = referrer_url, type = STRING }\n    ]\n    item_id_column = product_id\n    item_type_column = product_type\n  }\n}\n')),(0,r.yg)("h3",{id:"console-output-for-testing"},"Console Output (for Testing)"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-hocon"},'sink {\n  SensorsData {\n    server_url = "http://10.1.136.63:8106/sa?project=default"\n    consumer = "console"  # Output to console instead of sending to server\n    record_type = events\n    schema = events\n    event_name = "$TestEvent"\n    time_column = timestamp\n    distinct_id_column = test_id\n    property_fields = [\n      { target = "test", source = test_field, type = STRING }\n    ]\n  }\n}\n')),(0,r.yg)("h2",{id:"changelog"},"Changelog"),(0,r.yg)(l.default,{mdxType:"ChangeLog"}))}y.isMDXComponent=!0}}]);