"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[22815],{15680:(e,n,t)=>{t.d(n,{xA:()=>u,yg:()=>m});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=s(t),g=r,m=p["".concat(c,".").concat(g)]||p[g]||d[g]||o;return t?a.createElement(m,l(l({ref:n},u),{},{components:t})):a.createElement(m,l({ref:n},u))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=g;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},30505:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var a=t(58168),r=(t(96540),t(15680));const o={sidebar_position:3},l="Set Up With Docker In Local Mode",i={unversionedId:"start-v2/docker/docker",id:"start-v2/docker/docker",title:"Set Up With Docker In Local Mode",description:"Zeta Engine",source:"@site/docs/start-v2/docker/docker.md",sourceDirName:"start-v2/docker",slug:"/start-v2/docker/",permalink:"/zh-CN/docs/start-v2/docker/",draft:!1,editUrl:"https://github.com/apache/incubator-seatunnel-website/edit/main/docs/start-v2/docker/docker.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Spark \u5f15\u64ce\u5feb\u901f\u5f00\u59cb",permalink:"/zh-CN/docs/start-v2/locally/quick-start-spark"},next:{title:"Set Up with Kubernetes",permalink:"/zh-CN/docs/start-v2/kubernetes/"}},c={},s=[{value:"Zeta Engine",id:"zeta-engine",level:2},{value:"Download",id:"download",level:3},{value:"Build Image By Yourself",id:"build-image-by-yourself",level:3},{value:"Build With One Command",id:"build-with-one-command",level:4},{value:"Build Step By Step",id:"build-step-by-step",level:4},{value:"Spark or Flink Engine",id:"spark-or-flink-engine",level:2},{value:"Download And Install the connectors you needed",id:"download-and-install-the-connectors-you-needed",level:3},{value:"Mount Spark/Flink library",id:"mount-sparkflink-library",level:3},{value:"Submit job",id:"submit-job",level:3}],u={toc:s},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.yg)(p,(0,a.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"set-up-with-docker-in-local-mode"},"Set Up With Docker In Local Mode"),(0,r.yg)("h2",{id:"zeta-engine"},"Zeta Engine"),(0,r.yg)("h3",{id:"download"},"Download"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"docker pull apache/seatunnel:<version_tag>\n")),(0,r.yg)("p",null,"How to submit job in local mode"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},'# Run fake source to console sink\ndocker run --rm -it apache/seatunnel:<version_tag> ./bin/seatunnel.sh -m local -c config/v2.batch.config.template\n\n# Run job with custom config file\ndocker run --rm -it -v /<The-Config-Directory-To-Mount>/:/config apache/seatunnel:<version_tag> ./bin/seatunnel.sh -m local -c /config/fake_to_console.conf\n\n# Example\n# If you config file is in /tmp/job/fake_to_console.conf\ndocker run --rm -it -v /tmp/job/:/config apache/seatunnel:<version_tag> ./bin/seatunnel.sh -m local -c /config/fake_to_console.conf\n\n# Set JVM options when running\ndocker run --rm -it -v /tmp/job/:/config apache/seatunnel:<version_tag> ./bin/seatunnel.sh -DJvmOption="-Xms4G -Xmx4G" -m local -c /config/fake_to_console.conf\n')),(0,r.yg)("h3",{id:"build-image-by-yourself"},"Build Image By Yourself"),(0,r.yg)("p",null,"Build from source code. The way of downloading the source code is the same as the way of downloading the binary package.\nYou can download the source code from the ",(0,r.yg)("a",{parentName:"p",href:"https://seatunnel.apache.org/download/"},"download page")," or clone the source code from the ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/apache/seatunnel/releases"},"GitHub repository")),(0,r.yg)("h4",{id:"build-with-one-command"},"Build With One Command"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},'cd seatunnel\n# Use already sett maven profile\nsh ./mvnw -B clean install -Dmaven.test.skip=true -Dmaven.javadoc.skip=true -Dlicense.skipAddThirdParty=true -D"docker.build.skip"=false -D"docker.verify.skip"=false -D"docker.push.skip"=true -D"docker.tag"=2.3.8 -Dmaven.deploy.skip --no-snapshot-updates -Pdocker,seatunnel\n\n# Check the docker image\ndocker images | grep apache/seatunnel\n')),(0,r.yg)("h4",{id:"build-step-by-step"},"Build Step By Step"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"# Build binary package from source code\nsh ./mvnw clean package -DskipTests -Dskip.spotless=true\n\n# Build docker image\ncd seatunnel-dist\ndocker build -f src/main/docker/Dockerfile --build-arg VERSION=2.3.8 -t apache/seatunnel:2.3.8 .\n\n# If you build from dev branch, you should add SNAPSHOT suffix to the version\ndocker build -f src/main/docker/Dockerfile --build-arg VERSION=2.3.8-SNAPSHOT -t apache/seatunnel:2.3.8-SNAPSHOT .\n\n# Check the docker image\ndocker images | grep apache/seatunnel\n")),(0,r.yg)("p",null,"The Dockerfile is like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-dockerfile"},"FROM openjdk:8\n\nARG VERSION\n# Build from Source Code And Copy it into image\nCOPY ./target/apache-seatunnel-${VERSION}-bin.tar.gz /opt/\n\n# Download From Internet\n# Please Note this file only include fake/console connector, You'll need to download the other connectors manually\n# wget -P /opt https://dlcdn.apache.org/seatunnel/2.3.6/apache-seatunnel-${VERSION}-bin.tar.gz\n\nRUN cd /opt && \\\n    tar -zxvf apache-seatunnel-${VERSION}-bin.tar.gz && \\\n    mv apache-seatunnel-${VERSION} seatunnel && \\\n    rm apache-seatunnel-${VERSION}-bin.tar.gz\n\nWORKDIR /opt/seatunnel\n")),(0,r.yg)("h2",{id:"spark-or-flink-engine"},"Spark or Flink Engine"),(0,r.yg)("h3",{id:"download-and-install-the-connectors-you-needed"},"Download And Install the connectors you needed"),(0,r.yg)("p",null,"refer the step as Zeta Engine"),(0,r.yg)("h3",{id:"mount-sparkflink-library"},"Mount Spark/Flink library"),(0,r.yg)("p",null,"By default, Spark home is ",(0,r.yg)("inlineCode",{parentName:"p"},"/opt/spark"),", Flink home is ",(0,r.yg)("inlineCode",{parentName:"p"},"/opt/flink"),".\nIf you need run with spark/flink, you can mount the related library to ",(0,r.yg)("inlineCode",{parentName:"p"},"/opt/spark")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"/opt/flink"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"docker run \\ \n -v <SPARK_BINARY_PATH>:/opt/spark \\\n -v <FLINK_BINARY_PATH>:/opt/flink \\\n  ...\n")),(0,r.yg)("p",null,"Or you can change the ",(0,r.yg)("inlineCode",{parentName:"p"},"SPARK_HOME"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"FLINK_HOME")," environment variable in Dockerfile and re-build your  and mount the spark/flink to related path."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-dockerfile"},"FROM apache/seatunnel\n\nENV SPARK_HOME=<YOUR_CUSTOMIZATION_PATH>\n\n...\n\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"docker run \\ \n -v <SPARK_BINARY_PATH>:<YOUR_CUSTOMIZATION_PATH> \\\n  ...\n")),(0,r.yg)("h3",{id:"submit-job"},"Submit job"),(0,r.yg)("p",null,"The command is different for different engines and different versions of the same engine, please choose the correct command."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Spark")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"# spark2\ndocker run --rm -it apache/seatunnel bash ./bin/start-seatunnel-spark-2-connector-v2.sh -c config/v2.batch.config.template\n\n# spark3\ndocker run --rm -it apache/seatunnel bash ./bin/start-seatunnel-spark-3-connector-v2.sh -c config/v2.batch.config.template\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Flink\nbefore you submit job, you need start flink cluster first.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"# flink version between `1.12.x` and `1.14.x`\ndocker run --rm -it apache/seatunnel bash -c '<YOUR_FLINK_HOME>/bin/start-cluster.sh && ./bin/start-seatunnel-flink-13-connector-v2.sh -c config/v2.streaming.conf.template'\n# flink version between `1.15.x` and `1.16.x`\ndocker run --rm -it apache/seatunnel bash -c '<YOUR_FLINK_HOME>/bin/start-cluster.sh && ./bin/start-seatunnel-flink-15-connector-v2.sh -c config/v2.streaming.conf.template'\n")))}d.isMDXComponent=!0}}]);