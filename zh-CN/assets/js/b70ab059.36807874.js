"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[62483],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>m});var o=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),u=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return o.createElement(s.Provider,{value:n},e.children)},f="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},g=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),f=u(t),g=r,m=f["".concat(s,".").concat(g)]||f[g]||p[g]||i;return t?o.createElement(m,a(a({ref:n},c),{},{components:t})):o.createElement(m,a({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[f]="string"==typeof e?e:r,a[1]=l;for(var u=2;u<i;u++)a[u]=t[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},35598:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var o=t(58168),r=(t(96540),t(15680));const i={},a="Config Examples",l={unversionedId:"flink/configuration/ConfigExamples",id:"version-2.1.0/flink/configuration/ConfigExamples",title:"Config Examples",description:"Full configuration file example [Flink]",source:"@site/versioned_docs/version-2.1.0/flink/configuration/ConfigExamples.md",sourceDirName:"flink/configuration",slug:"/flink/configuration/ConfigExamples",permalink:"/zh-CN/docs/2.1.0/flink/configuration/ConfigExamples",draft:!1,editUrl:"https://github.com/apache/incubator-seatunnel-website/edit/main/versioned_docs/version-2.1.0/flink/configuration/ConfigExamples.md",tags:[],version:"2.1.0",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Command usage instructions",permalink:"/zh-CN/docs/2.1.0/flink/commands/start-seatunnel-flink.sh"},next:{title:"Console",permalink:"/zh-CN/docs/2.1.0/flink/configuration/sink-plugins/Console"}},s={},u=[],c={toc:u},f="wrapper";function p(e){let{components:n,...t}=e;return(0,r.yg)(f,(0,o.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"config-examples"},"Config Examples"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Full configuration file example ","[Flink]")),(0,r.yg)("p",null,"An example is as follows:"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"In the configuration, the behavior comment beginning with ",(0,r.yg)("inlineCode",{parentName:"p"},"#"),".")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'######\n###### This config file is a demonstration of streaming processing in seatunnel config\n######\n\nenv {\n    # You can set flink configuration here\n    execution.parallelism = 1\n    #execution.checkpoint.interval = 10000\n    #execution.checkpoint.data-uri = "hdfs://localhost:9000/checkpoint"\n}\n\nsource {\n    # This is a example source plugin **only for test and demonstrate the feature source plugin**\n    FakeSourceStream {\n      result_table_name = "fake"\n      field_name = "name,age"\n    }\n\n    # If you would like to get more information about how to configure seatunnel and see full list of source plugins,\n    # please go to https://seatunnel.apache.org/docs/flink/configuration/source-plugins/Fake\n}\n\ntransform {\n    sql {\n      sql = "select name,age from fake"\n    }\n\n    # If you would like to get more information about how to configure seatunnel and see full list of transform plugins,\n    # please go to https://seatunnel.apache.org/docs/flink/configuration/transform-plugins/Sql\n}\n\nsink {\n    ConsoleSink {}\n\n    # If you would like to get more information about how to configure seatunnel and see full list of sink plugins,\n    # please go to https://seatunnel.apache.org/docs/flink/configuration/sink-plugins/Console\n}\n')),(0,r.yg)("p",null,"If you want to know the details of this format configuration, Please see ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/lightbend/config/blob/main/HOCON.md"},"HOCON"),"."))}p.isMDXComponent=!0}}]);