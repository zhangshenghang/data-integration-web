"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[7219],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>y});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=s(t),g=a,y=p["".concat(c,".").concat(g)]||p[g]||u[g]||l;return t?r.createElement(y,o(o({ref:n},d),{},{components:t})):r.createElement(y,o({ref:n},d))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,o=new Array(l);o[0]=g;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[p]="string"==typeof e?e:a,o[1]=i;for(var s=2;s<l;s++)o[s]=t[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},67005:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>s});var r=t(58168),a=(t(96540),t(15680));const l={},o="Flink SQL JDBC Connector",i={unversionedId:"connector/flink-sql/Jdbc",id:"version-2.3.0-beta/connector/flink-sql/Jdbc",title:"Flink SQL JDBC Connector",description:"JDBC connector based flink sql",source:"@site/versioned_docs/version-2.3.0-beta/connector/flink-sql/Jdbc.md",sourceDirName:"connector/flink-sql",slug:"/connector/flink-sql/Jdbc",permalink:"/docs/2.3.0-beta/connector/flink-sql/Jdbc",draft:!1,editUrl:"https://github.com/apache/incubator-seatunnel-website/edit/main/versioned_docs/version-2.3.0-beta/connector/flink-sql/Jdbc.md",tags:[],version:"2.3.0-beta",frontMatter:{},sidebar:"docs",previous:{title:"Flink SQL ElasticSearch Connector",permalink:"/docs/2.3.0-beta/connector/flink-sql/ElasticSearch"},next:{title:"Flink SQL Kafka Connector",permalink:"/docs/2.3.0-beta/connector/flink-sql/Kafka"}},c={},s=[{value:"Description",id:"description",level:2},{value:"Usage",id:"usage",level:2},{value:"1. download driver",id:"1-download-driver",level:3},{value:"2. prepare data",id:"2-prepare-data",level:3},{value:"3. seatunnel config",id:"3-seatunnel-config",level:3},{value:"4. run job",id:"4-run-job",level:3}],d={toc:s},p="wrapper";function u(e){let{components:n,...t}=e;return(0,a.yg)(p,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"flink-sql-jdbc-connector"},"Flink SQL JDBC Connector"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"JDBC connector based flink sql")),(0,a.yg)("h2",{id:"description"},"Description"),(0,a.yg)("p",null,"We can use the Flink SQL JDBC Connector to connect to a JDBC database. Refer to the ",(0,a.yg)("a",{parentName:"p",href:"https://nightlies.apache.org/flink/flink-docs-release-1.13/docs/connectors/table/jdbc/index.html"},"Flink SQL JDBC Connector")," for more information."),(0,a.yg)("h2",{id:"usage"},"Usage"),(0,a.yg)("h3",{id:"1-download-driver"},"1. download driver"),(0,a.yg)("p",null,"A driver dependency is also required to connect to a specified database. Here are drivers currently supported:"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"Driver"),(0,a.yg)("th",{parentName:"tr",align:null},"Group Id"),(0,a.yg)("th",{parentName:"tr",align:null},"Artifact Id"),(0,a.yg)("th",{parentName:"tr",align:null},"JAR"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"MySQL"),(0,a.yg)("td",{parentName:"tr",align:null},"mysql"),(0,a.yg)("td",{parentName:"tr",align:null},"mysql-connector-java"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://repo.maven.apache.org/maven2/mysql/mysql-connector-java/"},"Download"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"PostgreSQL"),(0,a.yg)("td",{parentName:"tr",align:null},"org.postgresql"),(0,a.yg)("td",{parentName:"tr",align:null},"postgresql"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"https://jdbc.postgresql.org/download/"},"Download"))),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"Derby"),(0,a.yg)("td",{parentName:"tr",align:null},"org.apache.derby"),(0,a.yg)("td",{parentName:"tr",align:null},"derby"),(0,a.yg)("td",{parentName:"tr",align:null},(0,a.yg)("a",{parentName:"td",href:"http://db.apache.org/derby/derby_downloads.html"},"Download"))))),(0,a.yg)("p",null,"After downloading the driver jars, you need to place the jars into $FLINK_HOME/lib/."),(0,a.yg)("h3",{id:"2-prepare-data"},"2. prepare data"),(0,a.yg)("p",null,'Start mysql server locally, and create a database named "test" and a table named "test_table" in the database.'),(0,a.yg)("p",null,'The table "test_table" could be created by the following SQL:'),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"CREATE TABLE IF NOT EXISTS `test_table`(\n   `id` INT UNSIGNED AUTO_INCREMENT,\n   `name` VARCHAR(100) NOT NULL,\n   PRIMARY KEY ( `id` )\n)ENGINE=InnoDB DEFAULT CHARSET=utf8;\n")),(0,a.yg)("p",null,'Insert some data into the table "test_table".'),(0,a.yg)("h3",{id:"3-seatunnel-config"},"3. seatunnel config"),(0,a.yg)("p",null,"Prepare a seatunnel config file with the following content:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-sql"},"SET table.dml-sync = true;\n\nCREATE TABLE test (\n  id BIGINT,\n  name STRING\n) WITH (\n'connector'='jdbc',\n  'url' = 'jdbc:mysql://localhost:3306/test',\n  'table-name' = 'test_table',\n  'username' = '<replace with your username>',\n  'password' = '<replace with your password>'\n);\n\nCREATE TABLE print_table (\n  id BIGINT,\n  name STRING\n) WITH (\n  'connector' = 'print',\n  'sink.parallelism' = '1'\n);\n\nINSERT INTO print_table SELECT * FROM test;\n")),(0,a.yg)("h3",{id:"4-run-job"},"4. run job"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-bash"},"./bin/start-seatunnel-sql.sh --config <path/to/your/config>\n")))}u.isMDXComponent=!0}}]);