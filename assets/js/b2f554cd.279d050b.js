"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[95894],{76042:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/2023/3/31/SeaTunnel_2_3_1_Released_Refactored_AI_Compatible_Feature_Allows_ChatGPT_Automatic_Get","metadata":{"permalink":"/blog/2023/3/31/SeaTunnel_2_3_1_Released_Refactored_AI_Compatible_Feature_Allows_ChatGPT_Automatic_Get","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2023-3-31-SeaTunnel_2_3_1_Released_Refactored_AI_Compatible_Feature_Allows_ChatGPT_Automatic_Get.md","source":"@site/blog/2023-3-31-SeaTunnel_2_3_1_Released_Refactored_AI_Compatible_Feature_Allows_ChatGPT_Automatic_Get.md","title":"SeaTunnel 2.3.1 is released! The refactored AI Compatible feature allows ChatGPT to automatically generate Connector code","description":"SeaTunnel version 2.3.1 was released recently. This is a high-profile release with many important function updates and optimizations.","date":"2023-03-31T00:00:00.000Z","formattedDate":"March 31, 2023","tags":[],"readingTime":4.965,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"nextItem":{"title":"Performance Test Report: SeaTunnel Synchronizes data in batches 420% Faster than GLUE!","permalink":"/blog/2023/3/29/Performance_Test_Report_SeaTunnel_Synchronizes_Data_in_Batches_420_Percent_Faster_than_GLUE.md"}},"content":">*SeaTunnel version 2.3.1 was released recently. This is a high-profile release with many important function updates and optimizations.*\\n>*At the level of programming user experience, the new version improves the stability of SeaTunnel Zeta and CI/CD; at the level of connectors, the new version implements 7+ new connectors and fixes existing commonly used connectors bugs, and improved security. The community refactored multiple underlying base classes and added an important feature, AI Compatible. With the optimized API, users can use ChatGPT 4.0 to quickly build the SaaS Connector they need.*\\n# Major Feature update\\n\\n## 01 SeaTunnel Zeta\\n\\nThe first version of the data integration engine-SeaTunnel Zeta is introduced in the SeaTunnel 2.3.0 release and has received feedback from numerous community users. In SeaTunnel version 2.3.1, we have fixed all the bugs reported by users, optimized the use of memory and threads, and greatly improved the stability of Zeta.\\n\\nIn version 2.3.1, the community also added several new Zeta features, including a dedicated JVM parameter configuration file, client output of job monitoring information, Rest API for Zeta cluster information and job information, etc.\\n\\nAt the checkpoint level, version 2.3.1 Zeta supports using OSS as checkpoint storage. It also supports savepoint running jobs and resuming jobs from savepoints.\\n\\nIn addition, version 2.3.1 also adds a set of Zeta\u2019s Rest API, which can be used to obtain the list of jobs running on Zeta, the status information of jobs, and the monitoring indicators of Zeta cluster nodes. For specific usage methods, please refer to\xa0**https:/ /seatunnel.apache.org/docs/seatunnel-engine/rest-api/**\\n\\n## 02 AI Compatible\\n\\nIn SeaTunnel 2.3.1, the HTTP interface and related APIs are reconstructed, and the SaaS Connector-related API and Connector construction process are simplified according to the existing xGPT level capabilities so that ChatGPT 4.0 can directly generate SaaS Connectors and quickly generate various SaaS Connector interfaces. Under normal circumstances, the results obtained by this method are 95% similar to the code written by open-source contributors (see appendix).\\n\\nOf course, because ChatGPT4.0 will be updated in October 2021, it is necessary to provide some latest vectorized documents for the latest SaaS interface adaptation to have the latest interface adaptation. However, this refactored API and code framework allows users to generate Connectors more quickly and contribute to the open-source community, making the SeaTunnel interface more powerful.\\n\\n# Connector\\n\\n## 01 7+ new connectors\\n\\nWhile fixing the bugs of known connectors and optimizing the connectors, the community has added 7 new connectors including SAP HANA, Persistiq, TDEngine, SelectDB Cloud, Hbase, FieldMapper Transform, and SimpleSQL Transform.\\n\\n## 02 Reimplement SQL Transform\\n\\nSince the previous SQL Transform connector was defined based on Flink SQL and Spark SQL, SQL Transform cannot adapt to the execution of multiple engines, so we removed the SQL Transform function in version 2.3.0. In version 2.3.1, we reimplemented SQL Transform. SQL Transform is an API that does not depend on a task-specific execution engine and can perfectly run on three different engines: Flink/Spark/Zeta. Special thanks to contributor Ma Chengyuan (GitHub ID: rewerma) for leading and contributing this important Feature.\\n\\nFor the functions already supported by SQL Transform, please refer to\xa0[https://seatunnel.apache.org/docs/2.3.1/transform-v2/sql-functions](https://seatunnel.apache.org/docs/2.3.1/transform-v2/sql-functions)\\n\\n## 03 New SQL Server CDC\\n\\nAt the CDC connector level, the community has newly added a SQL Server CDC connector, and made a lot of optimizations to MySQL CDC, improving the stability of MySQL CDC.\\n\\n## 04 Added CDC connector to output debezium-json format function\\n\\nIn addition, version 2.3.1 also added the function of the CDC connector to output debezium-json format. Users can use MySQL CDC to read binlog and output data in debezium-json format to Kafka, so that users can create new synchronization tasks to read The data in debezium-json format in Kafka is synchronized to the target data source, or you can directly write other programs to read the data in debezium-json format in Kafka to perform some indicator calculations.\\n\\n# Safety\\n\\nBefore version 2.3.1, users need to configure the database username, password, and other information in plain text in the config file, which may cause some security problems. In version 2.3.1, we added the configuration file encryption function, and users can fill in the encrypted database username, password, and other information in the config file. When the job is running, SeaTunnel will decrypt the content in the config file based on the default encryption and decryption algorithm. At the same time, the encryption function provides SPI, by which users can customize the parameter list of encryption and decryption and the algorithm of encryption and decryption based on their own needs.\\n\\nFor how to use this function, please refer to\xa0[https://seatunnel.apache.org/docs/2.3.1/connector-v2/Config-Encryption-Decryption](https://seatunnel.apache.org/docs/2.3.1/connector-v2/Config-Encryption-Decryption)\\n\\n# Third-party engine support\\n\\nSeaTunnel version 2.3.1 supports Spark version 3.3, as well as Flink 1.14.6, Flink 1.15, Flink 1.16, and other versions, basically covering the mainstream versions of Spark and Flink.\\n\\n# Client\\n\\nThe new version introduces an SPI for job configuration. Previously, only hocon json configuration files were supported. Now SPI is opened to the users to customize the format of job configuration files to meet different business system integration requirements.\\n\\n# Optimization\\n\\nSeaTunnel 2.1.3 version has made many important optimizations, including changes in core components, connector components, CI/CD, Zeta(ST-Engine), and E2E components, involving updating new functions, improving existing functions, and optimizing tests and deployment processes. Some notable changes include adding parallelism and column projection interfaces in Core API, introducing MySQL-CDC source factory in Connector-V2 and supporting only-once semantics for JDBC source connectors, improving CI/CD process and stability for E2E In Zeta (ST-Engine), the logic of restarting the job when all nodes are down is added, and the timeout period for writing data is configurable.\\n\\nFor a detailed list, see the Release Note [Improve] section.\\n\\n# Document\\n\\nIn addition, the new version also has a series of updates to the documentation, including adding transform v2 documentation and some hints, as well as improving the documentation of various connectors.\\n\\nSee the Release Note [Docs] section for details.\\n\\nDocument address:\xa0[https://seatunnel.apache.org/versions/](https://seatunnel.apache.org/versions/)\\n\\n# Release Note\\n\\n[https://github.com/apache/incubator-seatunnel/blob/2.3.1/release-note.md](https://github.com/apache/incubator-seatunnel/blob/2.3.1/release-note.md)\\n\\n* Project address:\xa0[https://seatunnel.apache.org/](https://seatunnel.apache.org/)\\n* Download address:\xa0[https://seatunnel.apache.org/download](https://seatunnel.apache.org/download)\\n# Acknowledgement to the contributors\\n\\n![contributors](/image/202303310331/contributors.png)"},{"id":"/2023/3/29/Performance_Test_Report_SeaTunnel_Synchronizes_Data_in_Batches_420_Percent_Faster_than_GLUE.md","metadata":{"permalink":"/blog/2023/3/29/Performance_Test_Report_SeaTunnel_Synchronizes_Data_in_Batches_420_Percent_Faster_than_GLUE.md","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2023-3-29-Performance_Test_Report_SeaTunnel_Synchronizes_Data_in_Batches_420_Percent_Faster_than_GLUE.md.md","source":"@site/blog/2023-3-29-Performance_Test_Report_SeaTunnel_Synchronizes_Data_in_Batches_420_Percent_Faster_than_GLUE.md.md","title":"Performance Test Report: SeaTunnel Synchronizes data in batches 420% Faster than GLUE!","description":"cover","date":"2023-03-29T00:00:00.000Z","formattedDate":"March 29, 2023","tags":[],"readingTime":2.535,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"SeaTunnel 2.3.1 is released! The refactored AI Compatible feature allows ChatGPT to automatically generate Connector code","permalink":"/blog/2023/3/31/SeaTunnel_2_3_1_Released_Refactored_AI_Compatible_Feature_Allows_ChatGPT_Automatic_Get"},"nextItem":{"title":"SeaTunnel now supports CDC (Capture Change Data) writing by ClickHouse Connector!","permalink":"/blog/2023/02/09/SeaTunnel_Now_Supports_CDC_Writing_by_ClickHouse_Connector.md"}},"content":"cover\\n\\nSeaTunnel Zeta has been officially released with the joint efforts of the community. After comparing the performance of SeaTunnel with DataX and Airbyte, we also compared the performance of SeaTunnel with the popular data synchronization tool AWS GLUE.\\n\\nThe results showed that SeaTunnel batch syncs MySQL data to MySQL 420% faster than GLUE.\\n\\nTo ensure the accuracy of the test, we took on the test under the same test environment: under the same resource conditions, we tested SeaTunnel and AWS GLUE to synchronize data from MySQL to MySQL in batches and compared the time required for the two tools.\\n\\n![1](/image/202303311452/1.png)\\n\\n\\nWe created a table in MySQL containing 31 fields, with the primary key selected as an incrementing ID, and all other fields generated randomly, without setting any indexes. The table creation statement is as follows:\\n\\n```plain\\ncreate table test.type_source_table\\n(\\n    id                   int auto_increment\\n        primary key,\\n    f_binary             binary(64)          null,\\n    f_blob               blob                null,\\n    f_long_varbinary     mediumblob          null,\\n    f_longblob           longblob            null,\\n    f_tinyblob           tinyblob            null,\\n    f_varbinary          varbinary(100)      null,\\n    f_smallint           smallint            null,\\n    f_smallint_unsigned  smallint unsigned   null,\\n    f_mediumint          mediumint           null,\\n    f_mediumint_unsigned mediumint unsigned  null,\\n    f_int                int                 null,\\n    f_int_unsigned       int unsigned        null,\\n    f_integer            int                 null,\\n    f_integer_unsigned   int unsigned        null,\\n    f_bigint             bigint              null,\\n    f_bigint_unsigned    bigint unsigned     null,\\n    f_numeric            decimal             null,\\n    f_decimal            decimal             null,\\n    f_float              float               null,\\n    f_double             double              null,\\n    f_double_precision   double              null,\\n    f_longtext           longtext            null,\\n    f_mediumtext         mediumtext          null,\\n    f_text               text                null,\\n    f_tinytext           tinytext            null,\\n    f_varchar            varchar(100)        null,\\n    f_date               date                null,\\n    f_datetime           datetime            null,\\n    f_time               time                null,\\n    f_timestamp          timestamp           null\\n);\\n```\\n# SeaTunnel Task Configuration\\n\\nIn SeaTunnel, we split the data according to the ID field and process it in multiple sub-tasks. Here is the configuration file for SeaTunnel:\\n\\n```plain\\nenv {\\n    job.mode = \\"BATCH\\"\\n    checkpoint.interval = 300000\\n}\\nsource {\\n    Jdbc {\\n        url = \\"jdbc:mysql://XXX:3306/test\\"\\n        driver = \\"com.mysql.cj.jdbc.Driver\\"\\n        user = \\"root\\"\\n        password = \\"password\\"\\n        connection_check_timeout_sec = 100\\n        query = \\"select id, f_binary, f_blob, f_long_varbinary, f_longblob, f_tinyblob, f_varbinary, f_smallint, f_smallint_unsigned, f_mediumint, f_mediumint_unsigned, f_int, f_int_unsigned, f_integer, f_integer_unsigned, f_bigint, f_bigint_unsigned, f_numeric, f_decimal, f_float, f_double, f_double_precision, f_longtext, f_mediumtext, f_text, f_tinytext, f_varchar, f_date, f_datetime, f_time, f_timestamp from test\\"\\n        partition_column = \\"id\\"\\n        partition_num = 40\\n        parallelism = 2\\n    }\\n}\\nsink {\\nJdbc {\\n          url = \\"jdbc:mysql://XXX:3306/test\\"\\n         driver = \\"com.mysql.cj.jdbc.Driver\\" \\n        user = \\"root\\"\\n        password = \\"password\\"\\n         query = \\"insert into test_1 values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)\\"\\n    }\\n}\\n```\\nUnder fixed JVM memory of 4G and parallelism of 2, SeaTunnel completed the synchronization in 1965 seconds. Based on this conclusion, we tested the speed of GLUE under the same memory and concurrency settings.\\n# GLUE Task Configuration\\n\\nWe created a MySQL-to-MySQL job as follows:\\n\\n![2](/image/202303311452/2.png)\\n\\n\\nConfiguration source connect with the target:\\n\\n![3](/image/202303311452/3.png)\\n\\nJob configuration:\\n\\n![4](/image/202303311452/4.png)\\n\\n\\n![5](/image/202303311452/5.png)\\n\\n\\nAdjust the memory: job parameters configuration\\n\\n![6](/image/202303311452/6-1.png)\\n\\n\\n\u2014 conf spark.yarn.executor.memory=4g\\n\\nUnder this configuration, GLUE took 8191 seconds to complete the synchronization.\\n\\n# Conclusion\\n\\nAfter comparing the best configurations, we conducted a more in-depth comparison for different memory sizes. The following chart shows the comparison results obtained through repeated testing under the same environment.\\n\\n![7](/image/202303311452/7.png)\\n\\n\\nThe unit is seconds.\\n\\n![8](/image/202303311452/8.png)\\n\\nNote: This comparison is based on SeaTunnel: commit ID f57b897, and we welcome to download and test it!"},{"id":"/2023/02/09/SeaTunnel_Now_Supports_CDC_Writing_by_ClickHouse_Connector.md","metadata":{"permalink":"/blog/2023/02/09/SeaTunnel_Now_Supports_CDC_Writing_by_ClickHouse_Connector.md","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2023-02-09-SeaTunnel_Now_Supports_CDC_Writing_by_ClickHouse_Connector.md.md","source":"@site/blog/2023-02-09-SeaTunnel_Now_Supports_CDC_Writing_by_ClickHouse_Connector.md.md","title":"SeaTunnel now supports CDC (Capture Change Data) writing by ClickHouse Connector!","description":"Written by Wang Hailin, Apache SeaTunnel PPMC","date":"2023-02-09T00:00:00.000Z","formattedDate":"February 9, 2023","tags":[],"readingTime":5.75,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Performance Test Report: SeaTunnel Synchronizes data in batches 420% Faster than GLUE!","permalink":"/blog/2023/3/29/Performance_Test_Report_SeaTunnel_Synchronizes_Data_in_Batches_420_Percent_Faster_than_GLUE.md"},"nextItem":{"title":"In the recently released SeaTunnel 2.3.0 official version","permalink":"/blog/Reveal the core design of the SeaTunnel Zeta synchronization engine!"}},"content":"Written by Wang Hailin, Apache SeaTunnel PPMC\\n\\n## Preface \\nCurrently, SeaTunnel supports database change data capture (CDC https://github.com/apache/incubator-seatunnel/issues/3175), to transfer data changes to downstream systems in real time. SeaTunnel categorizes the captured data changes into the following 4 types: \\n- INSERT: Data insertion \\n- UPDATE_BEFORE: Historical value before data change \\n- UPDATE_AFTER: New value after data change \\n- DELETE: Data deletion \\n\\nTo handle the above data change operations, the Sink Connector needs to support writing behavior. This article will introduce how the ClickHouse Sink Connector supports writing these CDC types of data changes. \\n\\nFor CDC scenarios, the primary key is a necessary condition, so first, it needs to support the general requirements of INSERT, UPDATE, DELETE, etc. based on the primary key and ensure that the writing order is consistent with the CDC event order. In addition, considering the complexity of the data source in practice, it also needs to support UPSERT writing. Finally, according to the characteristics of ClickHouse itself, corresponding optimizations need to be made, such as UPDATE and DELETE being heavyweight operations in ClickHouse, which should be optimized based on the corresponding table engine\'s characteristics.\\n\\n## Overall design \\n\\nThe current ClickHouse Sink Connector is based on the JDBC Driver implementation, and a group of JDBC executors can be designed to encapsulate the processing of different types of data, making it convenient to switch or combine implementations based on actual scenarios and encapsulate implementation details. \\n\\nJdbcBatchStatementExecutor is the top-level interface of the executor.\\n\\n```\\npublic interface JdbcBatchStatementExecutor extends AutoCloseable {\\n\\n    void prepareStatements(Connection connection) throws SQLException;\\n\\n    void addToBatch(SeaTunnelRow record) throws SQLException;\\n\\n    void executeBatch() throws SQLException;\\n\\n    void closeStatements() throws SQLException;\\n\\n    @Override\\n    default void close() throws SQLException {\\n        closeStatements();\\n    }\\n}\\n```\\n\\n\\n`JdbcBatchStatementExecutor` has the following implementation classes: \\n\\n\\n\\n```\\nSimpleBatchStatementExecutor // implements simple SQL Batch execution logic \\nInsertOrUpdateBatchStatementExecutor // implements INSERT, UPDATE update, also supports UPSERT mode \\nReduceBufferedBatchStatementExecutor // memory accumulation, when refreshing to the database, the data change type (INSERT, UPDATE, DELETE) is distributed to the specific execution executor \\n```\\n\\n### Handling of cases where the primary key is not specified\\nCurrently, in CDC processing, the primary key is a necessary condition. If the Sink Connector is not specified in the primary key column configuration, it uses the append-only mode to write, calling `SimpleBatchStatementExecutor` directly.\\n### CDC data process\\nWe divide the execution logic of data processing as follows: different data types enter the corresponding Executor and are finally transformed into their respective SQL statements for execution, and Jdbc Batch batching is used during this process.\\n\\n\\n```\\nCDC Event\\n               /         \\\\\\n              /           \\\\\\n             /             \\\\\\n            /               \\\\\\n    DELETE Executor   INSERT OR UPDATE Executor\\n                            /          \\\\\\n                           /            \\\\\\n                          /              \\\\\\n                         /                \\\\\\n                     INSERT Executor    UPDATE Executor\\n```\\n\\n\\n### Maintaining the Order of CDC Data\\nCDC events are ordered, and writing must be processed in the order in which the events occur, otherwise data inconsistencies may occur. \\n\\nIn the previous logic, data of different types were distributed to their respective Executors and Jdbc Batch was used for batch submission to improve write performance, but categorizing batching can result in the order of submissions not being consistent with the CDC event order.\\n\\nWe can add an execution barrier marker, when the processed data row is of the same type as the previous data row, it can be batched, if not, the previous batch is first flushed to the database, ensuring that the data write order is strictly consistent with the CDC event order.\\n\\nExample for `InsertOrUpdateBatchStatementExecutor`\\n\\n\\n```\\npublic class InsertOrUpdateBatchStatementExecutor implements JdbcBatchStatementExecutor {\\n    @Override\\n    public void addToBatch(SeaTunnelRow record) throws SQLException {\\n        boolean currentChangeFlag = hasInsert(record);\\n        if (currentChangeFlag) {\\n            if (preChangeFlag != null && !preChangeFlag) {\\n                updateStatement.executeBatch();\\n                updateStatement.clearBatch();\\n            }\\n            valueRowConverter.toExternal(record, insertStatement);\\n            insertStatement.addBatch();\\n        } else {\\n            if (preChangeFlag != null && preChangeFlag) {\\n                insertStatement.executeBatch();\\n                insertStatement.clearBatch();\\n            }\\n            valueRowConverter.toExternal(record, updateStatement);\\n            updateStatement.addBatch();\\n        }\\n        preChangeFlag = currentChangeFlag;\\n        submitted = false;\\n    }\\n    \\n    @Override\\n    public void executeBatch() throws SQLException {\\n        if (preChangeFlag != null) {\\n            if (preChangeFlag) {\\n                insertStatement.executeBatch();\\n                insertStatement.clearBatch();\\n            } else {\\n                updateStatement.executeBatch();\\n                updateStatement.clearBatch();\\n            }\\n        }\\n        submitted = true;\\n    }\\n}\\n```\\n\\n\\nOf course, this will significantly slow down the batch processing, so we use `ReduceBufferedBatchStatementExecutor`to add a memory buffer layer, and when executing batch submissions, we distribute submissions to the database.\\n\\nExample for `ReduceBufferedBatchStatementExecutor`\\n\\n```\\npublic class ReduceBufferedBatchStatementExecutor implements JdbcBatchStatementExecutor {\\n    private final LinkedHashMap<SeaTunnelRow, Pair<Boolean, SeaTunnelRow>> buffer = new LinkedHashMap<>();\\n    \\n    @Override\\n    public void addToBatch(SeaTunnelRow record) throws SQLException {\\n        buffer.put(record, ...);\\n    }\\n    \\n    @Override\\n    public void executeBatch() throws SQLException {\\n        Boolean preChangeFlag = null;\\n        Set<Map.Entry<SeaTunnelRow, Pair<Boolean, SeaTunnelRow>>> entrySet = buffer.entrySet();\\n        for (Map.Entry<SeaTunnelRow, Pair<Boolean, SeaTunnelRow>> entry : entrySet) {\\n            Boolean currentChangeFlag = entry.getValue().getKey();\\n            if (currentChangeFlag) {\\n                if (preChangeFlag != null && !preChangeFlag) {\\n                    deleteExecutor.executeBatch();\\n                }\\n                insertOrUpdateExecutor.addToBatch(entry.getValue().getValue());\\n            } else {\\n                if (preChangeFlag != null && preChangeFlag) {\\n                    insertOrUpdateExecutor.executeBatch();\\n                }\\n                deleteExecutor.addToBatch(entry.getKey());\\n            }\\n            preChangeFlag = currentChangeFlag;\\n        }\\n    \\n        if (preChangeFlag != null) {\\n            if (preChangeFlag) {\\n                insertOrUpdateExecutor.executeBatch();\\n            } else {\\n                deleteExecutor.executeBatch();\\n            }\\n        }\\n        buffer.clear();\\n    }\\n}\\n```\\n\\n\\n### Implementing a General UPSERT Write\\nIn `InsertOrUpdateBatchStatementExecutor`, you can configure to turn on UPSERT, when processing INSERT or UPDATE data types, it will first use the primary key to query the data row to see if it already exists and then decide to use INSERT or UPDATE SQL for writing. \\n\\n*Note: This configuration is optional and will slow down the write speed, only opens when certain special scenarios are required.*\\n\\nExample for `InsertOrUpdateBatchStatementExecutor`\\n\\n```\\npublic class InsertOrUpdateBatchStatementExecutor implements JdbcBatchStatementExecutor {\\n    @Override\\n    public void addToBatch(SeaTunnelRow record) throws SQLException {\\n        boolean currentChangeFlag = hasInsert(record);\\n      ...\\n    }\\n\\n    private boolean hasInsert(SeaTunnelRow record) throws SQLException {\\n        if (upsertMode()) {\\n            return !exist(keyExtractor.apply(record));\\n        }\\n        switch (record.getRowKind()) {\\n            case INSERT:\\n                return true;\\n            case UPDATE_AFTER:\\n                return false;\\n            default:\\n                throw new UnsupportedOperationException();\\n        }\\n    }\\n    \\n    private boolean exist(SeaTunnelRow pk) throws SQLException {\\n        keyRowConverter.toExternal(pk, existStatement);\\n        try (ResultSet resultSet = existStatement.executeQuery()) {\\n            return resultSet.next();\\n        }\\n    }\\n}\\n```\\n\\n\\n### Optimizing UPSERT for ReplacingMergeTree Engine\\n\\nThe `ReplacingMergeTree` table engine can configure an `ORDER BY` field, and when executing the INSERT INTO statement, it covers the records with the same ORDER BY field. We can also utilize this feature to implement UPSERT.\\n\\nWhen the user writes to the `ReplacingMergeTree` table engine and the table\'s `ORDER BY` field is the same as the primary key field configured in the Sink Connector, both INSERT/UPDATE_AFTER data types are processed as INSERT to implement UPSERT.\\n### Optimizing Updates for the MergeTree Engine\\n\\nDELETE and UPDATE are heavyweight operations in ClickHouse, but there is an experimental lightweight deletion (https://clickhouse.com/docs/en/sql-reference/statements/delete) for `MergeTree` engine, which performs better than the heavyweight deletion. We allow the user to configure the lightweight deletion.\\n\\nWhen the user writes to the `MergeTree` table engine and enables the lightweight deletion, we treat both DELETE/UPDATE_BEFORE data types as lightweight deletions, and treat both INSERT/UPDATE_AFTER data types as INSERTs, avoiding the UPDATE operation and using the lightweight deletion.\\n\\n## Related PR \\n- https://github.com/apache/incubator-seatunnel/pull/3653 \\n\\nContribution to improving the related functions is welcomed, if you have any questions, please raise an issue on SeaTunnel GitHub (https://www.github.com/apache/incubator-seatunnel), and we will reply as soon as possible.\\n\\n## Reference \\n- https://clickhouse.com/docs/en/sql-reference/statements/delete \\n- https://clickhouse.com/docs/en/engines/table-engines/mergetree-family/replacingmergetree"},{"id":"Reveal the core design of the SeaTunnel Zeta synchronization engine!","metadata":{"permalink":"/blog/Reveal the core design of the SeaTunnel Zeta synchronization engine!","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2023-01-10-Reveal-the-core-design-of-the-SeaTunnel-Zeta-synchronization-engine.md","source":"@site/blog/2023-01-10-Reveal-the-core-design-of-the-SeaTunnel-Zeta-synchronization-engine.md","title":"In the recently released SeaTunnel 2.3.0 official version","description":"In the recently released SeaTunnel 2.3.0 official version, the community self-developed engine SeaTunnel Zeta which has been under preparation for more than a year\u2014\u2014is officially released, and it will be used as the default engine of SeaTunnel in the future, providing users with high throughput, low latency, reliable consistent synchronization job operation guarantee.","date":"2023-01-10T00:00:00.000Z","formattedDate":"January 10, 2023","tags":[{"label":"Meetup","permalink":"/blog/tags/meetup"}],"readingTime":11.495,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"Reveal the core design of the SeaTunnel Zeta synchronization engine!","title":"In the recently released SeaTunnel 2.3.0 official version","tags":["Meetup"]},"prevItem":{"title":"SeaTunnel now supports CDC (Capture Change Data) writing by ClickHouse Connector!","permalink":"/blog/2023/02/09/SeaTunnel_Now_Supports_CDC_Writing_by_ClickHouse_Connector.md"},"nextItem":{"title":"SeaTunnel supports IoTDB to implement IoT data synchronization","permalink":"/blog/Apache IoTDB (Internet of Things Database) is a software system that integrates the collection"}},"content":"![](/image/16733429185569/16733443077196.png)\\n\\n\\nIn the recently released SeaTunnel 2.3.0 official version, the community self-developed engine SeaTunnel Zeta which has been under preparation for more than a year\u2014\u2014is officially released, and it will be used as the default engine of SeaTunnel in the future, providing users with high throughput, low latency, reliable consistent synchronization job operation guarantee.\\n\\nWhy does SeaTunnel develop its synchronization engine? What is the positioning of the SeaTunnel Engine? How is it different from traditional computing engines? What is the design idea? What is unique about the architectural design? These questions will be answered in this article.\\n\\n* Why develop our engine\\n* SeaTunnel Engine Positioning\\n* Design ideas\\n* Architecture design\\n* Unique advantages and features\\n* Current basic functions and features\\n* Future optimization plan\\n## 01 Why develop our engine\\n\\nIt was a year ago that the SeaTunnel community publicly stated for the first time that it would develop its engine. The reason why the team decided to develop a self-developed engine was that SeaTunnel\'s connector can run only on Flink or Spark, and Flink and Spark, as computing engines, have many unsolvable problems when integrating and synchronizing data.\\n\\nRefer to:\\nWhy do we self-develop the big data synchronization engine SeaTunnel Zeta?\\nhttps://github.com/apache/incubator-seatunnel/issues/1954\\n## 02 Design ideas\\n\\nThe general idea of engine design is as follows:\\n\\n1. Simple and easy to use, the new engine minimizes the dependence on third-party services, and can realize cluster management, snapshot storage, and cluster HA functions without relying on big data components such as Zookeeper and HDFS. This is very useful for users who do not have a big data platform or are unwilling to rely on a big data platform for data synchronization.\\n2. More resource-saving, at the CPU level, Zeta Engine internally uses Dynamic Thread Sharing (dynamic thread sharing) technology. In the real-time synchronization scenario, if the number of tables is large but the amount of data in each table is small, Zeta Engine will Synchronous tasks run in shared threads, which can reduce unnecessary thread creation and save system resources. On the read and data write side, the Zeta Engine is designed to minimize the number of JDBC connections. In the CDC scenario, Zeta Engine will try to reuse log reading and parsing resources as much as possible.\\n3. More stable. In this version, Zeta Engine uses Pipeline as the minimum granularity of Checkpoint and fault tolerance for data synchronization tasks. The failure of a task will only affect the tasks that have upstream and downstream relationships with it. Try to avoid task failures that cause the entire Job to fail. or rollback. At the same time, for scenarios where the source data has a storage time limit, Zeta Engine supports enabling data cache to automatically cache the data read from the source, and then the downstream tasks read the cached data and write it to the target. In this scenario, even if the target end fails and data cannot be written, it will not affect the normal reading of the source end, preventing the source end data from being deleted due to expiration.\\n4. Faster, Zeta Engine\u2019s execution plan optimizer will optimize the execution plan to reduce the possible network transmission of data, thereby reducing the loss of overall synchronization performance caused by data serialization and deserialization, and completing faster Data synchronization operations. Of course, it also supports speed limiting, so that sync jobs can be performed at a reasonable speed.\\n5. Data synchronization support for all scenarios. SeaTunnel aims to support full synchronization and incremental synchronization under offline batch synchronization, and support real-time synchronization and CDC.\\n\\n## 03 Architecture design\\n\\nSeaTunnel Engine is mainly composed of a set of APIs for data synchronization processing and a core computing engine. Here we mainly introduce the architecture design of the SeaTunnel Engine core engine.\\n![](/image/16733429185569/16733443263288.png)\\npicture\\n\\nSeaTunnel Engine consists of three main services: **CoordinatorService, TaskExecutionService, and SlotService.**\\n\\n### Coordinator Service\\n\\nCoordinatorService is the Master service of the cluster, which provides the generation process of each job from LogicalDag to ExecutionDag, and then to PhysicalDag, and finally creates the JobMaster of the job for scheduling execution and status monitoring of the job. CoordinatorService is mainly composed of 4 large functional modules:\\n1. JobMaster is responsible for the generation process from LogicalDag to ExecutionDag to PhysicalDag of a single job, and is scheduled to run by PipelineBaseScheduler.\\n2. CheckpointCoordinator, responsible for the Checkpoint process control of the job.\\n3. ResourceManager is responsible for the application and management of job resources. It currently supports Standalone mode and will support On Yarn and On K8s in the future.\\n4. Metrics Service, responsible for the statistics and summary of job monitoring information.\\n### TaskExecutionService\\n\\nTaskExecutionService is the Worker service of the cluster, which provides the real runtime environment of each Task in the job. TaskExecutionService uses Dynamic Thread Sharing technology to reduce CPU usage.\\n### SlotService\\n\\nSlotService runs on each node of the cluster and is mainly responsible for the division, application, and recycling of resources on the node.\\n## 04 Unique advantages and features\\n\\n### Autonomous cluster\\nSeaTunnel Engine has realized autonomous clustering (no centralization). To achieve cluster autonomy and job fault tolerance without relying on third-party service components (such as Zookeeper), SeaTunnel Engine uses Hazelcast as the underlying dependency. Hazelcast provides a distributed memory network, allowing users to operate a distributed collection like a normal Java collection locally. SeaTunnel saves the status information of the job in the memory grid of Hazelcast. When the Master node switches, it can Job state recovery based on data in the Hazelcast in-memory grid. At the same time, we have also implemented the persistence of Hazelcast memory grid data, and persisted the job status information to the storage (database of JDBC protocol, HDFS, cloud storage) in the form of WAL. In this way, even if the entire cluster hangs and restarts, the runtime information of the job can be repaired.\\n### Data cache\\nSeaTunnel Engine is different from the traditional Spark/Flink computing engine, it is an engine specially used for data synchronization. The SeaTunnel engine naturally supports data cache. When multiple synchronous jobs in the cluster share a data source, the SeaTunnel engine will automatically enable the data cache. The source of a job will read the data and write it into the cache, and all other jobs will no longer read data from the data source but are automatically optimized to read data from the Cache. The advantage of this is that it can reduce the reading pressure of the data source and reduce the impact of data synchronization on the data source.\\n### Speed control\\nSeaTunnel Engine supports the speed limit during data synchronization, which is very useful when reading data sources with high concurrency. A reasonable speed limit can not only ensure that the data is synchronized on time, but also minimize the pressure on the data source.\\n\\n### Shared connection pool to reduce database pressure\\nAt present, the underlying operating tools and data synchronization tools provided by computing engines such as Spark/Flink cannot solve the problem that each table needs a JDBC connection when the entire database is synchronized. Database connections are resources for the database. Too many database connections will put great pressure on the database, resulting in a decrease in the stability of database read and write delays. This is a very serious accident for business databases. To solve this problem, SeaTunnel Engine uses a shared connection pool to ensure that multiple tables can share JDBC connections, thereby reducing the use of database connections.\\n### Breakpoint resume (incremental/full volume)\\n\\nSeaTunnel Engine supports resumed uploads under offline synchronization. When the amount of data is large, a data synchronization job often needs to run for tens of minutes or several hours. If the middle job hangs up and reruns, it means wasting time. SeaTunnel Engine will continue to save the state (checkpoint) during the offline synchronization process. When the job hangs up and reruns, it will continue to run from the last checkpoint, which effectively solves the data that may be caused by hardware problems such as node downtime. Delay.\\n### The Schema revolution route\\nSchema evolution is a feature that allows users to easily change a table\'s current schema to accommodate data that changes over time. Most commonly, it is used when performing an append or overwrite operation, to automatically adjust the schema to include one or more new columns.\\n\\nThis capability is required in real-time data warehouse scenarios. Currently, the Flink and Spark engines do not support this feature.\\n### Fine-grained fault-tolerant design\\nFlink\'s design is fault tolerance and rollback at the entire job level. If a task fails, the entire job will be rolled back and restarted. The design of SeaTunnel Engine takes into account that in the data synchronization scenario, in many q cases, the failure of a task should only need to focus on fault tolerance for tasks that have upstream and downstream relationships with it. Based on this design principle, SeaTunnel Engine will first generate a logical DAG according to the user-configured job configuration file, then optimize the logical DAG, and finally generate a pipeline (a connected subgraph in a job DAG) to call and execute jobs at the granularity. fault tolerance.\\n\\nA typical usage scenario is:\\n\\nUse the CDC connector to read data from MySQL\'s binlog and write it to another MySQL. If you use Flink or Spark engine, once the target MySQL cannot write, it will cause the task of CDC to read the binlog to be terminated. If MySQL is set If the expiration time of the log is set, the problem of the target MySQL is solved, but the log of the source MySQL is cleared, which leads to data loss and other problems.\\n\\nSeaTunnel Engine will automatically optimize this synchronization task, automatically add the source to the target Cache, and then further optimize this job into two Pipelines, pipeline#1 is responsible for reading data from the CDC and writing it to the SeaTunnel Cache, and pipeline#2 is responsible for reading data from the SeaTunnel Cache Cache reads data and writes to target MySQL. If there is a problem with the target MySQL and cannot be written, the pipeline#2 of this synchronization job will be terminated, and the pipeline#1 will still run normally. This design fundamentally solves the above problems and is more in line with the processing logic of the data synchronization engine.\\n### Dynamically share threads to reduce resource usage\\nSeaTunnel Engine\'s Task design uses shared thread technology. Different from Flink/Spark, SeaTunnel Engine does not simply allow a Task to occupy a thread, but through a dynamic perception method - Dynamic Thread Sharing (Dynamic Thread Sharing) To judge whether a Task should share a thread with other Tasks or should monopolize a thread.\\n\\nCompared with single-threaded serial computing, multi-threaded parallel computing has better performance advantages, but if each Task uses an independent thread to run, when there are many tables for data synchronization and the number of Tasks is large, it will be in the Worker node Start very many threads on it. When the number of CPU cores is fixed, the more threads, the better. When the number of threads is too large, the CPU needs to spend a lot of time on thread context switching, which will affect computing performance.\\n\\nFlink/Spark usually limits the maximum number of tasks running on each node. In this way, it can avoid starting too many threads. To run more tasks on one node, SeaTunnel Engine can share thread technology. Let those tasks with a small amount of data share threads, and tasks with a large amount of data exclusively use threads. This method makes it possible for SeaTunnel Engine to run hundreds or thousands of table synchronization tasks on one node, with less resource occupation. Complete the synchronization of more tables.\\n## 05 Basic functions and features\\n\\n2.3.0 is the first official version of SeaTunnel Engine, which implements some basic functions. For the detailed design, please refer to: https://github.com/apache/incubator-seatunnel/issues/2272\\n\\n**[ Cluster Management ]**\\n* Support stand-alone operation\\n* Support cluster operation\\n* Autonomous cluster (no centralization), no need to specify a Master node for the SeaTunnel Engine cluster, SeaTunnel Engine elects the Master node by itself during operation and automatically selects a new Master node after the Master node hangs up.\\n* Automatic discovery of cluster nodes, the nodes with the same cluster_name will automatically form a cluster.\\n\\n**[ Core function ]**\\n* Supports running jobs in Local mode. The cluster is automatically destroyed after the job runs.\\n* It supports running jobs in Cluster mode (single machine or cluster) and submitting jobs to the SeaTunnel Engine service through SeaTunnel Client. After the job is completed, the service continues to run and waits for the next job submission.\\n* Support offline batch synchronization.\\n* Support real-time synchronization.\\n* Batch and flow integration, all SeaTunnel V2 version connectors can run in SeaTunnel Engine.\\n* Supports distributed snapshot algorithm cooperates with SeaTunnel V2 connector to support two-phase commit, and ensures data exactly-once.\\n* Supports job invocation at the Pipeline level to ensure that it can be started even when resources are limited.\\n* Supports job fault tolerance at the Pipeline level. The failure of a Task only affects the Pipeline it is in, and only the Task under the Pipeline needs to be rolled back.\\n* Supports dynamic thread sharing to achieve real-time synchronization of a large number of small data sets.\\n## 06 Future optimization plan\\n\\n* Support Cache mode, and first support Kafka as Cache\\n* Support JobHistory, support the persistence of JobHistory.\\n* Support indicator (Reader Rows, QPS, Reader Bytes) monitoring and indicator query\\n* Support dynamic modification of the execution plan.\\n* Support CDC.\\n* Support whole database synchronization\\n* Support multi-table synchronization\\n* Support for Schema Revolution"},{"id":"Apache IoTDB (Internet of Things Database) is a software system that integrates the collection","metadata":{"permalink":"/blog/Apache IoTDB (Internet of Things Database) is a software system that integrates the collection","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2022-12-10-SeaTunnel-supports-IoTDB-to-implement-IoT-data-synchronization.md","source":"@site/blog/2022-12-10-SeaTunnel-supports-IoTDB-to-implement-IoT-data-synchronization.md","title":"SeaTunnel supports IoTDB to implement IoT data synchronization","description":"Apache IoTDB (Internet of Things Database) is a software system that integrates the collection, storage, management, and analysis of time series data of the Internet of Things, which can meet the needs of massive data storage, high-speed data reading, and complex data analysis in the field of Industrial Internet of Things. Currently, SeaTunnel already supports IoTDB Connector, realizing the connection of data synchronization scenarios in the IoT field.","date":"2022-12-10T00:00:00.000Z","formattedDate":"December 10, 2022","tags":[{"label":"Meetup","permalink":"/blog/tags/meetup"}],"readingTime":11.6,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"Apache IoTDB (Internet of Things Database) is a software system that integrates the collection","title":"SeaTunnel supports IoTDB to implement IoT data synchronization","tags":["Meetup"]},"prevItem":{"title":"In the recently released SeaTunnel 2.3.0 official version","permalink":"/blog/Reveal the core design of the SeaTunnel Zeta synchronization engine!"},"nextItem":{"title":"SeaTunnel engine, designed for tens-of-billions data integration","permalink":"/blog/Apache SeaTunnel Committer | Zongwen Li"}},"content":"![](/image/16714316310459/16714316482580.jpg)\\n> Apache IoTDB (Internet of Things Database) is a software system that integrates the collection, storage, management, and analysis of time series data of the Internet of Things, which can meet the needs of massive data storage, high-speed data reading, and complex data analysis in the field of Industrial Internet of Things. Currently, SeaTunnel already supports IoTDB Connector, realizing the connection of data synchronization scenarios in the IoT field.\\n\\n> At the SeaTunnel community online meeting in October this year, SeaTunnel Committer Wang Hailin introduced the implementation process of SeaTunnel\u2019s access to IoTDB, allowing users to have a deeper understanding of the operation method and principle of IoTDB data synchronization.\\n\\nThe topic I\u2019m sharing today is using SeaTunnel to play around with data synchronization in IoTDB.\\n\\nThis session is divided into 6 subsections. Firstly, we will have an understanding of the basic concept of SeaTunnel, and on this basis, we will focus on the functional features of IoTDB Connector, then we will analyze the data read and write functions of IoTDB Connector and the parsing of the implementation, and finally, we will show some typical usage scenarios and cases to let you understand how to use Finally, we will show some typical usage scenarios and cases to understand how to use the IoTDB Connector to implement into production environments. The last point is the community\u2019s next steps for the IoTDB Connector and guidance on how to get involved in contributing.\\n\\n## Introduction to SeaTunnel basic concepts\\nThis is the basic architecture of SeaTunnel, an engine built for data synchronization, with a set of abstract APIs for reading data from and writing to a variety of data sources.\\n\\n![](/image/16714316310459/16714316839299.jpg)\\nThe left-hand side briefly lists the Source scenarios, for example, we abstract the Source\u2019s API, Type, and State, to read the data source, unifying the data types of the various data sources to the abstract type defined in it, and some state recovery and retention of the read location during the reading process.\\n\\nThis is an abstraction for Source, and we have done a similar abstraction for Sink, i.e. how data is written, and how the data type matches the real data source type, and how the state is restored and retained.\\n\\nBased on these APIs, we will have a translation layer to translate these APIs to the corresponding execution engine. SeaTunnel currently supports three execution engines, Spark, Flink, and our own execution engine, SeaTunnel Engine, which will be released soon.\\n\\nThis is roughly what SeaTunnel does, SeaTunnel relies on Source and Sink to read and write data for data synchronization, we call them Connectors. The Connector consists of a Source and a Sink.\\n\\n![](/image/16714316310459/16714316928812.jpg)\\nFrom the diagram above we see the different data sources, Source is responsible for reading data from the various data sources and transforming it into SeaTunnelRow abstraction layer and Type to form the abstraction layer, Sink is responsible for pulling data from the abstraction layer and writing it to the concrete data store to transform it into the store concrete format.\\n\\nThe combination of Source + Abstraction Layer + Sink enables the synchronization of data between multiple heterogeneous data sources.\\n\\nI\u2019ll use a simple example below to illustrate how SeaTunnel\u2019s Source and Sink work.\\n\\n![](/image/16714316310459/16714317022389.jpg)\\n\\n![](/image/16714316310459/16714317067444.jpg)\\nWe can specify the number of Sources, Sink configuration file combinations through the configuration file The commands in the toolkit provided by SeaTunnel take the configuration file with them and when executed enable data handling.\\n\\n![](/image/16714316310459/16714317166018.jpg)\\n![](/image/16714316310459/16714317203806.jpg)\\n![](/image/16714316310459/16714317262218.jpg)\\nThis is the Connector ecosystem that is currently supported by SeaTunnel, such as the data sources supported by JBDC, HDFS, Hive, Pulsar, message queues, etc. are currently supported.\\n\\nThe list in the picture is not exhaustive of the Connectors supported by SeaTunnel. Under the GitHub SeaTunnel project, you can see the Plugins directory, where supported Connector plugins are constantly being added and where you can see the latest access in real-time.\\n\\n## IoTDB Connector Features\\nBelow is information about access to the IoTDB Connector.\\n\\nFirstly, we would like to introduce the functional features of IoTDB, the IoTDB Connector integrated with SeaTunnel, and what exactly it supports for your reference.\\n\\n## Source Features\\n![](/image/16714316310459/16714317512435.jpg)\\nFirstly, there are the typical usage scenarios supported by Source, such as bulk reading of devices, field projection, data type mapping, parallel reading, etc.\\n\\nAs you can see above, IoTDB supports all features except once, exactly once and stream mode, such as batch reads, IoTDB has a SQL syntax similar to group by device, which allows you to read data from multiple devices in a single batch. For basic data type projection, the SQL in IoTDB will take time by default when looking up any metric, or group by the device will take the device column, and we also support projection onto SeaTunnel columns by default.\\n\\nThe only data type not supported is Victor, all others are supported.\\n\\nFor the parallel read piece, the IoTDB data is actually timestamped and we use timestamped ranges to achieve parallel reads.\\n\\nThe recovery of the state, since we have divided the time range read into different splits, can be done based on the Split location information.\\n\\n## Sink functional features\\n![](/image/16714316310459/16714317679569.jpg)\\n\\nThe diagram above shows the features already supported by SeaTunnel. Regarding metadata extraction, we support the extraction of metadata such as measurement, device, etc. from SeaTunnelRow and the extraction or use of current processing time from SeaTunnelRow. Batch commits and exception retries are also supported.\\n## IoTDB data reading analysis\\nNext, we analyze the implementation and support for data reading.\\n## Data type mapping\\nThe first is the data type mapping, which actually reads the IoTDB data type to SeaTunnel, so it has to be converted to the SeaTunnel data type.\\n![](/image/16714316310459/16714317930593.jpg)\\nThe BOOLEAN, INT32, INT64, etc. listed here all have corresponding SeaTunnel data types. INT32 can be mapped according to the read type on the SeaTunnel, or to TINYINT, SMALLINT, or INT when the range of values is small.\\n\\nThe Vector type is not currently supported.\\n\\n![](/image/16714316310459/16714318216373.jpg)\\nThis is the corresponding example code showing how the mapping is done where the type conversion is done.\\n\\n## Field projection\\n\\nThe other is the field projection when reading, we can automatically map Time fields when reading IoTDB data, or we can choose to map some of the data to SeaTunnel, such as TIMESTAMP, or BIGINT.\\n\\n![](/image/16714316310459/16714318381313.jpg)\\nThe SQL extraction of column codes allows you to extract only some of the columns you need, and when used on SeaTunnel, you can specify the name, type, etc. of the column after it is mapped to SeaTunnel via fields. The final result of the data read on SeaTunnel is shown in the figure above.\\n\\n![](/image/16714316310459/16714318550071.jpg)\\n\\nWe have just seen that we do not have the time column in the SQL, but the actual result is that there is this column, so we support the projection of the time column field, the time column can actually be projected into different data types, the user can convert according to their needs. The diagram above shows the implementation logic.\\n\\n## Batch read Device\\nThis is a common requirement, as we are likely to synchronize data in large batches with the same data structure.\\n\\n![](/image/16714316310459/16714318796196.jpg)\\n\\nSeaTunnel supports the align-by-device syntax so that device columns can also be projected onto the SeaTunnelRow\\n\\n![](/image/16714316310459/16714318873362.jpg)\\nAssuming there is a table in IoTDB, we project the device column onto SeaTunnel by making it data as well through syntax. After configuring the device name column and specifying the data type, we end up reading the data on SeaTunnel in the format shown above, containing the Time, device column, and the actual data value. This makes it possible to read data from the same device in bulk.\\n\\n## Parallel reading\\nThe other is a parallel read.\\n\\n* Split\\nWe have scoped the table by the Time column and if we are reading in parallel we may want to scope the table to allow parallel threads/processes to read a specific range of data. By configuring the three parameters, the end result will be a query SQL, where the original SQL is divided into different splits with query conditions to achieve the actual read SQL.\\n\\n* Allocate Split to the reader\\nOnce the split is done, there is an allocation logic to follow in order to distribute it to each parallel reader.\\n\\n![](/image/16714316310459/16714319281280.jpg)\\n\\nThis logic is based on the ID of the split to the reader, which may be more random, or more uniform if the ID of the split is more hashed, depending on the Connector.\\n\\n![](/image/16714316310459/16714319372730.jpg)\\n\\nThe result achieved is shown in the picture.\\n\\n# Status recovery\\n\\nThere is also state recovery involved when reading because if the task is large, the reading will take longer, and if there is an error or exception in the middle, you have to consider how to recover the state from the point where the error occurred, and then read it again afterward.\\n\\n![](/image/16714316310459/16714319281280.jpg)\\n![](/image/16714316310459/16714319569097.jpg)\\n![](/image/16714316310459/16714319599521.jpg)\\n\\nSeaTunnel\u2019s state recovery is mainly through the reader storing the unread Split information into the state, and then the engine will periodically take a snapshot of the state when reading so that we can restore the last snapshot when we recover and continue reading afterward.\\n\\n## IoTDB Connector Data Write Analysis\\nThe next step is the parsing of the data writes.\\n\\n## Data type mapping\\n![](/image/16714316310459/16714319862080.jpg)\\n\\nData writing also involves data type mapping, but here, in contrast to data reading, it maps the SeaTunnel data types to the IoTDB data types. As IoTDB only has INT32, the writing process involves lifting the data types TINYINT and SMALLINT. All other data types can be converted one-to-one; ARRAY and VECTOR data types are not yet supported.\\n\\n![](/image/16714316310459/16714319949478.jpg)\\n\\nThe above diagram shows the corresponding code, the implementation logic will need to be seen in our specific mapping.\\n\\n## Dynamic injection of metadata\\nSeaTunnel supports the dynamic injection of metadata.\\n\\nWhen heterogeneous data sources are written to the IoTDB, device, measurement, and time are extracted from each row of data, either by serializing the SeaTunnelRow with a fixed column value as configured. Alternatively, the system time can be used as the time, or the current system time can be populated if no time column is specified, and the storage group can be configured to be automatically appended to the device prefix.\\n\\n![](/image/16714316310459/16714320117277.jpg)\\n\\nFor example, suppose that the structure of a row in SeaTunnel reading the data format shown above can be configured to synchronize to the IoTDB and the result obtained is as follows.\\n\\n![](/image/16714316310459/16714320201848.jpg)\\n\\nThe temperature and humidity columns we need were extracted, and ts and device names were extracted as the original data for the IoTDB.\\n\\n## Batch commits and exception retries\\n\\nIn addition, Sink needs to handle batch and retry when writing. For batches, we can configure the appropriate batch configuration, including support for configuring the number and interval of batch commits; if the data is cached to memory, you can enable a separate thread for timed commits.\\n\\nFor retries, SeaTunnel supports the configuration of the number of retries, the waiting interval and the maximum number of retries, as well as the possibility to end a retry if it encounters a non-recoverable error when it has finished.\\n\\n![](/image/16714316310459/16714320394193.jpg)\\n\\n## IoTDB Connector Usage Examples\\n\\nAfter the previous analysis of reading and writing data, let\u2019s look at three typical examples of usage scenarios.\\n\\n## Exporting data from IoTDB\\nThe first scenario is exporting data from the IoTDB, the example I have given here is reading data from the IoTDB to the Console.\\n\\n* Read in parallel, output to Console\\n\\nParallelism: 2\\n\\nNumber of batches: 24\\n\\nTime frame: 2022\u201309\u201325 ~ 2022\u201309\u201326\\n![](/image/16714316310459/16714320856052.jpg)\\n\\nLet\u2019s assume that we have a data table in IoTDB and we want to export the data to the Console. The whole configuration is shown above and needs to map the columns of data we want to export and the time range to check.\\n\\nThis is the simplest example, but in practice, the Sink side may be more complex, so you will need to refer to the documentation of the corresponding data source for the appropriate configuration.\\n\\n## Importing data to IoTDB\\n\\n* Read database, batch write to IoTDB\\n    * Batch writing: one commit every 1024 entries or every 1000 ms\\n    \\n    * -Extracting metadata device, timestamp, measurement\\n    \\n    * -Specify the storage group: root.test_group\\n\\n![](/image/16714316310459/16714321290339.jpg)\\nAnother typical usage scenario is to import data from other data sources into IoTDB. suppose I have an external database table with columns like ts, temperature, humidity, etc. and we import it into IoTDB, requiring the columns of temperature and humidity, but the rest can be left out. The whole configuration is shown in the diagram above, you can refer to it.\\n\\nOn the Sink side, you mainly have to specify the Key of the device column, such as from which data the device is extracted, from which class the time is extracted, which columns to write to the IoTDB, etc.\\n\\nAs you can see, we can configure the storage group, which is the storage group of the IoTDB, which can be specified by the storage group.\\n\\n## Synchronizing data between IoTDB\\nThe third scenario is to synchronize data between IoTDB and IoTDB and write to IoTDB in bulk, suppose there is a table in IoTDB that needs to be synchronized to another IoTDB, after synchronization the storage group has changed and the name of the indicator of the data column has also changed, then you can use projection to rewrite the indicator name and use SQL to rewrite the storage group.\\n\\n![](/image/16714316310459/16714321480992.jpg)\\n\\n## How to get involved in contribution\\nFinally, a few words about the next steps for the IoTDB Connector and how you can get involved in improving the Connector and contributing new features that are needed.\\n\\n## Next steps for the IoTDB Connector\\n\\n* Support for reading and writing vector data types\\n* Support for tsfile reads and writes\\n* Support for writing tsfile and reloading to IoTDB"},{"id":"Apache SeaTunnel Committer | Zongwen Li","metadata":{"permalink":"/blog/Apache SeaTunnel Committer | Zongwen Li","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2022-12-9-SeaTunnel-engine-designed-for-tens-of-billions-data-integration.md","source":"@site/blog/2022-12-9-SeaTunnel-engine-designed-for-tens-of-billions-data-integration.md","title":"SeaTunnel engine, designed for tens-of-billions data integration","description":"Apache SeaTunnel Committer | Zongwen Li","date":"2022-12-09T00:00:00.000Z","formattedDate":"December 9, 2022","tags":[{"label":"Meetup","permalink":"/blog/tags/meetup"}],"readingTime":9.925,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"Apache SeaTunnel Committer | Zongwen Li","title":"SeaTunnel engine, designed for tens-of-billions data integration","tags":["Meetup"]},"prevItem":{"title":"SeaTunnel supports IoTDB to implement IoT data synchronization","permalink":"/blog/Apache IoTDB (Internet of Things Database) is a software system that integrates the collection"},"nextItem":{"title":"Mafengwo finally chose Apache SeaTunnel after analyzing these 9 points of how it works!","permalink":"/blog/During the joint Apache SeaTunnel & IoTDB Meetup on October 15,"}},"content":"![](/image/16714309762810/16714309876928.jpg)\\nApache SeaTunnel Committer | Zongwen Li\\n\\n## Introduction to Apache SeaTunnel\\nApache SeaTunnel is a very easy-to-use ultra-high-performance distributed data integration platform that supports real-time synchronization of massive data.\\n\\nApache SeaTunnel will try its best to solve the problems that may be encountered in the process of mass data synchronization, such as data loss and duplication, task accumulation and delay, low throughput, etc.\\n\\n## Milestones of SeaTunnel\\nSeaTunnel, formerly known as Waterdrop, was open-sourced on GitHub in 2017.\\n\\nIn October 2021, the Waterdrop community joined the Apache incubator and changed its name to SeaTunnel.\\n\\n## SeaTunnel Growth\\n\\n![](/image/16714309762810/16714310892722.jpg)\\n![](/image/16714309762810/16714310916195.jpg)\\n![](/image/16714309762810/16714310939883.jpg)\\nWhen SeaTunnel entered the Apache incubator, the SeaTunnel community ushered in rapid growth.\\n\\nAs of now, the SeaTunnel community has a total of 151 contributors, 4314 Stars, and 804 forks.\\n\\n## Pain points of Existing engines\\nThere are many pain points faced by the existing computing engines in the field of data integration, and we will talk about this first. The pain points usually lie in three directions:\\n\\n* The fault tolerance ability of the engine;\\n* Difficulty in configuration, operation, and maintenance of engine jobs;\\n* The resource usage of the engine.\\n\\n## fault tolerance\\nGlobal Failover\\n![Global-failover](/image/16714309762810/16714311670656.jpg)\\nFor distributed streaming processing systems, high throughput and low latency are often the most important requirements. At the same time, fault tolerance is also very important in distributed systems. For scenarios that require high correctness, the implementation of exactly once is often very important.\\n\\nIn a distributed streaming processing system, since the computing power, network, load, etc. of each node are different, the state of each node cannot be directly merged to obtain a true global state. To obtain consistent results, the distributed processing system needs to be resilient to node failure, that is, it can recover to consistent results when it fails.\\n\\nAlthough it is claimed in their official blog that Spark\u2019s Structured Streaming uses the Chandy-Lamport algorithm for Failover processing, it does not disclose more details.\\n\\nFlink implemented Checkpoint as a fault-tolerant mechanism based on the above algorithm and published related papers: Lightweight Asynchronous Snapshots for Distributed Dataflows\\n\\nIn the current industrial implementation, when a job fails, all nodes of the job DAG need to failover, and the whole process will last for a long time, which will cause a lot of upstream data to accumulate.\\n\\n## Loss of Data\\n![](/image/16714309762810/16714312426416.jpg)\\nThe previous problem will cause a long-time recovery, and the business service may accept a certain degree of data delay.\\n\\nIn a worse case, a single sink node cannot be recovered for a long time, and the source data has a limited storage time, such as MySQL and Oracle log data, which will lead to data loss.\\n\\n## Configuration is cumbersome\\nSingle table Configuration\\n\\n![](/image/16714309762810/16714312637015.jpg)\\nThe previous examples are cases regarding a small number of tables, but in real business service development, we usually need to synchronize thousands of tables, which may be divided into databases and tables at the same time;\\n\\nThe status quo is that we need to configure each table, a large number of table synchronization takes a lot of time for users, and it is prone to problems such as field mapping errors, which are difficult to maintain.\\n\\n## Not supporting Schema Evolution\\n\\n![Not-supports-DDL](/image/16714309762810/16714312769761.jpg)\\nBesides, according to the research report of Fivetran, 60% of the company\u2019s schema will change every month, and 30% will change every week.\\n\\nHowever, none of the existing engines supports Schema Evolution. After changing the Schema each time, the user needs to reconfigure the entire link, which makes the maintenance of the job very cumbersome.\\n\\n## The high volume of resource usage\\n\\nThe database link takes up too much\\n\\n![](/image/16714309762810/16714313100541.jpg)\\nIf our Source or Sink is of JDBC type, since the existing engine only supports one or more links per table, when there are many tables to be synchronized, more link resources will be occupied, which will bring a great burden to the database server.\\n## Operator pressure is uncontrollable\\n\\n![](/image/16714309762810/16714313301435.jpg)\\nIn the existing engine, a buffer and other control operators are used to control the pressure, that is, the back pressure mechanism; since the back pressure is transmitted level by level, there will be pressure delay, and at the same time, the processing of data will not be smooth enough, increasing the GC time, fault-tolerant completion time, etc.\\n\\nAnother case is that neither the source nor the sink has reached the maximum pressure, but the user still needs to control the synchronization rate to prevent too much impact on the source database or the target database, which cannot be controlled through the back pressure mechanism.\\n\\n## Architecture goals of Apache SeaTunnel Engine\\nTo solve these severe issues faced by computing engines, we self-developed our engine expertise in big data integration.\\n\\nFirstly, let\u2019s get through what goals this engine wants to achieve.\\n\\n## Pipeline Failover\\n\\n![](/image/16714309762810/16714313559400.jpg)\\nIn the data integration case, there is a possibility that a job can synchronize hundreds of sheets, and the failure of one node or one table will lead to the failure of all tables, which is too costly.\\n\\nWe expect that unrelated Job Tasks will not affect each other during fault tolerance, so we call a vertex collection with upstream and downstream relationships a Pipeline, and a Job can consist of one or more pipelines.\\n\\n## Regional Failover\\nNow if there is an exception in the pipeline, we still need to failover all the vertex in the pipeline; but can we restore only part of the vertex?\\n![](/image/16714309762810/16714313919617.jpg)\\nFor example, if the Source fails, the Sink does not need to restart. In the case of a single Source and multiple Sinks, if a single Sink fails, only the Sink and Source that failed will be restored; that is, only the node that failed and its upstream nodes will be restored.\\n\\nObviously, the stateless vertex does not need to be restarted, and since SeaTunnel is a data integration framework, we do not have aggregation state vertexes such as Agg and Count, so we only need to consider Sink;\\n\\n* Sink does not support idempotence & 2PC; no restart and restart will result in the same data duplication, which can only be solved by Sink without restarting;\\n* Sink supports idempotence, but does not support 2PC: because it is idempotent writing, it does not matter whether the source reads data inconsistently every time, and it does not need to be restarted;\\n* Sink supports 2PC:\\n* If the Source supports data consistency, if an abort is not executed, the processed old data will be automatically ignored through the channel data ID, and at the same time, it will face the problem that the transaction session time may time out;\\n* If the Source does not support data consistency, perform abort on the Sink to discard the last data, which has the same effect as restarting but does not require initialization operations such as re-establishing links;\\n* That is, the simplest implementation is to execute abort.\\nWe use the pipeline as the minimum granularity for fault-tolerant management, and use the Chandy-Lamport algorithm to realize fault-tolerant distributed jobs.\\n\\n## Data Cache\\n![](/image/16714309762810/16714314318184.jpg)\\nFor sink failure, when data cannot be written, a possible solution is to work two jobs at the same time.\\n\\nOne job reads the database logs using the CDC source connector and then writes the data to Kafka using the Kafka Sink connector. Another job reads data from Kafka using the Kafka source connector and writes data to the destination using the destination sink connector.\\n\\nThis solution requires users to have a deep understanding of the underlying technology, and both tasks will increase the difficulty of operation and maintenance. Because every job needs JobMaster, it requires more resources.\\n\\nIdeally, the user only knows that they will be reading data from the source and writing data to the sink, and at the same time, during this process, the data can be cached in case the sink fails. The sync engine needs to automatically add caching operations to the execution plan and ensure that the source still works in the event of a sink failure. In this process, the engine needs to ensure that the data written to the cache and read from the cache are transactional, to ensure data consistency.\\n\\n## Sharding & Multi-table Sync\\n![](/image/16714309762810/16714314489916.jpg)\\n\\nFor a large number of table synchronization, we expect that a single Source can support reading multiple structural tables, and then use the side stream output to keep consistent with a single table stream.\\n\\nThe advantage of this is that it can reduce the link occupation of the data source and improve the utilization rate of thread resources.\\n\\nAt the same time, in SeaTunnel Engine, these multiple tables will be regarded as a pipeline, which will increase the granularity of fault tolerance; there are trade-offs, and the user can choose how many tables a pipeline can pass through.\\n\\n## Schema Evolution\\n![](/image/16714309762810/16714314658701.jpg)\\nSchema Evolution is a feature that allows users to easily change the current schema of a table to accommodate changing data over time. Most commonly, it is used when performing an append or overwrite operation, to automatically adjust the schema to include one or more new columns.\\n\\nThis feature is required for real-time data warehouse scenarios. Currently, the Flink and Spark engines do not support this feature.\\n\\nIn SeaTunnel Engine, we will use the Chandy-Lamport algorithm to send DDL events, make them flow in the DAG graph and change the structure of each operator, and then synchronize them to the Sink.\\n\\n## Shared Resource\\n![Shared-resource](/image/16714309762810/16714314806989.jpg)\\nThe Multi-table feature can reduce the use of some Source and Sink link resources. At the same time, we have implemented Dynamic Thread Resource Sharing in SeaTunnel Engine, reducing the resource usage of the engine on the server.\\n\\n## Speed Control\\n![](/image/16714309762810/16714315001348.jpg)\\nAs for the problems that cannot be solved by the back pressure mechanism, we will optimize the Buffer and Checkpoint mechanism:\\n\\n* Firstly, We try to allow Buffer to control the amount of data in a period;\\n* Secondly, by the Checkpoint mechanism, the engine can lock the buffer after the Checkpoint reaches the maximum number of parallelism and executes an interval time, prohibiting the writing of Source data, achieving the result of taking the pressure proactively, avoiding issues like back pressure delay or failure to be delivered to Source.\\nThe above is the design goal of SeaTunnel Engine, hoping to help you better solve the problems that bother you in data integration. In the future, we will continue to optimize the experience of using SeaTunnel so that more people are willing to use it.\\n\\n## The future of Apache SeaTunnel\\nAs an Apache incubator project, the Apache SeaTunnel community is developing rapidly. In the following community planning, we will focus on four directions:\\n\\nSupport more data integration scenarios (Apache SeaTunnel Engine)\\nIt is used to solve the pain points that existing engines cannot solve, such as the synchronization of the entire database, the synchronization of table structure changes, and the large granularity of task failure;\\n> Guys who are interested in the engine can pay attention to this Umbrella: https://github.com/apache/incubator-seatunnel/issues/2272\\n\\nExpand and improve Connector & Catalog ecology\\nSupport more Connector & Catalog, such as TiDB, Doris, Stripe, etc., and improve existing connectors, improve their usability and performance, etc.;\\nSupport CDC connector for real-time incremental synchronization scenarios.\\n> Guys who are interested in connectors can pay attention to this Umbrella: https://github.com/apache/incubator-seatunnel/issues/1946\\n\\nSupport for more versions of the engines\\nSuch as Spark 3.x, Flink 1.14.x, etc.\\n> Guys who are interested in supporting Spark 3.3 can pay attention to this PR: https://github.com/apache/incubator-seatunnel/pull/2574\\n\\nEasier to use (Apache SeaTunnel Web)\\nProvides a web interface to make operations more efficient in the form of DAG/SQL Simple and more intuitive display of Catalog, Connector, Job, etc.;\\nAccess to the scheduling platform to make task management easier\\n> Guys who are interested in Web can pay attention to our Web sub-project: https://github.com/apache/incubator-seatunnel-web"},{"id":"During the joint Apache SeaTunnel & IoTDB Meetup on October 15,","metadata":{"permalink":"/blog/During the joint Apache SeaTunnel & IoTDB Meetup on October 15,","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2022-11-17-Mafengwo-finally-chose-Apache-SeaTunnel-after-analyzing-these-9-points-of-how-it-works.md","source":"@site/blog/2022-11-17-Mafengwo-finally-chose-Apache-SeaTunnel-after-analyzing-these-9-points-of-how-it-works.md","title":"Mafengwo finally chose Apache SeaTunnel after analyzing these 9 points of how it works!","description":"Bo Bi, data engineer at Mafengwo","date":"2022-11-17T00:00:00.000Z","formattedDate":"November 17, 2022","tags":[{"label":"Meetup","permalink":"/blog/tags/meetup"}],"readingTime":18.22,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"During the joint Apache SeaTunnel & IoTDB Meetup on October 15,","title":"Mafengwo finally chose Apache SeaTunnel after analyzing these 9 points of how it works!","tags":["Meetup"]},"prevItem":{"title":"SeaTunnel engine, designed for tens-of-billions data integration","permalink":"/blog/Apache SeaTunnel Committer | Zongwen Li"},"nextItem":{"title":"A tutorial to help you develop a SeaTunnel Connector hand-by-hand while avoiding pitfalls","permalink":"/blog/2022/09/20/A-tutorial-to-help-you develop-a-SeaTunnel-Connector-hand-by-hand-while-avoiding -pitfalls"}},"content":"![](/image/16714322747890/16714322908857.jpg)\\n\\n![](/image/16714322747890/16714322944041.jpg)\\nBo Bi, data engineer at Mafengwo\\n\\n> During the joint Apache SeaTunnel & IoTDB Meetup on October 15, Bo Bi, the data engineer at a leading Chinese travel-social e-commerce platform Mafengwo, introduced the basic principles of SeaTunnel and related enterprise practice thinking, the pain points and optimization thinking in typical scenarios of Mafengwo\u2019s big data development and scheduling platform, and shared his experience of participating in community contributions. We hope to help you understand SeaTunnel and the paths and skills of community building at the same time.\\n\\n\\n## Introduction to the technical principle of SeaTunnel\\nSeaTunnel is a distributed, high-performance data integration platform for the synchronization and transformation of large volumes of data (offline and real-time)\\n\\nThe diagram above shows the workflow of SeaTunnel, which in simple terms consists of 3 parts: input, transformation, and output; more complex data processing is just a combination of several actions.\\n\\nIn a synchronization scenario, such as importing Kafka to Elasticsearch, Kafka is the Source of the process and Elasticsearch is the Sink of the process.\\n\\nIf, during the import process, the field columns do not match the external data columns to be written and some column or type conversion is required, or if you need to join multiple data sources and then do some data widening, field expansion, etc., then you need to add some Transform in the process, corresponding to the middle part of the picture.\\n\\n![](/image/16714322747890/16714323322988.jpg)\\nThis shows that the core of SeaTunnel is the Source, Transform and Sink process definitions.\\n\\nIn Source we can define the data sources we need to read, in Sink, we can define the data pipeline and eventually write the external storage, and we can transform the data in between, either using SQL or custom functions.\\n\\n## SeaTunnel Connector API Version V1 Architecture Breakdown\\nFor a mature component framework, there must be something unique about the design pattern of the API design implementation that makes the framework scalable.\\n\\nThe SeaTunnel architecture consists of three main parts.\\n\\n1\u3001SeaTunnel Basic API.\\n\\n1. the implementation of the SeaTunnel base API.\\n\\n2. SeaTunnel\u2019s plug-in system.\\n\\n## SeaTunnel Basic API\\n![](/image/16714322747890/16714323668557.jpg)\\nThe above diagram shows the definition of the interface, the Plugin interface in SeaTunnel abstracts the various actions of data processing into a Plugin.\\n\\nThe five parts of the diagram below, Basesource, Basetransfform, Basesink, Runtimeenv, and Execution, all inherit from the Plugin interface.\\n![](/image/16714322747890/16714323741126.jpg)\\n\\nAs a process definition plug-in, Source is responsible for reading data, Transform is responsible for transforming, Sink is responsible for writing and Runtimeenv is setting the base environment variables.\\n\\nThe overall SeaTunnel base API is shown below\\n\\n![](/image/16714322747890/16714323846302.jpg)\\nExecution, the data flow builder used to build the entire data flow based on the first three, is also part of the base API\\n\\n![](/image/16714322747890/16714323920717.jpg)\\n\\n## SeaTunnel Base API Implementation\\n\\nBased on the previous basic APIs, SeaTunnel has been implemented in separate packages for different computing engines, currently the Spark API abstraction and the Flink API abstraction, which logically completes the process of building the data pipeline.\\n\\n![](/image/16714322747890/16714323741126.jpg)\\n\\nDue to space constraints, we will focus on Spark batch processing. Based on the wrapped implementation of the previous base Api, the first is that Base spark source implements Base source, base Spark transform implements Base transform and Base Spark sink implements Base sink.\\n\\nThe method definition uses Spark\u2019s Dataset as the carrier of the data, and all data processing is based on the Dataset, including reading, processing and exporting.\\n\\nThe SparkEnvironment, which internally encapsulates Spark\u2019s Sparksession in an Env, makes it easy for individual plugins to use.\\n\\n![](/image/16714322747890/16714324136843.jpg)\\n\\nThe Spark batch process ends with SparkBatchExecution (the data stream builder), which is the core code snippet used to functionally build our data stream Pipeline, the most basic data stream on the left in the diagram below.\\n\\nThe user-based definition of each process component is also the configuration of Source Sink, Transform. More complex data flow logic can be implemented, such as multi-source Join, multi-pipeline processing, etc., all of which can be built through Execution.\\n\\n![](/image/16714322747890/16714324237449.jpg)\\n## SeaTunnel Connector V1 API Architecture Summary\\n![](/image/16714322747890/16714324336701.jpg)\\nSeaTunnel\u2019s API consists of three main parts.\\n\\nThe first part is the SeaTunnel base API, which provides the basic abstract interfaces such as Source, Sink, Transform, and Plugin.\\n\\nThe second part is based on a set of interfaces Transform, Sink, Source, Runtime, and Execution provided by the SeaTunnel base API, which is wrapped and implemented on the Flink and Spark engines respectively, i.e. Spark engine API layer abstraction and Flink engine API layer abstraction.\\n\\nBoth Flink and Spark engines support stream and batch processing, so there are different ways to use streams/batches under the Flink API abstraction and Spark abstraction APIs, such as Flinkstream and Flinkbatch under the Flink abstraction API, and Sparkbatch and Sparkstreaming under the Spark abstraction API.\\n\\nThe third part is the plug-in system, based on Spark abstraction and Flink API abstraction, SeaTunnel engine implements rich connectors and processing plug-ins, while developers can also be based on different engine API abstractions, and extensions to achieve their own Plugin.\\n\\nSeaTunnel Implementation Principle\\nCurrently, SeaTunnel offers a variety of ways to use Flink, Spark, and FlinkSQL. Due to space limitations, we will introduce the execution principles of the Spark method.\\n\\nFirst, the entry starts the command Start-seatunnel-spark.sh via the shell, which internally calls Sparkstarter\u2019s Class, which parses the parameters passed by the shell script, and also parses the Config file to determine which Connectors are defined in the Config file, such as Fake, Console, etc.\\n![](/image/16714322747890/16714324454477.jpg)\\nThen find the Connector path from the Connector plugin directory and stitch it into the Spark-submit launch command with \u2014 jar, so that the found Plugin jar package can be passed to the Spark cluster as a dependency.\\n\\nFor Connector plugins, all Spark Connectors are packaged in the plugin directory of the distribution (this directory is managed centrally).\\n\\nAfter Spark-submit is executed, the task is submitted to the Spark cluster, and the Main class of the Spark job\u2019s Driver builds the data flow Pipeline through the data flow builder Execution, combined with Souce, Sink, and Transform so that the whole chain is connected.\\n\\n## SeaTunnel Connector V2 API Architecture\\n\\nIn the latest community release of SeaTunnel 2.2.0-beta, the refactoring of the Connectorapi, now known as the SeaTurnelV2 API, has been completed!\\n\\nWhy do we need to reconfigure?\\n\\nAs the Container is currently a strongly coupled engine, i.e. Flink and Spark API, if the Flink or Spark engine is upgraded, the Connector will also have to be adjusted, possibly with changes to parameters or interfaces.\\n\\nThis can lead to multiple implementations for different engines and inconsistent parameters to develop a new Connector. Therefore, the community has designed and implemented the V2 version of the API based on these pain points.\\n\\n![](/image/16714322747890/16714324726276.jpg)\\n\\n## SeaTunnel V2 API Architecture\\n\\nSeaTunnel V2 API Architecture\\n\\n### 1.Table API\\n\\n\xb7DataType: defines SeaTunnel\u2019s data structure SeaTunnelRow, which is used to isolate the engine\\n\\n\xb7Catalog: used to obtain Table Scheme, Options, etc..\\n\\n\xb7Catalog Storage: used to store user-defined Table Schemes etc. for unstructured engines such as Kafka.\\n\\n\xb7Table SPI: mainly used to expose the Source and Sink interfaces as an SPI\\n\\n### 2. Source & Sink API\\n\\nDefine the Connector\u2019s core programming interface for implementing the Connector\\n\\n### 3.Engine API\\n\xb7Translation: The translation layer, which translates the Source and Sink APIs implemented by the Connector into a runnable API inside the engine.\\n\\n\xb7Execution: Execution logic, used to define the execution logic of Source, Transform, Sink and other operations within the engine.\\n\\nThe Source & Sink API is the basis for the implementation of the connector and is very important for developers.\\n\\nThe design of the v2 Source & Sink API is highlighted below\\n\\n## SeaTunnel Connector V2 Source API\\nThe current version of SeaTunnel\u2019s API design draws on some of Flink\u2019s design concepts, and the more core classes of the Source API are shown below.\\n\\n![](/image/16714322747890/16714325444078.jpg)\\n![](/image/16714322747890/16714325474972.jpg)\\nThe core Source API interaction flow is shown above. In the case of concurrent reads, the enumerator SourceSplitEnumerator is required to split the task and send the SourceSplit down to the SourceReader, which receives the split and uses it to read the external data source.\\n\\nIn order to support breakpoints and Eos semantics, it is necessary to preserve and restore the state, for example by preserving the current Reader\u2019s Split consumption state and restoring it after a failure in each Reader through the Checkpoint state and Checkpoint mechanism, so that the data can be read from the place where it failed.\\n\\n## SeaTunnel Connector V2 Sink API\\n![](/image/16714322747890/16714325600316.jpg)\\nThe overall Sink API interaction flow is shown in the diagram below. The SeaTunnel sink is currently designed to support distributed transactions, based on a two-stage transaction commit.\\n\\nFirst SinkWriter continuously writes data to an external data source, then when the engine does a checkpoint, it triggers a first-stage commit.\\n\\nSinkWriter needs to do a Prepare commit, which is the first stage of the commit.\\n\\nThe engine will determine if all the Writer\'s first stage succeeds, and if they all succeed, the engine will combine the Subtask\u2019s Commit info with the Commit method of the Committer to do the actual commit of the transaction and operate the database for the Commit, i.e. the second stage of the commit. This is the second stage of commit.\\n\\n![](/image/16714322747890/16714325681738.jpg)\\nFor the Kafka sink connector implementation, the first stage is to do a pre-commit by calling KafkaProducerSender.prepareCommit().\\n\\nThe second commit is performed via Producer.commitTransaction();.\\n\\nflush(); flushes the data from the Broker\u2019s system cache to disk.\\n\\nFinally, it is worth noting!\\n\\nBoth SinkCommitter and SinkAggregatedCommitter can perform a second stage commit to replace the Committer in the diagram. The difference is that SinkCommitter can only do a partial commit of a single Subtask\u2019s CommitInfo, which may be partially successful and partially unsuccessful, and cannot be handled globally. The difference is that the SinkCommitter can only do partial commits of a single Subtask\u2019s CommitInfo, which may be partially successful and partially unsuccessful.\\n\\nSinkAggregatedCommitter is a single parallel, aggregating the CommitInfo of all Subtask, and can do the second stage commit as a whole, either all succeed or all fail, avoiding the problem of inconsistent status due to partial failure of the second stage.\\n\\nIt is therefore recommended that the SinkAggregatedCommitter be used in preference.\\n\\n## Comparison of SeaTunnel V1 and V2 API processing flows\\nWe can look at the changes before and after the V1 V2 upgrade from a data processing perspective, which is more intuitive, Spark batch processing as an example: SeaTunnel V1: The entire data processing process is based on the Spark dataset API, and the Connector and the compute engine are strongly coupled.\\n\\n![](/image/16714322747890/16714325887598.jpg)\\nSeaTunnel V2: Thanks to the work of the engine translator, the Connector API, and the SeaTunnelRow, the data source of the SeaTunnel internal data structures accessed through the Connector, are translated by the translation layer into a runnable Spark API and spark dataset that is recognized inside the engine during data transformation.\\n\\nAs data is written out, the Spark API and Spark dataset are translated through the translation layer into an executable connector API inside the SeaTunnel connector and a data source of internal SeaTunnel structures that can be used.\\n\\n> Overall, the addition of a translation layer at the API and compute engine layers decouples the Connector API from the engine, and the Connector implementation no longer depends on the compute engine, making the extension and implementation more flexible.\\n\\n> In terms of community planning, the V2 API will be the main focus of development, and more features will be supported in V2, while V1 will be stabilized and no longer maintained.\\n\\n## Practice and reflections on our off-line development scheduling platform\\n\\n### Practice and reflections on our off-line development scheduling platform\\n\\n![](/image/16714322747890/16714326227360.jpg)\\nHornet\u2019s Nest Big Data Development Platform, which focuses on providing one-stop big data development and scheduling services, helps businesses solve complex problems such as data development management, task scheduling and task monitoring in offline scenarios.\\n\\nThe offline development and scheduling platform plays the role of the top and the bottom. The top is to provide open interface API and UI to connect with various data application platforms and businesses, and the bottom is to drive various computations and storage, and then run in an orderly manner according to the task dependency and scheduling time.\\n\\n## Platform Capabilities\\n**Data development**\\n\\nTask configuration, quality testing, release live\\n\\n**\xb7Data synchronisation**\\n\\nData access, data processing, data distribution\\n\\n**\xb7Scheduling capabilities**\\n\\nSupports timed scheduling, triggered scheduling\\n\\n**\xb7Operations and Maintenance Centre\\n**\\nJob Diagnosis, Task O&M, Instance O&M\\n\\n**\xb7Management**\\n\\nLibrary table management, permission management, API management, script management\\n\\nIn summary, the core capabilities of the offline development scheduling platform are openness, versatility, and one-stop shopping. Through standardized processes, the entire task development cycle is managed and a one-stop service experience is provided.\\n\\n## The architecture of the platform\\n![](/image/16714322747890/16714326749427.jpg)\\nThe Hornet\u2019s Nest Big Data Development and Scheduling Platform consists of four main modules: the task component layer, the scheduling layer, the service layer, and the monitoring layer.\\n\\nThe service layer is mainly responsible for job lifecycle management (e.g. job creation, testing, release, offline); Airflow dagphthon file building and generating, task bloodline dependency management, permission management, API (providing data readiness, querying of task execution status).\\n\\nThe scheduling layer is based on Airflow and is responsible for the scheduling of all offline tasks.\\n\\nA task component layer that enables users to develop data through supported components that include tools such as SparkSQL/, HiveSQ, LMR), StarRocks import, etc., directly interfacing with underlying HDFS, MySQL, and other storage systems.\\n\\nThe monitoring layer is responsible for all aspects of monitoring and alerting on scheduling resources, computing resources, task execution, etc.\\n\\n## Open Data Sync Capability Scenarios\\nChallenges with open capabilities: Need to support multiple business scenarios and meet flexible data pipeline requirements (i.e. extend to support more task components such as hive2clickhourse, clickhourse2mysql, etc.)\\n\\nExtending task components based on Airflow: higher maintenance costs for extensions, need to reduce costs and increase efficiency (based on the limited provider\'s Airflow offers, less applicable in terms of usage requirements, Airflow is a Python technology stack, while our team is mainly based on the Java technology stack, so the technology stack difference brings higher iteration costs)\\n\\nSelf-developed task components: the high cost of platform integration, long development cycle, high cost of the configuration of task components. (Research or implement task components by yourself, different ways of adapting the parameters of the components in the service layer, no uniform way of parameter configuration)\\n\\nWe wanted to investigate a data integration tool that, firstly, supported a rich set of components, provided out-of-the-box capabilities, was easy to extend, and offered a uniform configuration of parameters and a uniform way of using them to facilitate platform integration and maintenance.\\n\\n* Selection of data integration tools\\n![](/image/16714322747890/16714327002726.jpg)\\nTo address the pain points mentioned above, we actively explored solutions and conducted a selection analysis of several mainstream data integration products in the industry. As you can see from the comparison above, Datax and SeaTunnel both offer good scalability, and high stability, support rich connector plugins, provide scripted, uniformly configurable usage, and have active communities.\\n\\nHowever, Datax is limited by being distributed and is not well suited to massive data scenarios.\\n\\nIn contrast, SeaTunnel offers the ability to provide distributed execution, distributed transactions, scalable levels of data handling, and the ability to provide a unified technical solution in data synchronization scenarios.\\n\\nIn addition to the advantages and features described above and the applicable scenarios, more importantly, the current offline computing resources for big data are unified and managed by yarn, and for the subsequently extended tasks we also wish to execute on Yarn, we finally prefer SeaTunnel for our usage scenarios.\\n\\nFurther performance testing of SeaTunnel and the development of an open data scheduling platform to integrate SeaTunnel may be carried out at a later stage, and its use will be rolled out gradually.\\n\\n## Outbound scenario: Hive data sync to StarRocks\\n\\nTo briefly introduce the background, the Big Data platform has now completed the unification of the OLAP engine layer, using the StarRocks engine to replace the previous Kylin engine as the main query engine in OLAP scenarios.\\n\\nIn the data processing process, after the data is modelled in the data warehouse, the upper model needs to be imported into the OLAP engine for query acceleration, so there are a lot of tasks to push data from Hive to StarRocks every day. task (based on a wrapper for the StarRocks Broker Load import method) to a StarRocks-based table.\\n\\nThe current pain points are twofold.\\n\\n\xb7Long data synchronization links: Hive2StarRocks processing links, which require at least two tasks, are relatively redundant.\\n\\n\xb7Outbound efficiency: From the perspective of outbound efficiency, many Hive models themselves are processed by Spark SQL, and based on the processing the Spark Dataset in memory can be pushed directly to StarRocks without dropping the disk, improving the model\u2019s regional time.\\n\\n![](/image/16714322747890/16714327218590.jpg)\\nStarRocks currently also supports Spark Load, based on the Spark bulk data import method, but our ETL is more complex, needs to support data conversion multi-table Join, data aggregation operations, etc., so temporarily can not meet.\\n\\nWe know from the SeaTunnel community that there are plans to support the StarRocks Sink Connector, and we are working on that part as well, so we will continue to communicate with the community to build it together later.\\n\\n## How to get involved in community building\\n### SeaTunnel Community Contribution\\nAs mentioned earlier, the community has completed the refactoring of the V1 to V2 API and needs to implement more connector plug-ins based on the V2 version of the connector API, which I was lucky enough to contribute to.\\n\\nI am currently responsible for big data infrastructure work, which many mainstream big data components big data also use, so when the community proposed a connector issue, I was also very interested in it.\\n\\nAs the platform is also investigating SeaTunnel, learning and being able to contribute pr to the community is a great way to learn about SeaTunnel.\\n\\nI remember at first I proposed a less difficult pr to implement the WeChat sink connector, but in the process of contributing I encountered many problems, bad coding style, code style did not take into account the rich output format supported by the extension, etc. Although the process was not so smooth, I was really excited and accomplished when the pr was merged. Although the process was not so smooth, it was very exciting and rewarding when the pr was merged.\\n\\nAs I became more familiar with the process, I became much more efficient at submitting pr and was confident enough to attempt difficult issues.\\n### How to get involved in community contributions quickly\\n* Good first issue\\nGood first issue #3018 #2828\\n\\nIf you are a first-time community contributor, it is advisable to focus on the Good first issue first, as it is basically a relatively simple and newcomer-friendly issue.\\n\\nThrough Good first issue, you can get familiar with the whole process of participating in the GitHub open source community contribution, for example, first fork the project, then submit the changes, and finally submit the pull request, waiting for the community to review, the community will target to you to put forward some suggestions for improvement, directly will leave a comment below, until when your pr is merged in, this will have completed a comp\\n\\n* Subscribe to community mailings\\nOnce you\u2019re familiar with the pr contribution process, you can subscribe to community emails to keep up to date with what\u2019s happening in the community, such as what features are currently being worked on and what\u2019s planned for future iterations. If you\u2019re interested in a feature, you can contribute to it in your own situation!\\n* Familiarity with git use\\nThe main git commands used in development are git clone, git pull, git rebase and git merge. git rebase is recommended in the community development specification and does not generate additional commits compared to git merge.\\n* Familiarity with GitHub project collaboration process\\nOpen source projects are developed collaboratively by multiple people, and the collaboration method on GitHub is at its core outlined in fork For example, the apache st project, which is under the apache space, is first forked to our own space on GitHub\\n\\nThen modify the implementation, mention a pull request, and submit the pull request to be associated with the issue, in the commit, if we change a long time, in the upward commit, then the target branch has a lot of new commits exhausted this time we need to do a pull& merge or rebase.\\n\\n* Source code compilation project\\nIt is important to be familiar with source compilation, as local source compilation can prove that the code added to a project can be compiled, and can be used as a preliminary check before committing to pr. Source compilation is generally slow and can be speeded up by using mvn -T for multi-threaded parallel compilation.\\n* Compilation checks\\nPre-compilation checks, including Licence header, Code checkstyle, and Document checkstyle, will be checked during Maven compilation, and if they fail, the CI will not be passed. So it is recommended to use some plug-in tools in the idea to improve the efficiency, such as Code checkstyle has a plug-in to automatically check the code specification, Licence header can add code templates in the idea, these have been shared by the community before how to do!\\n* Add full E2E\\n\\nAdd full E2E testing and ensure that the E2E is passed before the Pull request.\\n\\nFinally, I hope more students will join the SeaTunnel community, where you can not only feel the open-source spirit and culture of Apache but also understand the management process of Apache projects and learn good code design ideas.\\n\\nWe hope that by working together and growing together, we can build SeaTunnel into a top-notch data integration platform."},{"id":"/2022/09/20/A-tutorial-to-help-you develop-a-SeaTunnel-Connector-hand-by-hand-while-avoiding -pitfalls","metadata":{"permalink":"/blog/2022/09/20/A-tutorial-to-help-you develop-a-SeaTunnel-Connector-hand-by-hand-while-avoiding -pitfalls","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2022-09-20-A-tutorial-to-help-you develop-a-SeaTunnel-Connector-hand-by-hand-while-avoiding -pitfalls.md","source":"@site/blog/2022-09-20-A-tutorial-to-help-you develop-a-SeaTunnel-Connector-hand-by-hand-while-avoiding -pitfalls.md","title":"A tutorial to help you develop a SeaTunnel Connector hand-by-hand while avoiding pitfalls","description":"SeaTunnel Connector Acess Plan","date":"2022-09-20T00:00:00.000Z","formattedDate":"September 20, 2022","tags":[],"readingTime":12.055,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Mafengwo finally chose Apache SeaTunnel after analyzing these 9 points of how it works!","permalink":"/blog/During the joint Apache SeaTunnel & IoTDB Meetup on October 15,"},"nextItem":{"title":"Code Demo for SeaTunnel Connector Development Process","permalink":"/blog/2022/09/19/Code-Demo-for-SeaTunnel-Connector-Development-Process"}},"content":"![](https://miro.medium.com/max/1400/0*4fOZaPYhwL2pdUpK)\\n\\n## SeaTunnel Connector Acess Plan\\nDuring the recent live event of the SeaTunnel Connector Access Plan, Beluga open source engineer Wang Hailin shared the \u201cSeaTunnel Connector Access Plan and Development Guide to Avoiding Pit,\u201d and taught everyone how to develop a connector from scratch, including the whole process \u2014 from preparation to testing, and final PR.\\n\\n## Speaker\\n![](https://miro.medium.com/max/1100/0*LRtFiJkgV5DEWOAa)\\n**Wang Hailin**\\n\\nWailin Hailin is an open-source enthusiast, SkyWalking Committer, DolphinScheduler, and SeaTunnel contributor. His current work focuses on performance monitoring, data processing, and more. He likes to study related technical implementations and participate in community exchanges and contributions.\\n\\n## This presentation is divided into 5 parts:\\n1. About the connector access incentive program\\n2. Preparation before claiming/developing connector\\n3. Small things in development\\n4. Considerations for writing E2E Tests\\n5. Preparations to submit a PR\\n\\n## 1. About the Connector Access Incentive Plan\\nFirstly, let me introduce the SeaTunnel Connector Access Incentive Program, and the steps to develop a connector from start to finish (even for novices). This includes the whole process of preparation for development, testing, and final PR.\\n\\nThe SeaTunnel community released a new connector API not long ago, which supports running on various engines, including Flink, Spark, and more. This eliminates the need for repeated development of the old version.\\n\\nAfter the new API is released, the old connector needs to be migrated, or the new connector should be supported.\\n\\nIn order to motivate the community to actively participate in the SeaTunnel Connector Access work and help build SeaTunnel into a more efficient data integration platform, the SeaTunnel community-initiated activities, sponsored by Beluga Open Source.\\n\\nThe activities have three modes: simple, medium, and hard for the task of accessing the connector. The threshold is low.\\n\\nYou can see which tasks need to be claimed on the activity issue list, as well as segmentation based on difficulty and priority. You can choose the activity you are comfortable with. You can start contributing based on the difficulty level.\\n![](https://miro.medium.com/max/1400/0*laqub6yhNDOqPaGc)\\n\\nThe ecological construction of SeaTunnel can become more complete and advanced only with the help of your contributions. You are welcome to participate actively.\\n\\nIn order to express our gratitude, our event has set up a link where points can be exchanged for physical prizes. The more points you get, the more prized you can win!\\n\\nPresently, we\u2019ve seen many small partners participate in the event and submit their connectors. It\u2019s not too late to join as there is still a significant period of time before the event ends. Based on the difficulty of the activity, the deadline may be relaxed or extended.\\n\\n## 2. Preparations Before Claiming/Developing Connectors\\n\\nSo, how do you get involved with this amazing activity?\\n\\nBy first getting to know the basics of a connector.\\n\\n### 01. What is a connector?\\n![](https://miro.medium.com/max/750/0*IjdxVOKUu649s7vQ)\\nA connector is composed of Source and SInk (Source + Sink).\\n\\nIn the above figure, the connectors are connected to various data sources at the upper and lower layers. The source is responsible for reading data from external data sources, while the sink is responsible for writing data to external sources.\\n\\nThere is also an abstraction layer between the source and the sink.\\n\\nThrough this abstraction later, the data types of various data sources can be uniformly converted into the data format of SeaTunnelRow. This allows users to arbitrarily assemble various sources and sinks, so as to realize the integration of heterogeneous data sources, and data synchronization between multiple data sources.\\n\\n### 02. How to claim a connector\\n\\nAfter understanding the basic concepts, the next step is to claim the connector.\\n\\nGitHub link: [https://github.com/apache/incubator-seatunnel/issues/1946](https://github.com/apache/incubator-seatunnel/issues/1946)\\n\\nYou can use the above-mentioned GitHub link to see our plans for connecting to the connector. You can make any additions at any time.\\n\\nFirst, find a connector that has not been claimed. To avoid conflicts, search the entire issue to see if anyone has submitted a PR.\\n\\nAfter claiming the connector, we suggest that you create an issue of the corresponding feature, synchronize the problems you encountered in the development, and discuss the design of your solution.\\n\\nIf you encounter any problems and need help, you can describe them in the issue, and the community can take it up together. Participate in the discussions to help solve the problem. This is also added to the record of the function implementation process, which makes it easy to refer to when maintaining and modifying in the future.\\n\\n### 03. Compile the project\\n\\nAfter claiming the connector, it\u2019s time to prepare the development environment.\\n\\nFirst, fork the SeaTunnel project to the local development environment and compile it.\\n\\nHere\u2019s the compilation reference documentation: [https://github.com/apache/incubator-seatunnel/blob/dev/docs/en/contribution/setup.md](https://github.com/apache/incubator-seatunnel/blob/dev/docs/en/contribution/setup.md)\\n\\nRun the testcase in the documentation after the compilation is successful. You might encounter some issues/problems during the first contact compilation process, such as the following compilation errors:\\n\\n![](https://miro.medium.com/max/1400/0*rGkqQzdfwd6Dp-mR)\\n![](https://miro.medium.com/max/1400/0*r2X63dr2YBTxZGen)\\n\\n**The solution to the above exceptions:**\\n\\n```\\nrm {your_maven_dir}/repository/org/apache/seatunnel\\n./mvnw clean\\nRecompile it\\n```\\n\\n### 04. Understand Connector related code structure\\nThe success of project compilation means that the development environment is ready. Next, let\u2019s take a look at the project code structure and API interface structure of the connector.\\n\\n#### Engineering Code structure\\n\\nAfter the project is compiled, there are three parts related to the connector. The first part is the code implementation and dependency management of the new connector module.\\n\\n* seatunnel-connectors-v2 stores the connector submodule\\n* seatunnel-connectors-v2-dist manages connectors-v2 maven dependencies\\n\\nThe second part is the example. When testing locally, you can build a corresponding case on the example to test the connector.\\n\\n* seatunnel-flink-connector-v2-example example running on Flink\\n* seatunnel-spark-connector-v2-example example running on Spark\\n\\nThe third part is the E2E-testcase: adding targeted test cases on the respective running engines of Spark or Flink, and verifying the functional logic of the connector through automated testing.\\n\\n* seatunnel-flink-connector-v2-e2e testcase running on Flink\\n* seatunnel-spark-connector-v2-e2e testcase running on Spark\\n\\n**Code structure (interfaces, base classes)**\\n\\nThe public interfaces and base classes used in the development are fully described in our readme. For example, API function usage scenarios.\\n\\nHere\u2019s the link: [https://github.com/apache/incubator-seatunnel/blob/dev/seatunnel-connectors-v2/README.en.md](https://github.com/apache/incubator-seatunnel/blob/dev/seatunnel-connectors-v2/README.en.md)\\n\\n### 05. See how other people develop connectors\\n\\nAfter going through the above steps, don\u2019t rush to start the work. Instead, first, check out how others do it.\\n\\nWe strongly recommend you check out the connector novice development tutorial shared on the community\'s official account:\\n\\n* [SeaTunnel Connector Minimalist Development Process]\\n* [New API Connector Development Analysis]\\n* [The way of decoupling Apache SeaTunnel (Incubating) and the computing engine \u2014 what we\u2019ve done to reconstruct the API]\\n\\nIn addition, you can refer to the merged Connector code to see the scope of changes, the public interfaces and dependencies used, and the test cases.\\n\\n## 3. Small Issues/Tasks During Development\\n\\nNext, you have to officially enter the connector development process. What problems may be encountered during the development process?\\n\\nThe connector is divided into the source and sink ends \u2014 you can choose either one or both.\\n\\n![](https://miro.medium.com/max/640/0*QxOnCYLu4AcvKw58)\\n\\n### 01. Source-related development\\n\\nThe first thing to pay attention to when developing a source is to determine the reading mode of the source: is it streaming or batch? Is support still required?\\n\\nUse the Source#getBoundedness interface to mark the modes supported by the source.\\n\\nFor example, Kafka naturally supports streaming reading, but it can also support batch mode reading by obtaining lastOffset in the source.\\n\\nAnother question to be aware of: does the source require concurrent reads? If it is single concurrency, after the source is started, a reader will be created to read the data from the data source.\\n\\nIf you want to achieve multi-concurrency, you need to implement an enumerator interface through which data blocks are allocated to readers, and the readers each read their allocated data blocks.\\n\\nFor example, the Kafka source uses partition sharding, and the jdbc source uses fields for range query sharding. It should be noted here that if it is a concurrent reading method, the stability of the data block distribution rules must be ensured.\\n\\nThis is because currently, the connector has a corresponding enumerator on each shard in actual operation, and it is necessary to ensure that the enumerator has data in each shard.\\n\\nThirdly, does the source need to support resumable transfer/state restoration?\\n\\nIf you want to support this, you need to implement:\\n\\n* **Source#restoreEnumerator**: restore state\\n* **Enumerator#snapshotState**: storage shard allocation\\n* **Reader#snapshotState**: stores the read position\\n\\n### 02. Sink-related development\\n\\nIf the sink is a common sink implementation, use Sink#createWriter to write our data according to the concurrency of the source.\\n\\nIf you need to support failure recovery, you need to implement:\\n\\n* **Sink#restoreWriter**: restore state\\n* **Writer#snapshotState**: snapshot state\\n\\nIf you want to support a two-phase commit, you need to implement the following interfaces:\\n\\n* Sink#createCommitter\\n* Writer#prepareCommit: pre-commit\\n* Committer#commit: abort Phase 2 commit\\n\\n![](https://miro.medium.com/max/640/0*GpYdUR2mTlur8jHQ)\\n\\n### 03. Connector related\\n\\nNext, let\u2019s take a look at some of the general problems, especially when the first contribution is made with different styles for each environment, there are often various problems. Therefore, it is recommended that you import tools/checkstyle/checkStyle.xml from the project during development, and use a unified coding format.\\n\\nWhether it is a source or a sink, it will involve defining the data format. The community is pushing for a unified data format definition.\\n\\nTo define Schema, please refer to PR: [https://github.com/apache/incubator-seatunnel/pull/2392](https://github.com/apache/incubator-seatunnel/pull/2392)\\nTo define the Format, please refer to PR: [https://github.com/apache/incubator-seatunnel/pull/2435](https://github.com/apache/incubator-seatunnel/pull/2435)\\n\\nIf you feel that the compilation speed is slow, you can temporarily annotate the old version of the connector-related module in order to speed up both development and debugging.\\n\\n### 04. How to seek help\\n\\nWhen you encounter problems during development and need help, you can:\\n\\n* Describe the problem in your Issue and call active contributors\\n* Discuss on mailing lists and Slack\\n* Communicate through the WeChat group (if you have not joined, please follow the SeaTunnel official account to join the group, and add a small assistant WeChat seatunnel1)\\n* There may be a community docking group for docking third-party components (allowing you to do more with less)\\n\\n## 4. Notes on Writing E2E Tests\\nE2E testing is very important. It is often called the gatekeeper of connector quality.\\n\\nThis is because, if the connector you wrote is not tested, it could be difficult for the community to judge whether there are problems with the implementation of the static code.\\n\\nTherefore, E2E testing is not only functional verification but also a process of checking data logic, which can reduce the pressure on the community to review code and ensure basic functional correctness.\\n\\nIn E2E testing, these are some of the problems that may be encountered:\\n\\n### 01. E2E Failed \u2014 Test Case Network Address Conflict\\n**Because the E2E network deployment structure has the following characteristics:**\\n\\n* External components that Spark, Flink, and e2e-test case depend on (for example, MySQL), use the container networkAliases(host) as the access address\\n* e2e-test case on both sides of Spark and Flink may run in parallel under the same host\\n* External components that e2e-test case depends on, need to map ports to hosts for e2e-test case to access\\n\\n**Therefore, E2E has to pay attention to:**\\n\\n* The external components e2e-test case depends on the ports mapped to the external networkAliases, and so cannot be the same in the test cases on both sides of Spark and Flink\\n* e2e-test case uses localhost, the above-mapped port, to access external components\\n* e2e\u2019s configuration file uses networkAliases(host), the external components that depend on port access in the container\\n\\nHere\u2019s the E2E Testcase reference PR: [https://github.com/apache/incubator-seatunnel/pull/2429](https://github.com/apache/incubator-seatunnel/pull/2429)\\n\\n### 02. E2E failure \u2014 Spark jar package conflict\\nSpark uses the parent first-class loader by default, which may conflict with the package referenced by the connector. For this, the userClassPathFirst classloader can be configured in the Connector environment.\\n\\nHowever, the current packaging structure of SeaTunnel will cause userClassPathFirst to not work properly, so we created an issue, [https://github.com/apache/incubator-seatunnel/pull/2474](https://github.com/apache/incubator-seatunnel/pull/2474), to track this issue. Everyone is welcome to contribute solutions.\\n\\nCurrently, this can only be resolved by replacing conflicting packages in the spark jars directory with the documentation.\\n\\n### 03. E2E failure \u2014 Connector jar package conflict\\n\\nBoth the old and new versions of Connector are dependent on the E2E project and cause conflicts.\\n\\nPR [https://github.com/apache/incubator-seatunnel/pull/2414](https://github.com/apache/incubator-seatunnel/pull/2414) has resolved this issue.\\n\\n\\n**Version conflict between Connector-v2:**\\n* Mainly occurs during E2E, because the E2E project depends on all Connectors\\n* We may plan to provide a separate test project for each Connector (or version) in the future\\n\\n### 04. Insufficient E2E \u2014 Sink Logic Verification\\n\\nThe FakeSource of the Connector-v2 version can only generate random data of a few fixed columns at present, and the community partners are optimizing it to make it better. [https://github.com/apache/incubator-seatunnel/pull/2406\\n](https://github.com/apache/incubator-seatunnel/pull/2406)\\nThat said, we can temporarily solve this problem by simulating the data of the specified content through Transform sql:\\n![](https://miro.medium.com/max/1400/0*_uvD-JWrVbABolAq)\\n\\n### 05. Insufficient E2E \u2014 Source validation data\\nThe Assert Sink can configure column rules, but cannot do row-level value checking. For this problem, you can temporarily use other connector sinks with external storage for query verification data.\\n\\n### 06. E2E stability improvement\\nIn many cases, when E2E starts, you might use Thread.sleep to wait for resource initialization. Here, sleep will cause fewer initialization failures but more time-wasting issues.\\n\\nIn addition, due to the instability of resources, network, and other issues, you might be able to run it now but not later.\\n![](https://miro.medium.com/max/1400/0*iBxwGDaHfXROqtEt)\\n![](https://miro.medium.com/max/1400/0*c2yFYbeVWPvHV7SY)\\nTo avoid this problem, Thread.sleep can be replaced with Awaitility.\\n\\n### 07. A method to speed up E2E\\nAt present, I see that most people run E2E tests separately for both source and sink. If you want to speed up the PR process, it is recommended that you combine both the sink and source into one E2E testcase for verification, and run the testcase only once.\\n\\n## 5. Checks Before Submitting a PR\\nAfter completing the previous steps, please make sure you do some checks before submitting PR \u2014 including the following aspects:\\n\\nComplete recompile project:\\n\\n* Codestyle validation, dependency validation\\n* The successful compilation before does not mean that it can be compiled successfully now\\n\\nRunning E2E locally succeeds:\\n* Both Flink and Spark are verified\\n\\nSupplement or change the document and review it again before submitting:\\n* Review for places not covered by tests\\n* Places that hav been reviewed before and needs to be checked again\\n* Review for including all files, not just code\\n\\nThe above operations and steps can greatly save CI resources, speed up PR Merged, and reduce the costs of community reviews."},{"id":"/2022/09/19/Code-Demo-for-SeaTunnel-Connector-Development-Process","metadata":{"permalink":"/blog/2022/09/19/Code-Demo-for-SeaTunnel-Connector-Development-Process","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2022-09-19-Code-Demo-for-SeaTunnel-Connector-Development-Process.md","source":"@site/blog/2022-09-19-Code-Demo-for-SeaTunnel-Connector-Development-Process.md","title":"Code Demo for SeaTunnel Connector Development Process","description":"At the Apache SeaTunnel&Apache Doris Joint Meetup held on July 24, Liu Li \u2014 senior engineer of WhaleOps and contributor to Apache SeaTunnel \u2014 mentioned an easy way to develop a connector in SeaTunnel quickly.","date":"2022-09-19T00:00:00.000Z","formattedDate":"September 19, 2022","tags":[],"readingTime":9.61,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"A tutorial to help you develop a SeaTunnel Connector hand-by-hand while avoiding pitfalls","permalink":"/blog/2022/09/20/A-tutorial-to-help-you develop-a-SeaTunnel-Connector-hand-by-hand-while-avoiding -pitfalls"},"nextItem":{"title":"Talk With Overseas contributors | Why do I contribute to SeaTunnel?","permalink":"/blog/2022/09/14/Talk-With-Overseas-contributors-Why-do-I-contribute-to-SeaTunnel"}},"content":"At the Apache SeaTunnel&Apache Doris Joint Meetup held on July 24, Liu Li \u2014 senior engineer of WhaleOps and contributor to Apache SeaTunnel \u2014 mentioned an easy way to develop a connector in SeaTunnel quickly.\\n\\n![](https://miro.medium.com/max/700/1*Rbd5BrSuGiZUQA53DXZrBw.png)\\nWe\u2019ll divide it into four key parts:\\n\\n\u25cf The definition of a Connector\\n\\n\u25cf How to access data sources and targets\\n\\n\u25cf Code to demonstrate how to implement a Connector\\n\\n\u25cf Sources and targets that are currently supported\\n\\n## Definition of a Connector\\nThe Connector consists of Source and Sink and is a concrete implementation of accessing data sources.\\n\\nSource: The Source is responsible for reading data from sources such as MySQLSource, DorisSource, HDFSSource, TXTSource, and more.\\n\\nSink: The Sink is responsible for writing read data to the target, including MySQLSink, ClickHouseSink, HudiSink, and more. Data transfer, and more specifically, data synchronization is completed through the cooperation between the Source and Sink.\\n\\n![](https://miro.medium.com/max/298/1*hsfa9Xtzt7o028XjCpqoOg.png)\\n\\nOf course, different sources and sinks can cooperate with each other.\\n\\nFor example, you can use MySQL Source, and Doris Sink to synchronize data from MySQL to Doris, or even read data from MySQL Source and write to HDFS Sink.\\n\\n## How to access data sources and targets\\n\\n### How to access Source\\nFirstly, let\u2019s take a look at how we can access the Source. To elaborate, let\u2019s dive in and check out how we can implement a source and the core interfaces that need to be implemented to access the Source.\\n\\nThe simplest Source is a single concurrent Source. However, if a source does not support state storage and other advanced functions, what interfaces should we implement in these simple single concurrent sources?\\n\\nFirstly, we need to use getBoundedness in the Source to identify whether the Source supports real-time or offline, or both.\\n\\ncreateReader creates a Reader whose main function is to read the specific implementation of data. A single concurrent source is really simple as we only need to implement one method, pollNext, through which the read data is sent.\\n\\nIf concurrent reading is required, what additional interfaces should we implement?\\n![](https://miro.medium.com/max/393/1*bRxRjyMOGkVqseQkg0ONWg.png)\\n\\nFor concurrent reading, we\u2019ll introduce a new member, called the Enumerator.\\n\\nWe implement createEnumerator in Source, and the main function of this member is to create an Enumerator to split the task into segments and then send it to the Reader.\\n\\nFor example, a task can be divided into 4 splits.\\n\\nIf it is concurrent twice, it\u2019ll correspond to two Readers. Two of the four splits will be sent to Reader1, and the other two will be sent to Reader2.\\n\\nIf the number of concurrencies is more \u2014 for example, let\u2019s say there are four concurrences, then you have to create four Readers. You have to use the corresponding four splits for concurrent reading for improved efficiency.\\n\\nA corresponding interface in the Enumerator called the addSplitsBack sends the splits to the corresponding Reader. Through this method, the ID of the Reader can be specified.\\n\\nSimilarly, there is an interface called the addSplits in the Reader to receive the splits sent by the Enumerator for data reading.\\n\\nIn a nutshell, for concurrent reading, we need an Enumerator to implement task splitting and send the splits to the reader. Also, the reader receives the splits and uses them for reading.\\n\\nIn addition, if we need to support resuming and exactly-once semantics, what additional interfaces should we implement?\\n\\nIf the goal is to resume the transfer from a breakpoint, we must save the state and restore it. For this, we need to implement a restoreEnumerator in Source.\\n\\nThe restoreEnumerator method is used to restore an Enumerator through the state and restore the split.\\n\\nCorrespondingly, we need to implement a snapshotState in this enumerator, which is used to save the state of the current Enumerator and perform failure recovery during checkpoints.\\n\\nAt the same time, the Reader will also have a snapshotState method to save the split state of the Reader.\\n\\nIn the event of a failed restart, the Enumerator can be restored through the saved state. After the split is restored, reading can be continued from the place of failure, including fetching and incoming data.\\n\\nThe exact one-time semantics actually requires the source to support data replays, such as Kafka, Pulsar, and others. In addition, the sink must be submitted in two phases, i.e., the precise one-time semantics can be achieved with the cooperation of these two sources and sinks.\\n\\n### How to access Sink\\n\\nNow, let\u2019s take a look at how to connect to the Sink. What interfaces does the Sink need to implement?\\n\\nTruth be told, Sink is relatively simple. For concurrent sinks, when state storage and two-phase commit are not supported, the Sink is simple.\\n\\nTo elaborate, the Sink does not distinguish between stream synchronization and batch synchronization as the Sink \u2014 and the entire SeaTunnel API system \u2014 supports **Unified Stream and Batch Processing.**\\n\\nFirstly, we need to implement createWriter. A Writer is used for data writing.\\n\\nYou need to implement a writer method in Writer through which data is written to the target library.\\n\\n![](https://miro.medium.com/max/414/1*xQ7DRHdBGv-ofjSYdSHAoA.png)\\n\\nAs shown in the figure above, if two concurrencies are set, the engine will call the createWriter method twice in order to generate two Writers. The engine will feed data to these two writers, which will write the data to the target through the write method.\\n\\nFor a more advanced setup, for example, we need to support **two-phase commit and state storage**.\\n\\nHere, what additional interfaces should we implement?\\n\\nFirst, let\u2019s introduce a new member, the Committer, whose main role is for the second-stage commit.\\n\\n![](https://miro.medium.com/max/414/1*cvj1i2A-E-1c_bCZneshtg.png)\\n\\nSince Sink is stored in state, it is necessary to restore Writer through the state. Hence, restoreWriter should be implemented.\\n\\nAlso, since we have introduced a new member, the Committer, we should also implement a createCommitter in the sink. We can then use this method to create a Committer for the second-stage commit or rollback.\\n\\nIn this case, what additional interfaces does Writer need to implement?\\n\\nSince it is a two-phase commit, the first-phase commit is done in the Writer through the implementation of the prepareCommit method \u2014 which is mainly used for the first-phase commit.\\n\\nIn addition, state storage and failure recovery is also supported, meaning we need snapshotState to take snapshots at checkpoints. This saves the state for failure recovery scenarios.\\n\\nThe Committer is the core here. It is mainly used for rollback and commit operations in the second phase.\\n\\nFor the corresponding process, we need to write data to the database. Here, the engine will trigger the first stage commit during the checkpoint, and then the Writer needs to prepare a commit.\\n\\nAt the same time, it will return commitInfo to the engine, and the engine will judge whether the first stage commits of all writers are successful.\\n\\nIf they are indeed successful, the engine will use the commit method to actually commit.\\n\\nFor MySQL, the first-stage commit just saves a transaction ID and sends it to the commit. The engine determines whether the transaction ID is committed or rolled back.\\n\\n## How to implement the Connector\\nWe\u2019ve taken a look at Source and Sink; let\u2019s now look at how to access the data source and implement your own Connector.\\n\\nFirstly, we need to build a development environment for the Connector.\\n\\n### The necessary environment\\n1. Java 1.8\\\\11, Maven, IntelliJ IDEA\\n\\n2. Windows users need to additionally download gitbash (https://gitforwindows.org/)\\n\\n3. Once you have these, you can download the SeaTunnel source code by cloning the git.\\n\\n4. Download SeaTunnel source code 1, git clone https://github.com/apache/incubator-seatunnel.git2, cd incubator-seatunnel\\n\\n### SeaTunnel Engineering Structure\\nWe then open it again through the IDE, and see the directory structure as shown in the figure:\\n\\n![](https://miro.medium.com/max/700/1*utRhNAsYiqQqBFa4Tjewgw.png)\\n\\nThe directory is divided into several parts:\\n\\n1. Connector \u2014 v2\\n\\nSpecific implementation of the new Connector(Connector \u2014 v2) will be placed in this module.\\n\\n2. connector-v2-dist\\n\\nThe translation layer of the new connector translates into specific engine implementation \u2014 instead of implementing under corresponding engines such as Spark, Flink, and ST-Engine. ST-Engine is the \u201cimportant, big project\u201d the community is striving to implement. This project is worth the wait.\\n\\n3. examples\\n\\nThis package provides a single-machine local operation method, which is convenient for debugging while implementing the Connector.\\n\\n4. e2e\\n\\nThe e2e package is for e2e testing of the Connector.\\n\\nNext, let\u2019s check out how a Connector can be created (based on the new Connector). Here is the step-by-step process:\\n\\n1. Create a new module in the seatunnel-connectors-v2 directory and name it this way: connector-{connector name}.\\n\\n2. The pom file can refer to the pom file of the existing connector and add the current child model to the parent model\u2019s pom file.\\n\\n3. Create two new packages corresponding to the packages of Source and Sink, respectively:\\n\\na. org.apache.seatunnel.connectors.seatunnel.{connector name}.source\\n\\nb. org.apache.seatunnel.connectors.seatunnel.{connector name}.sink\\n\\nTake this mysocket example shown in the figure:\\n\\n![](https://miro.medium.com/max/700/1*K1btD2gNwYxj96OJnPfW2Q.png)\\n\\nTo do some implementation, develop the connector. During implementation, you can use the example module for local debugging if you need to debug. That said, this module mainly provides the local running environment of Flink and Spark.\\n\\n![](https://miro.medium.com/max/700/1*qOc3q7okzo7jObHxloc7WQ.png)\\n\\nAs you can see in the image, there are numerous examples under the \u201cExample\u201d module \u2014 including seatunnel-flink-connector-v2-example.\\n\\nSo how do you use them?\\n\\nLet\u2019s take an example. The debugging steps on Flink are as follows (these actions are under the seatunnel-flink-connector-v2-example module:\\n\\n1. Add connector dependencies in pom.xml\\n\\n2. Add the task configuration file under resources/examples\\n\\n3. Configure the file in the SeaTunnelApiExample main method\\n\\n4. Run the main method\\n\\n### Code Demo\\n\\nThis code demonstration is based on DingTalk.\\n\\nHere\u2019s a reference\uff08 19:35s\u201337:10s\uff09:\\n\\nhttps://weixin.qq.com/sph/A1ri7B\\n\\n![](https://miro.medium.com/max/700/1*ej9ronizPtC09ILWJDlbUg.png)\\n\\n### New Connectors supported at this stage\\n\\nAs of July 14, contributions and statistics for the completed connectors are welcome. You are more than welcome to try them out, and raise issues in our community if you find bugs.\\n\\n![](https://miro.medium.com/max/700/1*RHNJDcbvKmSt2UGGSz3Icg.png)\\n\\nThe Connector shared below have already been claimed and developed:\\n\\n![](https://miro.medium.com/max/700/1*RHNJDcbvKmSt2UGGSz3Icg.png)\\n\\nAlso, we have Connectors in the roadmap \u2014 the connectors we want to support in the near future. To foster the process, the SeaTunnel Community initiated SeaTunnel Connector Access Incentive Plan, you are more than welcome to contribute to the project.\\n\\nSeaTunnel Connector Access Incentive Plan: https://github.com/apache/incubator-seatunnel/issues/1946\\n\\nYou can claim tasks that haven\u2019t been marked in the comment area, and take a spree home! Here is part of the connectors that need to be accessed as soon as possible:\\n![](https://miro.medium.com/max/414/1*n-ixPtq066Acx4Ja5qNQqw.png)\\nIn fact, the implementations of Connectors like Feishu, DingTalk, and Facebook messenger are quite simple as the connectors do not need to carry a large amount of data (just a simple Source and Sink). This is in sharp contrast to Hive and other databases that need to consider transaction consistency or concurrency issues.\\n\\nWe welcome everyone to make contributions and join our Apache SeaTunnel family!\\n\\n## About SeaTunnel\\nSeaTunnel (formerly Waterdrop) is an easy-to-use, ultra-high-performance distributed data integration platform that supports the real-time synchronization of massive amounts of data and can synchronize hundreds of billions of data per day stably and efficiently.\\n\\n### Why do we need SeaTunnel?\\n\\nSeaTunnel does everything it can to solve the problems you may encounter in synchronizing massive amounts of data.\\n\\n* Data loss and duplication\\n* Task buildup and latency\\n* Low throughput\\n* Long application-to-production cycle time\\n* Lack of application status monitoring\\n\\n### SeaTunnel Usage Scenarios\\n* Massive data synchronization\\n* Massive data integration\\n* ETL of large volumes of data\\n* Massive data aggregation\\n* Multi-source data processing\\n\\n### Features of SeaTunnel\\n\\n* Rich components\\n* High scalability\\n* Easy to use\\n* Mature and stable"},{"id":"/2022/09/14/Talk-With-Overseas-contributors-Why-do-I-contribute-to-SeaTunnel","metadata":{"permalink":"/blog/2022/09/14/Talk-With-Overseas-contributors-Why-do-I-contribute-to-SeaTunnel","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2022-09-14-Talk-With-Overseas-contributors-Why-do-I-contribute-to-SeaTunnel.md","source":"@site/blog/2022-09-14-Talk-With-Overseas-contributors-Why-do-I-contribute-to-SeaTunnel.md","title":"Talk With Overseas contributors | Why do I contribute to SeaTunnel?","description":"As SeaTunnel gets popular around the world, it is attracting more and more contributors from overseas to join the open-source career. Among them, a big data platform engineer at Kakao enterprise corp., Namgung Chan has recently contributed the Neo4j Sink Connector for the SeaTunnel. We have a talk with him to know why SeaTunnel is attractive to him, and how he thinks SeaTunnel should gain popularity in the South Korean market.","date":"2022-09-14T00:00:00.000Z","formattedDate":"September 14, 2022","tags":[],"readingTime":1.98,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Code Demo for SeaTunnel Connector Development Process","permalink":"/blog/2022/09/19/Code-Demo-for-SeaTunnel-Connector-Development-Process"},"nextItem":{"title":"SeaTunnel 2.1.3 released! Introducing in Assert Sink connector and NullRate, Nulltf Transform","permalink":"/blog/2022/09/12/SeaTunnel-2.1.3-released"}},"content":"As SeaTunnel gets popular around the world, it is attracting more and more contributors from overseas to join the open-source career. Among them, a big data platform engineer at Kakao enterprise corp., Namgung Chan has recently contributed the Neo4j Sink Connector for the SeaTunnel. We have a talk with him to know why SeaTunnel is attractive to him, and how he thinks SeaTunnel should gain popularity in the South Korean market.\\n\\n## Personal Profile\\n![](https://miro.medium.com/max/1400/1*sKzXjqu6M_VmoperNBYUGQ.jpeg)\\n\\nNamgung Chan, South Korea, Big Data Platform Engineer at Kakao enterprise corp.\\n\\nBlog (written in Korean): https://getchan.github.io/\\nGitHub ID: https://github.com/getChan\\nLinkedIn : https://www.linkedin.com/in/namgung-chan-6a06441b6/\\n\\n### Contributions to the community\\nHe writes the Neo4j Sink Connector code for the new SeaTunnel Connector API.\\n\\n### How to know SeaTunnel for the first time?\\nIt\u2019s the first time Namgung Chan to engage in open source. He wants to learn technical skills by contributing, at the same time experience the open-source culture.\\n\\nFor him, an open source project which is written by java lang, and made for data engineering, has many issues of \u2018help wanted\u2019 or \u2018good first issue\u2019 is quite suitable. Then he found SeaTunnel on the Apache Software Foundation project webpage.\\n\\n### The first impression of SeaTunnel Community\\nThough it was his first open source experience, he felt it was comfortable and interesting to go to the community. He also felt very welcome, because there are many \u2018good first issue, and \u2018volunteer wanted\u2019 tagged issues and will get a quick response of code review.\\n\\nWith gaining knowledge of Neo4j, he grows much more confident in open source contribution.\\n\\n### Research and comparison\\nBefore knowing about SeaTunnel, Namgung Chan used Spring Cloud Data Flow for data integration. While after experiencing SeaTunnel, he thinks the latter is more lightweight than SCDF, because in SCDF, every source, processor, and sink component are individual applications, but SeaTunnel is not.\\n\\nThough hasn\u2019t used SeaTunnel in his working environment yet, Namgung Chan said he would like to use it positively when he is in need, especially for data integration for various data storage.\\n\\n\\n### Expectations for SeaTunnel\\nThe most exciting new features or optimizations for Namgung Chan are:\\n\\nData Integration for various data storage.\\nStrict data validation. monitoring extension\\nLow computing resource\\nexactly-once data processing\\nIn the future, Namgung Chan plans to keep contributing from light issues to heavy ones, and we hope he will have a good time here!"},{"id":"/2022/09/12/SeaTunnel-2.1.3-released","metadata":{"permalink":"/blog/2022/09/12/SeaTunnel-2.1.3-released","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2022-09-12-SeaTunnel-2.1.3-released.md","source":"@site/blog/2022-09-12-SeaTunnel-2.1.3-released.md","title":"SeaTunnel 2.1.3 released! Introducing in Assert Sink connector and NullRate, Nulltf Transform","description":"More than a month after the release of Apache SeaTunnel(Incubating) 2.1.2, we have been collecting user and developer feedback to bring you version 2.1.3. The new version introduces the Assert Sink connector, which is an inurgent need in the community, and two Transforms, NullRate and Nulltf. Some usability problems in the previous version have also been fixed, improving stability and efficiency.","date":"2022-09-12T00:00:00.000Z","formattedDate":"September 12, 2022","tags":[],"readingTime":2.885,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"prevItem":{"title":"Talk With Overseas contributors | Why do I contribute to SeaTunnel?","permalink":"/blog/2022/09/14/Talk-With-Overseas-contributors-Why-do-I-contribute-to-SeaTunnel"},"nextItem":{"title":"Upcoming API Connector Development Analysis","permalink":"/blog/Upcoming API Connector Development Analysis"}},"content":"![](https://miro.medium.com/max/1400/1*7jtTFNpvwC6nquA-BLfqGg.png)\\n\\nMore than a month after the release of Apache SeaTunnel(Incubating) 2.1.2, we have been collecting user and developer feedback to bring you version 2.1.3. The new version introduces the Assert Sink connector, which is an inurgent need in the community, and two Transforms, NullRate and Nulltf. Some usability problems in the previous version have also been fixed, improving stability and efficiency.\\n\\nThis article will introduce the details of the update of Apache SeaTunnel(Incubating) **version 2.1.3**.\\n\\n* Release Note: [https://github.com/apache/incubator-seatunnel/blob/2.1.3/release-note.md](https://github.com/apache/incubator-seatunnel/blob/2.1.3/release-note.md)\\n* Download address: [https://seatunnel.apache.org/download](https://seatunnel.apache.org/download)\\n\\n## Major feature updates\\n### Introduces Assert Sink connector\\nAssert Sink connector is introduced in SeaTunnel version 2.1.3to verify data correctness. Special thanks to Lhyundeadsoul for his contribution.\\n\\n### Add two Transforms\\nIn addition, the 2.1.3 version also adds two Transforms, NullRate and Nulltf, which are used to detect data quality and convert null values \u200b\u200bin the data to generate default values. These two Transforms can effectively improve the availability of data and reduce the frequency of abnormal situations. Special thanks to wsyhj and Interest1-wyt for their contributions.\\n\\nAt present, SeaTunnel has supported 9 types of Transforms including Common Options, Json, NullRate, Nulltf, Replace, Split, SQL, UDF, and UUID, and the community is welcome to contribute more Transform types.\\n\\nFor details of Transform, please refer to the official documentation: [https://seatunnel.apache.org/docs/2.1.3/category/transform](https://seatunnel.apache.org/docs/2.1.3/category/transform)\\n\\n### ClickhouseFile connector supports Rsync data transfer method now\\nAt the same time, SeaTunnel 2.1.3 version brings Rsync data transfer mode support to ClickhouseFile connector, users can now choose SCP and Rsync data transfer modes. Thanks to Emor-nj for contributing to this feature.\\n\\n### Specific feature updates:\\n\\n* Flink Fake data supports BigInteger type https://github.com/apache/incubator-seatunnel/pull/2118\\n* Add Flink Assert Sink connector https://github.com/apache/incubator-seatunnel/pull/2022\\n* Spark ClickhouseFile connector supports Rsync data file transfer method https://github.com/apache/incubator-seatunnel/pull/2074\\n* Add Flink Assert Sink e2e module https://github.com/apache/incubator-seatunnel/pull/2036\\n* Add NullRate Transform for detecting data quality https://github.com/apache/incubator-seatunnel/pull/1978\\n* Add Nulltf Transform for setting defaults https://github.com/apache/incubator-seatunnel/pull/1958\\n### Optimization\\n* Refactored Spark TiDB-related parameter information\\n* Refactor the code to remove redundant code warning information\\n* Optimize connector jar package loading logic\\n* Add Plugin Discovery module\\n* Add documentation for some modules\\n* Upgrade common-collection from version 4 to 4.4\\n* Upgrade common-codec version to 1.13\\n### Bug Fix\\nIn addition, in response to the feedback from users of version 2.1.2, we also fixed some usability issues, such as the inability to use the same components of Source and Sink, and further improved the stability.\\n\\n* Fixed the problem of Hudi Source loading twice\\n* Fix the problem that the field TwoPhaseCommit is not recognized after Doris 0.15\\n* Fixed abnormal data output when accessing Hive using Spark JDBC\\n* Fix JDBC data loss when partition_column (partition mode) is set\\n* Fix KafkaTableStream schema JSON parsing error\\n* Fix Shell script getting APP_DIR path error\\n* Updated Flink RunMode enumeration to get correct help messages for run modes\\n* Fix the same source and sink registered connector cache error\\n* Fix command line parameter -t( \u2014 check) conflict with Flink deployment target parameter\\n* Fix Jackson type conversion error problem\\n* Fix the problem of failure to run scripts in paths other than SeaTunnel_Home\\n### Acknowledgment\\nThanks to all the contributors (GitHub ID, in no particular order,), it is your efforts that fuel the launch of this version, and we look forward to more contributions to the Apache SeaTunnel(Incubating) community!\\n\\n`leo65535, CalvinKirs, mans2singh, ashulin, wanghuan2054, lhyundeadsoul, tobezhou33, Hisoka-X, ic4y, wsyhj, Emor-nj, gleiyu, smallhibiscus, Bingz2, kezhenxu94, youyangkou, immustard, Interest1-wyt, superzhang0929, gaaraG, runwenjun`"},{"id":"Upcoming API Connector Development Analysis","metadata":{"permalink":"/blog/Upcoming API Connector Development Analysis","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2022-06-23-New_Connector.md","source":"@site/blog/2022-06-23-New_Connector.md","title":"Upcoming API Connector Development Analysis","description":"After days of community development, the preliminary development of the new Connector API of SeaTunnel is completed. The next step is to adapt this new connector. In order to aid the developers to use this connector, this article provides guide to develop a new API.","date":"2022-06-23T00:00:00.000Z","formattedDate":"June 23, 2022","tags":[{"label":"Meetup","permalink":"/blog/tags/meetup"}],"readingTime":3.28,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"Upcoming API Connector Development Analysis","title":"Upcoming API Connector Development Analysis","tags":["Meetup"]},"prevItem":{"title":"SeaTunnel 2.1.3 released! Introducing in Assert Sink connector and NullRate, Nulltf Transform","permalink":"/blog/2022/09/12/SeaTunnel-2.1.3-released"},"nextItem":{"title":"How dose Apache SeaTunnel refactor the API to decouple with the computing engine","permalink":"/blog/How dose Apache SeaTunnel refactor the API to decouple with the computing engine"}},"content":"After days of community development, the preliminary development of the new Connector API of SeaTunnel is completed. The next step is to adapt this new connector. In order to aid the developers to use this connector, this article provides guide to develop a new API.\\n\\n## Priliminary Setup\\n- Environment configuration: JDK8 and Scala2.11 are recommended.\\n- As before, we need to download the latest code locally through git and import it into the IDE, project address: https://github.com/apache/incubator-seatunnel . At the same time, switch the branch to api-draft, and currently use this branch to develop the new version of the API and the corresponding Connector. The project structure is as follows:\\n\\n  ![Project Structure](/image/20220623/en/0.png)\\n\\n## Prerequisites\\n- At present, in order to distinguish different Connectors, we put the connectors that support\\n    - Flink/Spark under the ``seatunnel-connectors/seatunnel-connectors-flink(spark)`` module.\\n    - New version of the Connector is placed under the ``seatunnel-connectors/seatunnel-connectors-seatunnel`` module.\\n\\n  As we can see from the above figure, we have implemented Fake, Console, Kafka Connector, and Clickhouse Connector is also being implemented.\\n- At present, the data type we support is SeaTunnelRow, so no matter the type of data generated by the Source or the type of data consumed by the Sink, it should be SeaTunnelRow.\\n\\n# Development of Connector\\nTaking Fake Connector as an example, let\'s introduce how to implement a new Connector:\\n\\n- Create a corresponding module with a path under ``seatunnel-connectors-seatunnel``, which is at the same level as other new connectors.\\n- Modify the ``seatunnel-connectors-seatunnel/pom.xml`` file, add a new module to modules, modify ``seatunnel-connectors-seatunnel/seatunnel-connector-seatunnel-fake/pom.xml``, add seatunnel-api dependencies, and correct parent Quote. The resulting style is as follows:\\n\\n  ![Style](/image/20220623/en/1.png)\\n\\n- The next step is to create the corresponding package and related classes, create FakeSource, and need to inherit SeaTunnel Source.\\n\\n    - Note : The Source of SeaTunnel adopts the design of stream and batch integration. The Source of SeaTunnel determines whether current Source is a stream or batch through attribute getBoundedness.\\n\\n  So you can specify a Source as a stream or batch by dynamic configuration (refer to the default method). The configuration defined by the user in the configuration file can be obtained through the prepare method to realize the customized configuration.\\n\\n  Then create FakeSourceReader, FakeSource SplitEnumerator, and FakeSourceSplit to inherit the corresponding abstract classes (which can be found in the corresponding classes). As long as we implement the corresponding methods of these classes, then our SeaTunnel Source Connector is basically completed.\\n- Next, just follow the existing example to write the corresponding code. The most important one is the FakeSource Reader, which defines how we obtain data from the outside, which is the most critical part of the Source Connector. Every time a piece of data is generated, we need to place it in the collector as shown:\\n\\n  ![Source](/image/20220623/en/2.png)\\n- After the code development is complete, we need to configure the configuration file ``plugin-mapping.properties`` located under ``seatunnel-connectors/modules``. Adding a seatunnel\\n  ``.source.FakeSource = seatunnel-connector-fake``\\n  means that SeaTunnel can find the jar package corresponding to the project by looking for a Source named FakeSource. This allows the Connector to be used in the normal configuration file.\\n- For a detailed description of writing Source and Sink and SeaTunnel API, please refer to the introduction at ``seatunnel-connectors/seatunnel-connectors-seatunnel/ README.zh.md``.\\n\\n## Connector Testing\\n- For testing, we can find the ``seatunnel-flink(spark)-new-connector-example`` module in seatunnel-examples, and test it against different engines to ensure that the performance of the Connector is as consistent as possible. If you find any discrepancies, you can mark them in the document, modify the configuration file under resource, add our Connector to the configuration, and introduce ``seatunnel-flink(spark)-new-connector-example/pom.xml`` dependency, you can execute ``SeaTunnelApiExample`` to test.\\n- The default is stream processing mode, and the execution mode is switched to batch mode by modifying ``job.mode=BATCH`` in the environment of the configuration file.\\n\\n## Submit PR\\nWhen our Connector is ready, we can submit PR to github. After reviewing by other partners, our contributed Connector will become part of SeaTunnel!"},{"id":"How dose Apache SeaTunnel refactor the API to decouple with the computing engine","metadata":{"permalink":"/blog/How dose Apache SeaTunnel refactor the API to decouple with the computing engine","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2022-05-31-engine.md","source":"@site/blog/2022-05-31-engine.md","title":"How dose Apache SeaTunnel refactor the API to decouple with the computing engine","description":"Translator | Critina","date":"2022-05-31T00:00:00.000Z","formattedDate":"May 31, 2022","tags":[{"label":"Meetup","permalink":"/blog/tags/meetup"}],"readingTime":11.1,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"How dose Apache SeaTunnel refactor the API to decouple with the computing engine","title":"How dose Apache SeaTunnel refactor the API to decouple with the computing engine","tags":["Meetup"]},"prevItem":{"title":"Upcoming API Connector Development Analysis","permalink":"/blog/Upcoming API Connector Development Analysis"},"nextItem":{"title":"How to synchronize tens of billions of data based on SeaTunnel\'s ClickHouse","permalink":"/blog/How to synchronize tens of billions of data based on SeaTunnel\'s ClickHouse"}},"content":"![](/image/20220531/en/0.jpg)\\n\\nTranslator | Critina\\n\\nIn the May joint Meetup between Apache SeaTunnel and Apache Inlong, Li Zongwen, a senior engineer at WhaleOps, shared his experiences about finding and refactoring of the the four major problems with Apache SeaTunnel (Incubating).i.e. the connectors of SeaTunnel have to be implemented many times,the inconsistent parameters, SeaTunnel is not supportive of multiple versions of the engine, and it\u2019s difficult to upgrade the engine. In order to solve these problems, Li Zongwen aimed to decouple Apache SeaTunnel (Incubating) from thw computing engines, and re-factor the Source and Sink apis to improve the development experience.\\n\\nThis speech mainly consists of five parts.The first part is about Apache SeaTunnel (Incubator) refactoring background and motivation. The second part introduces Apache SeaTunnel (Incubating) Target for refactoring.The third part discusses Apache SeaTunnel (Incubating) overall design for refactoring. The last two parts is about Apache SeaTunnel (Incubating) Source API design and Apache SeaTunnel (Incubating) Sink API design.\\n\\n## 01 Background and motivation for refactoring\\n\\nThose of you who have used Apache SeaTunnel (Incubator) or developers should know that Apache SeaTunnel (Incubator) is now fully coupled with the engine, which is entirely based on Spark or Flink, and so are the configuration file parameters. From the perspective of contributors and users, we can find they face some problems.\\n\\nIn the view of the contributors, repeated implementing connector is meaningless and it is unable for potential contributors to contribute to the community due to inconsistent engine versions.\\n\\nAt present, many companies use Lambda architecture, Spark is used for offline operations and Flink is used for real-time operations. In the view of the users, it can be found that Spark may have the Connector of SeaTunnel, but Flink does not, and the parameters of the two engines for the Connector of the same storage engine are not unified, thus resulting a high cost of and deviating from its original intention of being easy to use. And some users question that Flink version 1.14 is not supported nowadays. While with the current SeaTunnel architecture, we must discard the previous version in order to support Flink version 1.14, which will bring great trouble for early version users.\\n\\nAs a result, it was difficult for us to either upgrade engine or support more versions.\\n\\nIn addition, Spark and Flink both adopt the Checkpoint fault-tolerant mechanism implemented by Chandy-Lamport algorithm and internally unify DataSet and DataStream. On this premise, we believe decoupling is feasible.\\n\\n## 02 Apache SeaTunnel (Incubating) decouples with computing engine\\n\\n\\nTherefore, in order to solve the problems raised above, we set the following goals.\\n\\n1. Connector is only implemented once. To solve the problems that parameters are not unified and Connector is implemented for too many times, we hope to achieve a unified Source and Sink API;\\n\\n2. Multiple versions of Spark and Flink engines are supported. A translation layer above the Source and Sink API is added to support multiple versions of Spark and Flink engines.\\n\\n3. The logic for parallel shard of Source and the Sink submission should be clarified. We must provide a good API to support Connector development.\\n\\n4. The full database synchronization in real-time scenarios should be supported. This is a derivative requirement that many users have mentioned for CDC support. I once participated the Flink CDC community before and many users pointed out that in the CDC scenario, if you wanted to use the Flink CDC directly, each table would have a link and there would be thousands of links for thousands of tables when you need to synchronize the whole library, which was unacceptable for both the database and the DBA. To solve this problem, the simplest way was to introduce Canal\u3001Debezium or other components, which were used to pull incremental data to Kafka or other MQ for intermediate storage, and then we could use Flink SQL for synchronization. This actually contradicted the original idea of the Flink CDC to reduce links. However, the Flink CDC aimed only a Connector and was unable to deal with the whole link, so the proposal was not seen in the SeaTunnel community. By the chance of the reconstruction, we submitted the proposal to the SeaTunnel community.\\n\\n5. Automatic discovery and storage of meta information are realized. The users should have awful experience due to the storage engines such as Kafka lacking of record of the data structure, when we need to read structured data, the user must define the topic of structured data types before read one topic at a time . We hope once the configuration is completed, there is no need to do any redundant work again.\\n\\nSome people may wonder why we don\u2019t use Apache Beam directly. That is because Beam sources are divided into BOUNDED and UNBOUNDED sources, which means it needs to be implemented twice. Moreover, some features of Source and Sink are not supported, which will be mentioned later.\\n\\n## 03 Apache SeaTunnel(Incubating) overall design for refactoring\\n\\n![](/image/20220531/en/1.jpg)\\n\\nThe Apache SeaTunnel(Incubating) API architecture is described in the picture above.\\n\\nThe Source & Sink API is one of the core APIS of data integration, which defines the logic for parallel shard of Source and the commitment of Sink to realize the Connector.\\n\\nThe Engine API includes the translation and the execution layers. The translation is used to translate Souce and Sink API of SeaTunnel into connectors that can be run inside the engine.\\n\\nThe execution defines the execution logic of Source, Transform, Sink and other operations in the engine.\\n\\nThe Table SPI is mainly used to expose the interface of Source and Sink in SPI mode, and to specify mandatory and optional parameters of Connector etc.\\n\\nThe DataType includes SeaTunnel data structure used to isolate engines and declare Table schema.\\n\\nThe Catalog is Used to obtain Table schemes and Options, etc. The Catalog Storage is used to store Table Schemes defined by unstructured engines such as Kafka.\\n\\n![](/image/20220531/en/2.jpg)\\n\\n\\nThe execution flow we assumed nowadays can be see in the above picture.\\n\\n1. Obtain task parameters from configuration files or UI.\\n\\n2. Obtain the Table Schema, Option and other information by analyzing the parameters from Catalog.\\n\\n3. Pull up the Connector of SeaTunnel in SPI mode and inject Table information.\\n\\n4. Translate the Connector from SeaTunnel into the Connector within the engine.\\n\\n5. Execute the operation logic of the engine. The multi-table distribution in the picture only exists in the synchronization of the whole database of CDC, while other connectors are single tables and do not need the distribution logic.\\n\\nIt can be seen that the hardest part of the plan is to translate Source and Sink into an internal Source and Sink in the engine.\\n\\nMany users today use Apache SeaTunnel (Incubating) not only as a data integration tool but also as a data storage tool, and use a lot of Spark and Flink SQLs. We want to preserve that SQL capability for users to upgrade seamlessly.\\n\\n\\n![](/image/20220531/en/3.jpg)\\n\\n\\nAccording to our research, the feature above shows the ideal execution logic of Source and Sink. Since SeaTunnel is incubated as WaterDrop, the terms in the figure are tended towards Spark.\\n\\nIdeally, the Source and Sink coordinators can be run on the Driver, and the Source Reader and Sink Writer will run on the Worker. In terms of the Source Coordinator, we expect it to support several features.\\n\\nThe first capability is that the slicing logic of data can be dynamically added to the Reader.\\n\\nThe second is that the coordination of Reader can be supported. Source Reader is used to read data, and then send the data to the engine, and finally to the Source Writer for data writing. Meanwhile, Writer can support the two-phase transaction submission, and the coordinator of Sink supports the aggregation submission requirements of Connector such as Iceberg.\\n\\n## 04 Source API\\n\\n\\nAfter research, we found the following features that are required by Source.\\n\\n1. Unified offline and real-time API , which supports that source is implemented only once and supports both offline and real-time API;\\n\\n2. Supportive of parallel reading. For example that Kafka generates a reader for each partition and execute in parallel.\\n\\n3. Supporting dynamic slice-adding. For example, Kafka defines a regular topic, when a new topic needs to be added due to the volume of business, the Source API allows to dynamically add the slice to the job.\\n\\n4. Supporting the work of coordinating reader, which is currently only needed in the CDC Connector. CDC is currently supported by NetFilx\u2019s DBlog parallel algorithms, which requires reader coordination between full synchronization and incremental synchronization.\\n\\n5. Supporting a single reader to process multiple tables, i.e. to allows the whole database synchronization in the real-time scenario as mentioned above.\\n\\n![](/image/20220531/en/4.jpg)\\n\\n\\nBased on the above requirements, we have created the basic API as shown in the figure above. And the code has been submitted to the API-Draft branch in the Apache SeaTunnel(Incubator) community. If you\u2019re interested, you can view the code in detail.\\n\\n### How to adapt to Spark and Flink engines\\n\\n\\nFlink and Spark unify the API of DataSet and DataStream, and they can support the first two features. Then, for the remaining three features, how do we\\n\\n- Support dynamic slice-adding\uff1f\\n- Support the work of coordinating reader\uff1f\\n- Support a single reader to process multiple tables\uff1f\\n\\nLet\'s review the design with questions.\\n\\n![](/image/20220531/en/5.jpg)\\n\\n\\nWe found that other connectors do not need coordinators, except for CDC. For those connectors that do not need coordinators, we have a Source that supports parallel execution and engine translation.\\n\\nAs shown in the figure above, there is a slice enumerator on the left, which can list which slices the source needs and show what there are. After enumerating slices in real time, each slice would be distributed to SourceReader, the real data reading module. Boundedness marker is used to differentiate offline and real-time operations. Connector can mark whether there is a stop Offset in a slice. For example, Kafka can support real-time and offline operations. The degree of parallelism can be set for the ParallelSource in the engine to support parallel reading.\\n\\n\\nAs shown in the figure above, in a scenario where a coordinator is required, Event transmission is done between the Reader and Enumerator. Enumerator coordinates events by the Event sent by the Reader. The Coordinated Source needs to ensure single parallelism at the engine level to ensure data consistency. Of course, this does not make good use of the engine\u2019s memory management mechanism, but trade-offs are necessary.\\n\\n\\n![](/image/20220531/en/6.jpg)\\n\\n\\nFor the last question, how can we support a single reader to process multiple tables? This involves the Table API layer. Once all the required tables have been read from the Catalog, some of the tables may belong to a single job and can be read by a link, and some may need to be separated, depending on how Source is implemented. Since this is a special requirement, we want to make it easier for the developers. In the Table API layer, we will provide a SupportMultipleTable interface to declare that Source supports multiple Table reads. The Source is implemented based on the corresponding deserializer of multiple tables. As for how to separate derived multi-table data, Flink will adopt Side Output mechanism, while Spark is going to use Filter or Partition mechanism.\\n\\n## 5 Sink API\\n\\nAt present, there are not many features required by Sink, but three mojor requirements are considerable according to our research.\\n\\nThe first is about idempotent writing, which requires no code and depends on whether the storage engine can support it.\\n\\nThe second is about distributed transactions. The mainstream method is two-phase commitments, such as Kafka etc.\\n\\nThe third is about the submission of aggregation. For Storage engines like Iceberg and Hoodie, we hope there is no issues triggered by small files, so we expect to aggregate these files into a single file and commit it as a whole.\\n\\nBased on these three requirements, we built three APIS: SinkWriter, SinkCommitter, and SinkAggregated Committer. SinkWriter plays a role of writing, which may or may not be idempotent. SinkCommitter supports for two-phase commitments. SinkAggregatedCommitter supports for aggregated commitments.\\n\\n![](/image/20220531/en/7.jpg)\\n\\n\\nIdeally, AggregatedCommitter runs in Driver in single or parallel, and Writer and Committer run in Worker with multiple parallels, with each parallel carrying its own pre-commit work and then send Aggregated messages to Aggregated committers.\\n\\nCurrent advanced versions of Spark and Flink all support AggregatedCommitter running on the Driver(Job Manager) and Writer and Committer running on the worker(Task Manager).\\n\\n![](/image/20220531/en/8.jpg)\\n\\n\\nHowever, for the lower versions of Flink, AggregatedCommitter cannot be supported to run in JM, so we are also carrying translation adaptation. Writer and Committer will act as pre-operators, packaged by Flink\u2019s ProcessFunction, supports concurrent pre-delivery and write, and implement two-phase commitment based on Flink\u2019s Checkpoint mechanism. This is also the current 2PC implementation of many of Flink connectors. The ProcessFunction can send messages about pre-commits to downstream Aggregated committers, which can be wrapped around operators such as SinkFunction or ProcessFunction. Of course, We need to ensure that only one single parallel will be started by the AggregatedCommitter in case of the broken of the logic of the aggregated commitment.\\n\\nThank you for watching. If you\u2019re interested in the specific implementations mentioned in my speech, you can refer to the Apache SeaTunnel (Incubating) community and check out the API-Draft branch code. Thank you again."},{"id":"How to synchronize tens of billions of data based on SeaTunnel\'s ClickHouse","metadata":{"permalink":"/blog/How to synchronize tens of billions of data based on SeaTunnel\'s ClickHouse","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2022-05-10-ClickHouse.md","source":"@site/blog/2022-05-10-ClickHouse.md","title":"How to synchronize tens of billions of data based on SeaTunnel\'s ClickHouse","description":"Author | Fan Jia, Apache SeaTunnel(Incubating) Contributor","date":"2022-05-10T00:00:00.000Z","formattedDate":"May 10, 2022","tags":[{"label":"Meetup","permalink":"/blog/tags/meetup"}],"readingTime":7.035,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"How to synchronize tens of billions of data based on SeaTunnel\'s ClickHouse","title":"How to synchronize tens of billions of data based on SeaTunnel\'s ClickHouse","tags":["Meetup"]},"prevItem":{"title":"How dose Apache SeaTunnel refactor the API to decouple with the computing engine","permalink":"/blog/How dose Apache SeaTunnel refactor the API to decouple with the computing engine"},"nextItem":{"title":"SeaTunnel Application and Refactoring at Kidswant","permalink":"/blog/SeaTunnel Application and Refactoring at Kidswant"}},"content":"![](/image/20220510/en/0.jpg)\\n\\n\\nAuthor | Fan Jia, Apache SeaTunnel(Incubating) Contributor\\nEditor | Test Engineer Feng Xiulan\\n\\nFor importing billions of batches of data, the traditional JDBC approach does not perform as well as it should in some massive data synchronization scenarios. To write data faster, Apache SeaTunnel (Incubating) has just released version 2.1.1 to provide support for ClickhouseFile-Connector to implement Bulk load data writing.\\n\\nBulk load means synchronizing large amounts of data to the target DB. SeaTunnel currently supports data synchronization to ClickHouse.\\n\\nAt the Apache SeaTunnel (Incubating) April Meetup, Apache SeaTunnel (Incubating) contributor Fan Jia shared the topic of \\"ClickHouse bulk load implementation based on SeaTunnel\\", explaining in detail the implementation principle and process of ClickHouseFile for efficient processing of large amounts of data.\\n\\nThanks to the test engineer Feng Xiulan for the article arrangement!\\n\\nThis presentation contains seven parts.\\n\\n- State of ClickHouse Sink\\n- Scenarios that ClickHouse Sink isn\'t good at \\n- Introduction to the ClickHouseFile plugin\\n- ClickHouseFile core technologies\\n- Analysis of ClickHouseFile plugin implementation\\n- Comparison of plug-in capabilities\\n- Post-optimization directions\\n\\n\\n\\n![](/image/20220510/en/0-1.png)\\n\\n\\nFan Jia,  Apache SeaTunnel (Incubating) contributor, Senior Enginee of WhaleOps.\\n\\n## 01 Status of ClickHouse Sink \\n\\nAt present, the process of synchronizing data from SeaTunnel to ClickHouse is as follows: as long as the data source is supported by SeaTunnel, the data can be extracted, converted (or not), and written directly to the ClickHouse sink connector, and then written to the ClickHouse server via JDBC. \\n\\n\\n![](/image/20220510/en/1.png)\\n\\n\\nHowever, there are some problems with writing to the ClickHouse server via traditional JDBC.\\n\\nFirstly, the tool used now is the driver provided by ClickHouse and implemented via HTTP, however, HTTP is not very efficient to implement in certain scenarios. The second is the huge amount of data, if there is duplicate data or a large amount of data written at once, it needs to generate the corresponding insert statement and send it via HTTP to the ClickHouse server-side by the traditional method, where it is parsed and executed item by item or in batches, which does not allow data compression.\\n\\nFinally, there is the problem we often encounter, i.e. too much data may lead to an OOM on the SeaTunnel side or a server-side hang due to too much data being written to the server-side too often.\\n\\nSo we thought, is there a faster way to send than HTTP? If data pre-processing or data compression could be done on the SeaTunnel side, then the network bandwidth pressure would be reduced and the transmission rate would be increased.\\n\\n## 02 Scenarios that ClickHouse Sink isn\'t good at\\n\\n1. If the HTTP transfer protocol is used, HTTP may not be able to handle it when the volume of data is too large and the batch is sending requests in micro-batches.\\n \\n2. Too many INSERT requests may put too much pressure on the server. The bandwidth can handle a large number of requests, but the server-side is not always able to carry them. The online server not only needs data inserts but more importantly, the query data can be used by other business teams. If the server cluster goes down due to too much-inserted data, it is more than worth the cost.\\n\\n## 03 ClickHouse File core technologies\\n\\nIn response to these scenarios that ClickHouse is not good at, we wondered is there a way to do data compression right on the Spark side, without increasing the resource load on the Server when writing data, and with the ability to write large amounts of data quickly? So we developed the ClickHouseFile plugin to solve the problem.\\n\\nThe key technology of the ClickHouseFile plugin is ClickHouse -local. ClickHouse-local mode allows users to perform fast processing of local files without having to deploy and configure a ClickHouse Server. C lickHouse-local uses the same core as ClickHouse Server, so it supports most features as well as the same format and table engine.\\n\\nThese two features mean that users can work directly with local files without having to do the processing on the ClickHouse Server side. Because it is the same format, the data generated by the operations we perform on the remote or SeaTunnel side is seamlessly compatible with the server-side and can be written to using ClickHouse local. ClickHouse local is the core technology for the implementation of ClickHouseFile, which allows for implementing the ClickHouse file connector.\\n\\nClickHouse local core is used in the following ways.\\n\\n\\n\\n![](/image/20220510/en/2.png)\\n\\n\\n\\nFirst line: pass the data to the test_table table of the ClickHouse-local program via the Linux pipeline.\\n\\nLines two to five: create a result_table for receiving data.\\n\\nThe sixth line: pass data from test_table to the result_table.\\n\\nLine 7: Define the disk path for data processing.\\n\\nBy calling the Clickhouse-local component, the Apache SeaTunnel (Incubating) is used to generate the data files and compress the data. By communicating with the Server, the generated data is sent directly to the different nodes of Clickhouse and the data files are then made available to the nodes for the query.\\n\\nComparison of the original and current implementations.\\n\\n\\n\\n![](/image/20220510/en/3.png)\\n\\n\\n\\nOriginally, the data, including the insert statements was sent by Spark to the server, and the server did the SQL parsing, generated and compressed the table data files, generated the corresponding files, and created the corresponding indexes. If we use ClickHouse local technology, the data file generation, file compression and index creation are done by SeaTunnel, and the final output is a file or folder for the server-side, which is synchronized to the server and the server can queries the data without additional operations.\\n\\n\\n## 04 Core technical points\\n\\n\\n\\n![](/image/20220510/en/4.png)\\n\\n\\n\\nThe above process makes data synchronization more efficient, thanks to three optimizations we have made to it.\\n\\nFirstly, the data is transferred from the pipeline to the ClickHouseFile by the division, which imposes limitations in terms of length and memory. For this reason, we write the data received by the ClickHouse connector, i.e. the sink side, to a temporary file via MMAP technology, and then the ClickHouse local reads the data from the temporary file to generate our target local file, in order to achieve the effect of incremental data reading and solve the OM problem.\\n\\n\\n\\n![](/image/20220510/en/5.png)\\n\\n\\n\\nSecondly, it supports sharding. If only one file or folder is generated in a cluster, the file is distributed to only one node, which will greatly reduce the performance of the query. Therefore, we carry out slicing support. Users can set the key for slicing in the configuration folder, and the algorithm will divide the data into multiple log files and write them to different cluster nodes, significantly improving the read performance.\\n\\n\\n\\n![](/image/20220510/en/6.png)\\n\\n\\n\\nThe third key optimization is file transfer. Currently, SeaTunnel supports two file transfer methods, one is SCP, which is characterized by security, versatility, and no additional configuration; the other is RSYNC, which is somewhat fast and efficient and supports breakpoint resume, but requires additional configuration, users can choose between the way suits their needs.\\n\\n## 05 Plugin implementation analysis\\n\\nIn summary, the general implementation process of ClickHouseFile is as follows.\\n\\n\\n\\n![](/image/20220510/en/7.png)\\n\\n\\n\\n1.caching data to the ClickHouse sink side.\\n2.calling ClickHouse-local to generate the file.\\n3.sending the data to the ClickHouse server.\\n4.Execution of the ATTACH command.\\n\\nWith the above four steps, the generated data reaches a queryable state.\\n\\n## 06 Comparison of plug-in capabilities\\n\\n\\n\\n![](/image/20220510/en/8.png)\\n\\n\\n(a) In terms of data transfer, ClickHouseFile is more suitable for massive amounts of data, with the advantage that no additional configuration is required and it is highly versatile, while ClickHouseFile is more complex to configure and currently supports fewer engines.\\n\\nIn terms of environmental complexity, ClickHouse is more suitable for complex environments and can be run directly without additional configuration.\\n\\nIn terms of versatility, ClickHouse, due to being an officially supported JDBC diver by SeaTunnel, basically supports all engines for data writing, while ClickHouseFile supports relatively few engines.\\n\\nIn terms of server pressure, ClickHouseFile\'s advantage shows when it comes to massive data transfers that don\'t put too much pressure on the server.\\n\\nHowever, the two are not in competition and the choice needs to be based on the usage scenario.\\n\\n## 07 Follow-up plans\\n\\nAlthough SeaTunnel currently supports the ClickHouseFile plugin, there are still many defects that need to be optimized, mainly including\\n\\n- Rsync support.\\n- Exactly-Once support.\\n- Zero Copy support for transferring data files.\\n- More Engine support.\\n\\nAnyone interested in the above issues is welcome to contribute to the follow-up plans, or tell me your ideas!"},{"id":"SeaTunnel Application and Refactoring at Kidswant","metadata":{"permalink":"/blog/SeaTunnel Application and Refactoring at Kidswant","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2022-05-01_Kidswant.md","source":"@site/blog/2022-05-01_Kidswant.md","title":"SeaTunnel Application and Refactoring at Kidswant","description":"At the Apache SeaTunnel (Incubating) Meetup in April, Yuan Hongjun, a big data expert and OLAP platform architect at Kidswant, shared a topic of SeaTunnel Application and Refactoring at Kidswant.","date":"2022-05-01T00:00:00.000Z","formattedDate":"May 1, 2022","tags":[{"label":"Meetup","permalink":"/blog/tags/meetup"}],"readingTime":9.59,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"SeaTunnel Application and Refactoring at Kidswant","title":"SeaTunnel Application and Refactoring at Kidswant","tags":["Meetup"]},"prevItem":{"title":"How to synchronize tens of billions of data based on SeaTunnel\'s ClickHouse","permalink":"/blog/How to synchronize tens of billions of data based on SeaTunnel\'s ClickHouse"},"nextItem":{"title":"Innovation of Data Integration Technology in the Intelligent Era","permalink":"/blog/Innovation of Data Integration Technology in the Intelligent Era"}},"content":"![](/image/20220501/en/0.png)\\n\\nAt the Apache SeaTunnel (Incubating) Meetup in April, Yuan Hongjun, a big data expert and OLAP platform architect at Kidswant, shared a topic of SeaTunnel Application and Refactoring at Kidswant.\\n\\nThe presentation contains five parts.\\n\\n- Background of the introduction of Apache SeaTunnel (Incubating) by Kidswant\\n- A comparison of mainstream tools for big data processing\\n- The implementation of Apache SeaTunnel (Incubating)\\n- Common problems in Apache SeaTunnel (Incubating) refactoring\\n- Predictions on the future development of Kidswant\\n\\n\\n\\n![](/image/20220501/en/0-1.png)\\n\\n\\n\\nYuan Hongjun, Big data expert, OLAP platform architect of Kidswant. He has many years of experience in big data platform development and management, and has rich research experience in data assets, data lineage mapping, data governance, OLAP, and other fields.\\n\\n\\n## 01 Background\\n\\n\\n\\n![](/image/20220501/en/1.png)\\n\\n\\n\\nAt present, Kidswant\u2019s OLAP platform consists of seven parts: metadata layer, task layer, storage layer, SQL layer, scheduling layer, service layer, and monitoring layer. This sharing focuses on offline tasks in the task layer.\\n\\n\\nIn fact, Kidswant had a complete internal collection and push system, but due to some historical legacy issues, the company\u2019s existing platform could not quickly support the OLAP platform getting online, so at that time the company had to abandon its own platform and start developing a new system instead.\\nThere were three options in front of OLAP at the time.\\n\\n\\n1, Re-develop the collection and push system.\\n\\n\\n2\u3001Self-R&D.\\n\\n\\n3, Participate in open source projects.\\n\\n\\n## 02 Big data processing mainstream tools comparison\\n\\n\\nThese three options have their own pros and cons. Carrying re-research and development based on the collection and push system is convenient for us to take advantage of the experience of previous results and avoid repeatedly stepping into the pit. But the disadvantage is that it requires a large amount of code, time, a longer research period, and with less abstract code and lots of customized functions bound to the business, it\u2019s difficult to do the re-development.\\n\\n\\nIf completely self-developed, though the development process is autonomous and controllable, some engines such as Spark can be done to fit our own architecture, while the disadvantage is that we may encounter some unknown problems.\\n\\n\\nFor the last choice, if we use open-source frameworks, the advantage is that there is more abstract code, and the framework can be guaranteed in terms of performance and stability after verification by other major companies. Therefore Kidswant mainly studied three open-source data synchronization tools, DATAX, Sqoop, and SeaTunnel in the early stages of OLAP data synchronization refactoring.\\n\\n\\n![](/image/20220501/en/2.png)\\n\\n\\nFrom the diagram we can see that Sqoop\u2019s main function is data synchronization for RDB, and its implementation is based on MAP/REDUCE. Sqoop has rich parameters and command lines to perform various operations. The advantage of Sqoop is that it fits Hadoop ecology, and already supports most of the conversion from RDB to HIVE arbitrary source, with a complete set of commands and APIs.\\n\\n\\nThe disadvantages are that Sqoop only supports RDB data synchronization and has some limitations on data files, and there is no concept of data cleansing yet.\\n\\n\\n\\n![](/image/20220501/en/3.png)\\n\\n\\n\\nDataX mainly aims at synchronizing data from any source by configurable files + multi-threading, which runs three main processes: Reader, Framework, and Writer, where Framework mainly plays the role of communication and leaving empty space.\\n\\n\\nThe advantage of DataX is that it uses plug-in development, has its own flow control and data control, and is active in the community, with DataX\u2019s official website offering data pushes from many different sources. The disadvantage of DataX, however, is that it is memory-based and there may be limitations on the amount of data available.\\n\\n\\n\\n![](/image/20220501/en/4.png)\\n\\n\\n\\nApache SeaTunnel (Incubating) also does data synchronization from any source and implements the process in three steps: source, transform and sink based on configuration files, Spark or Flink. \\n\\nThe advantage is that the current 2.1.0 version has a very large number of plug-ins and source pushes, based on the idea of plug-ins also makes it very easy to extend and embrace Spark and Flink while with a distributed architecture. The only downside to Apache SeaTunnel (Incubating) is probably the lack of IP calls at the moment and the need to manage the UI interface by yourself.\\n\\n\\nIn summary, although Sqoop is distributed, it only supports data synchronization between RDB and HIVE, Hbase and has poor scalability, which is not convenient for re-development. DataX is scalable and stable overall, but because it is a standalone version, it cannot be deployed in a distributed cluster, and there is a strong dependency between data extraction capability and machine performance. SeaTunnel, on the other hand, is similar to DataX and makes up for the flaw of non-distributed DataX. It also supports real-time streaming, and the community is highly active as a new product. We chose SeaTunnel based on a number of factors such as whether it supported distributed or not, and whether it needed to be deployed on a separate machine.\\n\\n\\n## 03 Implementation\\n\\n\\nOn the Apache SeaTunnel (Incubating) website, we can see that the basic process of Apache SeaTunnel (Incubating) consists of three parts: source, transform and sink. According to the guidelines on the website, Apache SeaTunnel (Incubating) requires a configuration script to start, but after some research, we found that the final execution of Apache SeaTunnel (Incubating) is bansed on an application submitted by spark-submit that relies on the config file.\\n\\n\\nThis initialization, although simple, has the problem of having to rely on the config file, which is generated and then cleared after each run, and although it can be dynamically generated in the scheduling script, it raises two questions: 1) whether frequent disk operations make sense; and 2) whether there is a more efficient way to support Apache SeaTunnel (Incubating).\\n\\n\\n\\n![](/image/20220501/en/5.png)\\n\\n\\n\\nWith these considerations in mind, we added a Unified Configuration Template Platform module to the final design solution. Scheduling is done by initiating a commit command, and Apache SeaTunnel (Incubating) itself pulls the configuration information from the unified configuration template platform, then loads and initializes the parameters.\\n\\n\\n\\n![](/image/20220501/en/6.png)\\n\\n\\n\\nThe diagram above shows the business process for Kidswant\u2019s OLAP, which is divided into three sections. The overall flow of data from Parquet, i.e. Hive, through the Parquet tables to KYLIN and CK source.\\n\\n\\n\\n![](/image/20220501/en/7.png)\\n\\n\\n\\nThis is the page where we construct the model, which is generated mainly through drag and drop, with some transactional operations between each table, and micro-processing for Apache SeaTunnel (Incubating) on the right.\\n\\n\\n\\n![](/image/20220501/en/8.png)\\n\\n\\n\\nSo we end up submitting the commands as above, where the first one marked in red is [-conf customconfig/jars], referring to the fact that the user can then unify the configuration template platform for processing, or specify it separately when modeling. The last one marked in red is [421 $start_time $end_time $taskType] Unicode, which is a unique encoding.\\n\\n\\nBelow, on the left, are the 38 commands submitted by our final dispatch script. Below, on the right, is a modification made for Apache SeaTunnel (Incubating), and you can see a more specific tool class called WaterdropContext. It can first determine if Unicode exists and then use Unicode_code to get the configuration information for the different templates, avoiding the need to manipulate the config file.\\n\\n\\nIn the end, the reportMeta is used to report some information after the task is completed, which is also done in Apache SeaTunnel (Incubating).\\n\\n\\n\\n![](/image/20220501/en/9.png)\\n\\n\\n\\n\\n\\n![](/image/20220501/en/10.png)\\n\\n\\n\\n\\n![](/image/20220501/en/11.png)\\n\\n\\n\\nIn the finalized config file as above, it is worth noting that in terms of transforms, Kidswant has made some changes. The first is to do desensitization for mobile phones or ID numbers etc. If the user specifies a field, they do it by field, if not they will scan all fields and then desensitize and encrypt them according to pattern matching.\\n\\n\\nSecond, transform also supports custom processing, as mentioned above when talking about OLAP modeling. With the addition of HideStr, the first ten fields of a string of characters can be retained and all characters at the back encrypted, providing some security in the data.\\n\\n\\nThen, on the sink side, we added pre_sql in order to support the idempotency of the task, which is mainly done for tasks such as data deletion, or partition deletion, as the task cannot be run only once during production, and this design needed to account for the data deviation and correctness once operations such as reruns or complement occur.\\n\\n\\nOn the right side of the diagram, on the Sink side of a Clickhouse, we have added an is_senseless_mode, which forms a read/write senseless mode, where the user does not perceive the whole area when querying and complementing but uses the CK partition conversion, i.e. the command called MOVE PARTITION TO TABLE to operate.\\n\\n\\nA special note here is the Sink side of KYLIN. KYLIN is a very special source with its own set of data entry logic and its monitoring page, so the transformation we have done on KYLIN is simply a call to its API operation and a simple API call and constant polling of the state when using KYLIN, so the resources for KYLIN are limited in the Unified Template Configuration platform.\\n\\n\\n\\n\\n![](/image/20220501/en/12.png)\\n\\n\\n## 04 Common problems about the Apache SeaTunnel (Incubating) transformation\\n\\n\\n#### 01 OOM & Too Many Parts\\n\\n\\nThe problem usually arises during the Hive to Hive process, even if we go through automatic resource allocation, but there are cases where the data amount suddenly gets bigger, for example after holding several events. Such problems can only be avoided by manually and dynamically tuning the reference and adjusting the data synchronization batch time. In the future, we may try to control the data volume to achieve fine control.\\n\\n\\n#### 02 Field and type inconsistency issues\\n\\n\\nWhen the model runs, the user will make some changes to the upstream tables or fields that the task depends on, and these changes may lead to task failure if they are not perceived. The current solution is to rely on data lineage+ snapshots for advance awareness to avoid errors.\\n\\n\\n#### 03 Custom data sources & custom separators\\n\\n\\nIf the finance department requires a customized separator or jar information, the user can now specify the loading of additional jar information as well as the separator information themselves in the unified configuration template platform.\\n\\n\\n#### 04 Data skewing issues\\n\\n\\nThis may be due to users setting their parallelism but not being able to do so perfectly. We haven\u2019t finished dealing with this issue yet, but we may add post-processing to the Source module to break up the data and complete the skew.\\n\\n\\n#### 05 KYLIN global dictionary lock problem\\n\\n\\nAs the business grows, one cube will not be able to meet the needs of the users, so it will be necessary to create more than one cube. If the same fields are used between multiple cubes, the problem of KYLIN global dictionary lock will be encountered. The current solution is to separate the scheduling time between two or more tasks, or if this is not possible, we can make a distributed lock control, where the sink side of KYLIN has to get the lock to run.\\n\\n\\n## 05 An outlook on the future of Kidswant\\n\\n1. Multi-source data synchronization, maybe processing for RDB sources\\n2. Real-time Flink-based implementation\\n3. Take over the existing collection and scheduling platform (mainly to solve the problem of splitting library and tables)\\n4. Data quality verification, like some null values, the vacancy rate of the whole data, main time judgment, etc.\\n\\n\\nThis is all I have to share, I hope we can communicate more with the community in the future and make progress together, thanks!"},{"id":"Innovation of Data Integration Technology in the Intelligent Era","metadata":{"permalink":"/blog/Innovation of Data Integration Technology in the Intelligent Era","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2022-04-08-Innovation_of_Data_Integration_Technology_in_Intelligent_Era.md","source":"@site/blog/2022-04-08-Innovation_of_Data_Integration_Technology_in_Intelligent_Era.md","title":"Innovation of Data Integration Technology in the Intelligent Era","description":"1","date":"2022-04-08T00:00:00.000Z","formattedDate":"April 8, 2022","tags":[{"label":"Meetup","permalink":"/blog/tags/meetup"}],"readingTime":3.735,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"Innovation of Data Integration Technology in the Intelligent Era","title":"Innovation of Data Integration Technology in the Intelligent Era","tags":["Meetup"]},"prevItem":{"title":"SeaTunnel Application and Refactoring at Kidswant","permalink":"/blog/SeaTunnel Application and Refactoring at Kidswant"},"nextItem":{"title":"2.1.0 Released! Apache SeaTunnel(Incubating) First Apache Release Refactors Kernel and Supports Flink Overall","permalink":"/blog/2.1.0-Released-Apache-SeaTunnel-Incubating-First-Apache-Release-Refactors-Kernel-and-Supports-Flink-Overall"}},"content":"![1](/image/20220416/EN/1.png)\\n\\n\\nAs we know, only manageable, callable, computable, and magnetizable data resources can be deposited as assets. The interconnection of information systems has created a huge demand for multi-source and multidimensional data integration, which imposes strict requirements on data processing and integration tools.\\n\\nIn the era of intelligence, under the trends of \u201csmart city\u201d, \u201csmart governance\u201d, and \u201cintelligent products\u201d, enterprises are mostly faced with the challenge of how to achieve efficient data push, improve platform quality, and ensure data security. Only by choosing the right data integration tools and platforms can data play a key role.\\n\\nAs a next-generation high-performance, distributed, and massive data integration framework, Apache SeaTunnel is committed to making data synchronization simpler and more efficient and accelerating the implementation of distributed data processing capabilities in the production environment.\\n\\nAt the Apache SeaTunnel Meetup (April 16, 2022), the community will invite experienced Apache SeaTunnel users to share the best practices of the project in intelligent production environments. In addition, there will be contributors to analyze the source code of Apache SeaTunnel, guiding you to have a comprehensive and in-depth understanding of this powerful data integration tool.\\n\\nWhether you are a beginner who is interested in Apache SeaTunnel or users who encounter complex and difficult deployment problems in daily practice, you can come here to communicate with our instructors and get the answers you want.\\n\\n## 01 Sign up\\n\\nApache SeaTunnel Meetup | April online live registration has been started, hurry up and register!\\n\\nTime: 2022\u20134\u201316 14:00\u201317:00\\n\\nFormat: live online\\n\\nClick the link to register (free):\xa0[https://www.slidestalk.com/m/780](https://www.slidestalk.com/m/780)\\n\\nJoin Slack:\\n\\n[https://join.slack.com/t/apacheseatunnel/shared_invite/zt-10u1eujlc-g4E~ppbinD0oKpGeoo_dAw](https://join.slack.com/t/apacheseatunnel/shared_invite/zt-10u1eujlc-g4E~ppbinD0oKpGeoo_dAw)\\n\\n## 02 Highlights\\n\\n* Detailed case study\\n* Feature Analysis\\n* Tips to avoid stepping into the pit from enterprises\\n* Open-source community growth strategy\\n* Face-to-face Q&A with industry technical experts\\n* Surprise gifts\\n## 03 Event Agenda\\n\\nOn the day of the event, big data engineers from Kidswant and oppo will share the front-line practical experience, and senior engineers from WhaleOps will give a \u201chard-core\u201d explanation of the important function updates of Apache SeaTunnel.\\n\\n\\n![2](/image/20220416/EN/2.png)\\n\\n\\nYuan Hongjun, Kidswant Big Data Expert, OLAP Platform Architect\\n\\nYears of experience in R&D and management of big data platforms, rich research experience in data assets, data linkage, data governance, OLAP, and other fields\\n\\nTime: 14:00\u201314:40\\n\\nTopic: Application Practice of Apache SeaTunnel in Kidswant\\n\\nSpeech outline: How to push data efficiently? How to improve the quality of the platform? How to ensure data security? What changes did Kidswant make to Apache SeaTunnel?\\n\\n\\n![3](/image/20220416/EN/3.png)\\n\\n\\nFan Jia, WhaleOps Senior Engineer\\n\\nTime: 14:40\u201315:20\\n\\nTopic: Clickhouse Bulk Load Implementation Based on Apache SeaTunnel\\n\\nSpeech outline: How to implement the bulk load data synchronization function of Clickhouse by extending the Connector of Apache SeaTunnel?\\n\\n\\n![4](/image/20220416/EN/4.png)\\n\\n\\nWang Zichao, Oppo Senior Backend Engineer\\n\\nTime: 15:50\u201316:30\\n\\nTopic: The technological innovation of oppo intelligent recommendation sample center based on Apache SeaTunnel\\n\\nSpeech outline: Introduce the evolution of oppo\u2019s intelligent recommendation machine learning sample dealing process and the role of Apache SeaTunnel in it.\\n\\nIn addition to the wonderful speeches, a number of lucky draw sessions were also set up on the meetup. Anyone participating in the lucky draw will have the opportunity to win exquisite customized gifts from Apache SeaTunnel, so stay tuned~\\n\\n## **About SeaTunnel**\\n\\nSeaTunnel (formerly Waterdrop) is an easy-to-use, ultra-high-performance distributed data integration platform that supports real-time synchronization of massive amounts of data and can synchronize hundreds of billions of data per day in a stable and efficient manner.\\n\\n## **Why do we need SeaTunnel?**\\n\\nSeaTunnel does everything it can to solve the problems you may encounter in synchronizing massive amounts of data.\\n\\n* Data loss and duplication\\n* Task buildup and latency\\n* Low throughput\\n* Long application-to-production cycle time\\n* Lack of application status monitoring\\n## **SeaTunnel Usage Scenarios**\\n\\n* Massive data synchronization\\n* Massive data integration\\n* ETL of large volumes of data\\n* Massive data aggregation\\n* Multi-source data processing\\n## **Features of SeaTunnel**\\n\\n* Rich components\\n* High scalability\\n* Easy to use\\n* Mature and stable\\n## **How to get started with SeaTunnel quickly?**\\n\\nWant to experience SeaTunnel quickly? SeaTunnel 2.1.0 takes 10 seconds to get you up and running.\\n\\n[https://seatunnel.apache.org/docs/2.1.0/developement/setup](https://seatunnel.apache.org/docs/2.1.0/developement/setup)\\n\\n## **How can I contribute?**\\n\\nWe invite all partners who are interested in making local open-source global to join the SeaTunnel contributors family and foster open-source together!\\n\\nSubmit an issue:\\n\\n[https://github.com/apache/incubator-seatunnel/issues](https://github.com/apache/incubator-seatunnel/issues)\\n\\nContribute code to:\\n\\n[https://github.com/apache/incubator-seatunnel/pulls](https://github.com/apache/incubator-seatunnel/pulls)\\n\\nSubscribe to the community development mailing list :\\n\\ndev-subscribe@seatunnel.apache.org\\n\\nDevelopment Mailing List :\\n\\ndev@seatunnel.apache.org\\n\\nJoin Slack:\\n\\n[https://the-asf.slack.com/archives/C053HND1D6X](https://the-asf.slack.com/archives/C053HND1D6X)\\n\\nFollow Twitter:\\n\\n[https://twitter.com/ASFSeaTunnel](https://twitter.com/ASFSeaTunnel)\\n\\nCome and join us!"},{"id":"2.1.0-Released-Apache-SeaTunnel-Incubating-First-Apache-Release-Refactors-Kernel-and-Supports-Flink-Overall","metadata":{"permalink":"/blog/2.1.0-Released-Apache-SeaTunnel-Incubating-First-Apache-Release-Refactors-Kernel-and-Supports-Flink-Overall","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2022-03-18-2-1-0-release.md","source":"@site/blog/2022-03-18-2-1-0-release.md","title":"2.1.0 Released! Apache SeaTunnel(Incubating) First Apache Release Refactors Kernel and Supports Flink Overall","description":"On December 9, 2021, Apache SeaTunnel(Incubating) entered the Apache Incubator, and after nearly four months of endeavor by the community contributors, we passed the first Apache version control in one go and released it on March 18, 2022. This means that version 2.1.0 is an official release that is safe for corporate and individual users to use, which has been voted on by the Apache SeaTunnel(Incubating) community and the Apache Incubator.","date":"2022-03-18T00:00:00.000Z","formattedDate":"March 18, 2022","tags":[{"label":"2.1.0","permalink":"/blog/tags/2-1-0"},{"label":"Release","permalink":"/blog/tags/release"}],"readingTime":5.005,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"2.1.0-Released-Apache-SeaTunnel-Incubating-First-Apache-Release-Refactors-Kernel-and-Supports-Flink-Overall","title":"2.1.0 Released! Apache SeaTunnel(Incubating) First Apache Release Refactors Kernel and Supports Flink Overall","tags":["2.1.0","Release"]},"prevItem":{"title":"Innovation of Data Integration Technology in the Intelligent Era","permalink":"/blog/Innovation of Data Integration Technology in the Intelligent Era"},"nextItem":{"title":"How to quickly import data from HDFS into ClickHouse","permalink":"/blog/hdfs-to-clickhouse"}},"content":"On December 9, 2021, Apache SeaTunnel(Incubating) entered the Apache Incubator, and after nearly four months of endeavor by the community contributors, we passed the first Apache version control in one go and released it on March 18, 2022. This means that version 2.1.0 is an official release that is safe for corporate and individual users to use, which has been voted on by the Apache SeaTunnel(Incubating) community and the Apache Incubator.\\n\\n**Note:** A\xa0**software license**\xa0is a legal instrument governing the use or redistribution of software. A typical software license grants the\xa0licensee, typically an\xa0end-user, permission to use one or more copies of the software in ways where such a use would otherwise potentially constitute copyright infringement of the software owner\'s\xa0exclusive rights\xa0under copyright. Effectively, a software license is a contract between the software developer and the user that guarantees the user will not be sued within the scope of the license. \\n\\nBefore and after entering the incubator, we spent a lot of time sorting through the external dependencies of the entire project to ensure compliance. It is important to note that the choice of License for open source software does not necessarily mean that the project itself is compliant. While the stringent version control process of ASF ensures compliance and legal distribution of the software license maximumly.\\n\\n## Release Note\\n\\nWe bring the following **key features**to this release:\\n\\n1. The kernel of the microkernel plug-in architecture is overall optimized, which is mainly in Java. And a lot of improvements are made to command line parameter parsing, plug-in loading, etc. At the same time, the users (or contributors) can choose the language to develop plug-in extensions, which greatly reduces the development threshold of plug-ins.\\n2. Overall support for Flink, while the users are free to choose the underlying engine. This version also brings a large number of Flink plug-ins and welcomes anyone to contribute more.\\n3. Provide local development fast startup environment support (example), allow contributors or users quickly and smoothly start without changing any code to facilitate rapid local development debugging. This is certainly exciting news for contributors or users who need to customize their plugins. In fact, we\'ve had a large number of contributors use this approach to quickly test the plugin in our pre-release testing.\\n4. With Docker container installation provided, users can deploy and install Apache SeaTunnel(Incubating) via Docker extremely fast, and we will iterate around Docker & K8s in the future, any interesting proposal on this is welcomed.\\n## Specific release notes\uff1a\\n\\n### [Features]\\n\\n* Use JCommander to do command line parameter parsing, making developers focus on the logic itself.\\n* Flink is upgraded from 1.9 to 1.13.5, keeping compatibility with older versions and preparing for subsequent CDC.\\n* Support for Doris, Hudi, Phoenix, Druid, and other Connector plugins, and you can find complete plugin support here [plugins-supported-by-seatunnel]([https://github.com/apache/incubator-seatunnel#plugins-supported-by-seatunnel](https://github.com/apache/incubator-seatunnel#plugins-supported-by-seatunnel)).\\n* Local development extremely fast starts environment support. It can be achieved by using the example module without modifying any code, which is convenient for local debugging.\\n* Support for installing and trying out Apache SeaTunnel(Incubating) via Docker containers.\\n* SQL component supports SET statements and configuration variables.\\n* Config module refactoring to facilitate understanding for the contributors while ensuring code compliance (License) of the project.\\n* Project structure realigned to fit the new Roadmap.\\n* CI&CD support, code quality automation control (more plans will be carried out to support CI&CD development).\\n\\n## Acknowledgments\\n\\nThanks to the following contributors who participated in this version release (GitHub IDs, in no particular order).\\n\\nAl-assad, BenJFan, CalvinKirs, JNSimba, JiangTChen, Rianico, TyrantLucifer, Yves-yuan, ZhangchengHu0923, agendazhang, an-shi-chi-fan, asdf2014, bigdataf, chaozwn, choucmei, dailidong, dongzl, felix-thinkingdata, fengyuceNv, garyelephant, kalencaya, kezhenxu94, legendtkl, leo65535, liujinhui1994, mans2singh, marklightning, mosence, nielifeng, ououtt, ruanwenjun, simon824, totalo, wntp, wolfboys, wuchunfu, xbkaishui, xtr1993, yx91490, zhangbutao, zhaomin1423, zhongjiajie, zhuangchong, zixi0825.\\n\\nAlso sincere gratitude to our Mentors: Zhenxu Ke, Willem Jiang, William Guo, LiDong Dai, Ted Liu, Kevin, JB for their help!\\n\\n## Planning for the next few releases:\\n\\n* CDC support.\\n* Support for the monitoring system.\\n* UI system support.\\n* More Connector and efficient Sink support, such as ClickHouse support will be available in the next release soon.\\nThe follow-up **Features** are decided by the community consensus, and we sincerely appeal to more participation in the community construction.\\n\\nWe need your attention and contributions:)\\n\\n## Community Status\\n\\n### Recent Development\\n\\nSince entering the Apache incubator, the contributor group has grown from 13 to 55 and continues to grow, with the average weekly community commits remaining at 20+. \\n\\nThree contributors from different companies (Lei Xie, HuaJie Wang, Chunfu Wu) have been invited to become Committers on account of their contributions to the community. \\n\\nWe held two Meetups, where instructors from Bilibili, OPPO, Vipshop, and other companies shared their large-scale production practices based on SeaTunnel in their companies (we will hold one meetup monthly in the future, and welcome SeaTunnel users or contributors to come and share their stories about SeaTunnel).\\n\\n### Users of Apache SeaTunnel(Incubating)\\n\\nNote: Only registered users are included.\\n\\nRegistered users of Apache SeaTunnel(Incubating) are shown below. If you are also using Apache SeaTunnel(Incubating), too, welcome to register on [Who is using SeaTunne](https://github.com/apache/incubator-seatunnel/issues/686)!\\n\\n<div align=\\"center\\">\\n\\n<img src=\\"/image/20220321/1.png\\"/>\\n\\n</div>\\n\\n## PPMC\'s Word\\n\\nLiFeng Nie, PPMC of Apache SeaTunnel(Incubating), commented on the first Apache version release. \\n\\nFrom the first day entering Apache Incubating, we have been working hard to learn the Apache Way and various Apache policies. Although the first release took a lot of time (mainly for compliance), we think it was well worth it, and that\'s one of the reasons we chose to enter Apache. We need to give our users peace of mind, and Apache is certainly the best choice, with its almost demanding license control that allows users to avoid compliance issues as much as possible and ensure that the software is circulating reasonably and legally. In addition, its practice of the Apache Way, such as public service mission, pragmatism, community over code, openness and consensus decision-making, and meritocracy, can drive the Apache SeaTunnel(Incubating) community to become more open, transparent, and diverse."},{"id":"hdfs-to-clickhouse","metadata":{"permalink":"/blog/hdfs-to-clickhouse","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2021-12-30-hdfs-to-clickhouse.md","source":"@site/blog/2021-12-30-hdfs-to-clickhouse.md","title":"How to quickly import data from HDFS into ClickHouse","description":"ClickHouse is a distributed columnar DBMS for OLAP. Our department has now stored all log data related to data analysis in ClickHouse, an excellent data warehouse, and the current daily data volume has reached 30 billion.","date":"2021-12-30T00:00:00.000Z","formattedDate":"December 30, 2021","tags":[{"label":"HDFS","permalink":"/blog/tags/hdfs"},{"label":"ClickHouse","permalink":"/blog/tags/click-house"}],"readingTime":5.455,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"hdfs-to-clickhouse","title":"How to quickly import data from HDFS into ClickHouse","tags":["HDFS","ClickHouse"]},"prevItem":{"title":"2.1.0 Released! Apache SeaTunnel(Incubating) First Apache Release Refactors Kernel and Supports Flink Overall","permalink":"/blog/2.1.0-Released-Apache-SeaTunnel-Incubating-First-Apache-Release-Refactors-Kernel-and-Supports-Flink-Overall"},"nextItem":{"title":"How to quickly import data from Hive into ClickHouse","permalink":"/blog/hive-to-clickhouse"}},"content":"ClickHouse is a distributed columnar DBMS for OLAP. Our department has now stored all log data related to data analysis in ClickHouse, an excellent data warehouse, and the current daily data volume has reached 30 billion.\\n\\nThe experience of data processing and storage introduced earlier is based on real-time data streams. The data is stored in Kafka. We use Java or Golang to read, parse, and clean the data from Kafka and write it into ClickHouse, so that the data can be stored in ClickHouse. Quick access. However, in the usage scenarios of many students, the data is not real-time, and it may be necessary to import the data in HDFS or Hive into ClickHouse. Some students implement data import by writing Spark programs, so is there a simpler and more efficient way?\\n\\nAt present, there is a tool **Seatunnel** in the open source community, the project address [https://github.com/apache/incubator-seatunnel](https://github.com/apache/incubator-seatunnel), can quickly Data in HDFS is imported into ClickHouse.\\n\\n## HDFS To ClickHouse\\n\\nAssuming that our logs are stored in HDFS, we need to parse the logs and filter out the fields we care about, and write the corresponding fields into the ClickHouse table.\\n\\n### Log Sample\\n\\nThe log format we store in HDFS is as follows, which is a very common Nginx log\\n\\n```shell\\n10.41.1.28 github.com 114.250.140.241 0.001s \\"127.0.0.1:80\\" [26/Oct/2018:03:09:32 +0800] \\"GET /Apache/Seatunnel HTTP/1.1\\" 200 0 \\"-\\" - \\"Dalvik/2.1.0 (Linux; U; Android 7.1.1; OPPO R11 Build/NMF26X)\\" \\"196\\" \\"-\\" \\"mainpage\\" \\"443\\" \\"-\\" \\"172.16.181.129\\"\\n```\\n\\n### ClickHouse Schema\\n\\nOur ClickHouse table creation statement is as follows, our table is partitioned by day\\n\\n```shell\\nCREATE TABLE cms.cms_msg\\n(\\n    date Date, \\n    datetime DateTime, \\n    url String, \\n    request_time Float32, \\n    status String, \\n    hostname String, \\n    domain String, \\n    remote_addr String, \\n    data_size Int32, \\n    pool String\\n) ENGINE = MergeTree PARTITION BY date ORDER BY date SETTINGS index_granularity = 16384\\n```\\n\\n## Seatunnel with ClickHouse\\n\\nNext, I will introduce to you in detail how we can meet the above requirements through Seatunnel and write the data in HDFS into ClickHouse.\\n\\n### Seatunnel\\n\\n[Seatunnel](https://github.com/apache/incubator-seatunnel) is a very easy-to-use, high-performance, real-time data processing product that can deal with massive data. It is built on Spark. Seatunnel has a very rich set of plugins that support reading data from Kafka, HDFS, Kudu, performing various data processing, and writing the results to ClickHouse, Elasticsearch or Kafka.\\n\\n### Prerequisites\\n\\nFirst we need to install Seatunnel, the installation is very simple, no need to configure system environment variables\\n\\n1. Prepare the Spark environment\\n2. Install Seatunnel\\n3. Configure Seatunnel\\n\\nThe following are simple steps, the specific installation can refer to [Quick Start](/docs/quick-start)\\n\\n```shell\\ncd /usr/local\\n\\nwget https://archive.apache.org/dist/spark/spark-2.2.0/spark-2.2.0-bin-hadoop2.7.tgz\\ntar -xvf https://archive.apache.org/dist/spark/spark-2.2.0/spark-2.2.0-bin-hadoop2.7.tgz\\n\\nwget https://github.com/InterestingLab/seatunnel/releases/download/v1.1.1/seatunnel-1.1.1.zip\\n\\nunzip seatunnel-1.1.1.zip\\n\\ncd seatunnel-1.1.1\\nvim config/seatunnel-env.sh\\n\\n# Specify the Spark installation path\\nSPARK_HOME=${SPARK_HOME:-/usr/local/spark-2.2.0-bin-hadoop2.7}\\n```\\n\\n### seatunnel Pipeline\\n\\nWe only need to write a configuration file of seatunnel Pipeline to complete the data import.\\n\\nThe configuration file consists of four parts, Spark, Input, filter and Output.\\n\\n#### Spark\\n\\nThis part is the related configuration of Spark, which mainly configures the size of the resources required for Spark to execute.\\n\\n```shell\\nspark {\\n  spark.app.name = \\"seatunnel\\"\\n  spark.executor.instances = 2\\n  spark.executor.cores = 1\\n  spark.executor.memory = \\"1g\\"\\n}\\n```\\n\\n#### Input\\n\\nThis part defines the data source. The following is a configuration example for reading data in text format from HDFS files.\\n\\n```shell\\ninput {\\n    hdfs {\\n        path = \\"hdfs://nomanode:8020/rowlog/accesslog\\"\\n        table_name = \\"access_log\\"\\n        format = \\"text\\"\\n    }\\n}\\n```\\n\\n#### Filter\\n\\nIn the Filter section, here we configure a series of transformations, including regular parsing to split the log, time transformation to convert HTTPDATE to the date format supported by ClickHouse, type conversion to Number type fields, and field filtering through SQL, etc.\\n\\n```shell\\nfilter {\\n    # Parse raw logs using regular expressions\\n    grok {\\n        source_field = \\"raw_message\\"\\n        pattern = \'%{IP:ha_ip}\\\\\\\\s%{NOTSPACE:domain}\\\\\\\\s%{IP:remote_addr}\\\\\\\\s%{NUMBER:request_time}s\\\\\\\\s\\\\\\"%{DATA:upstream_ip}\\\\\\"\\\\\\\\s\\\\\\\\[%{HTTPDATE:timestamp}\\\\\\\\]\\\\\\\\s\\\\\\"%{NOTSPACE:method}\\\\\\\\s%{DATA:url}\\\\\\\\s%{NOTSPACE:http_ver}\\\\\\"\\\\\\\\s%{NUMBER:status}\\\\\\\\s%{NUMBER:body_bytes_send}\\\\\\\\s%{DATA:referer}\\\\\\\\s%{NOTSPACE:cookie_info}\\\\\\\\s\\\\\\"%{DATA:user_agent}\\\\\\"\\\\\\\\s%{DATA:uid}\\\\\\\\s%{DATA:session_id}\\\\\\\\s\\\\\\"%{DATA:pool}\\\\\\"\\\\\\\\s\\\\\\"%{DATA:tag2}\\\\\\"\\\\\\\\s%{DATA:tag3}\\\\\\\\s%{DATA:tag4}\'\\n    }\\n\\n    # Convert data in \\"dd/MMM/yyyy:HH:mm:ss Z\\" format to\\n    # Data in \\"yyyy/MM/dd HH:mm:ss\\" format\\n    date {\\n        source_field = \\"timestamp\\"\\n        target_field = \\"datetime\\"\\n        source_time_format = \\"dd/MMM/yyyy:HH:mm:ss Z\\"\\n        target_time_format = \\"yyyy/MM/dd HH:mm:ss\\"\\n    }\\n\\n    # Use SQL to filter the fields of interest and process the fields\\n    # You can even filter out data you don\'t care about by filter conditions\\n    sql {\\n        table_name = \\"access\\"\\n        sql = \\"select substring(date, 1, 10) as date, datetime, hostname, url, http_code, float(request_time), int(data_size), domain from access\\"\\n    }\\n}\\n```\\n\\n#### Output\\n\\nFinally, we write the processed structured data to ClickHouse\\n\\n```shell\\noutput {\\n    clickhouse {\\n        host = \\"your.clickhouse.host:8123\\"\\n        database = \\"seatunnel\\"\\n        table = \\"access_log\\"\\n        fields = [\\"date\\", \\"datetime\\", \\"hostname\\", \\"uri\\", \\"http_code\\", \\"request_time\\", \\"data_size\\", \\"domain\\"]\\n        username = \\"username\\"\\n        password = \\"password\\"\\n    }\\n}\\n```\\n\\n### Running seatunnel\\n\\nWe combine the above four-part configuration into our configuration file `config/batch.conf`.\\n\\n```shell\\nvim config/batch.conf\\n```\\n\\n```shell\\nspark {\\n  spark.app.name = \\"seatunnel\\"\\n  spark.executor.instances = 2\\n  spark.executor.cores = 1\\n  spark.executor.memory = \\"1g\\"\\n}\\n\\ninput {\\n    hdfs {\\n        path = \\"hdfs://nomanode:8020/rowlog/accesslog\\"\\n        table_name = \\"access_log\\"\\n        format = \\"text\\"\\n    }\\n}\\n\\nfilter {\\n    # Parse raw logs using regular expressions\\n    grok {\\n        source_field = \\"raw_message\\"\\n        pattern = \'%{IP:ha_ip}\\\\\\\\s%{NOTSPACE:domain}\\\\\\\\s%{IP:remote_addr}\\\\\\\\s%{NUMBER:request_time}s\\\\\\\\s\\\\\\"%{DATA:upstream_ip}\\\\\\"\\\\\\\\s\\\\\\\\[%{HTTPDATE:timestamp}\\\\\\\\]\\\\\\\\s\\\\\\"%{NOTSPACE:method}\\\\\\\\s%{DATA:url}\\\\\\\\s%{NOTSPACE:http_ver}\\\\\\"\\\\\\\\s%{NUMBER:status}\\\\\\\\s%{NUMBER:body_bytes_send}\\\\\\\\s%{DATA:referer}\\\\\\\\s%{NOTSPACE:cookie_info}\\\\\\\\s\\\\\\"%{DATA:user_agent}\\\\\\"\\\\\\\\s%{DATA:uid}\\\\\\\\s%{DATA:session_id}\\\\\\\\s\\\\\\"%{DATA:pool}\\\\\\"\\\\\\\\s\\\\\\"%{DATA:tag2}\\\\\\"\\\\\\\\s%{DATA:tag3}\\\\\\\\s%{DATA:tag4}\'\\n    }\\n\\n    # Convert data in \\"dd/MMM/yyyy:HH:mm:ss Z\\" format to\\n    # Data in \\"yyyy/MM/dd HH:mm:ss\\" format\\n    date {\\n        source_field = \\"timestamp\\"\\n        target_field = \\"datetime\\"\\n        source_time_format = \\"dd/MMM/yyyy:HH:mm:ss Z\\"\\n        target_time_format = \\"yyyy/MM/dd HH:mm:ss\\"\\n    }\\n\\n    # Use SQL to filter the fields of interest and process the fields\\n    # You can even filter out data you don\'t care about by filter conditions\\n    sql {\\n        table_name = \\"access\\"\\n        sql = \\"select substring(date, 1, 10) as date, datetime, hostname, url, http_code, float(request_time), int(data_size), domain from access\\"\\n    }\\n}\\n\\noutput {\\n    clickhouse {\\n        host = \\"your.clickhouse.host:8123\\"\\n        database = \\"seatunnel\\"\\n        table = \\"access_log\\"\\n        fields = [\\"date\\", \\"datetime\\", \\"hostname\\", \\"uri\\", \\"http_code\\", \\"request_time\\", \\"data_size\\", \\"domain\\"]\\n        username = \\"username\\"\\n        password = \\"password\\"\\n    }\\n}\\n```\\n\\nExecute the command, specify the configuration file, and run Seatunnel to write data to ClickHouse. Here we take the local mode as an example.\\n\\n```shell\\n./bin/start-seatunnel.sh --config config/batch.conf -e client -m \'local[2]\'\\n```\\n\\n## Conclusion\\n\\nIn this post, we covered how to import Nginx log files from HDFS into ClickHouse using Seatunnel. Data can be imported quickly with only one configuration file without writing any code. In addition to supporting HDFS data sources, Seatunnel also supports real-time reading and processing of data from Kafka to ClickHouse. Our next article will describe how to quickly import data from Hive into ClickHouse.\\n\\nOf course, Seatunnel is not only a tool for ClickHouse data writing, but also plays a very important role in the writing of data sources such as Elasticsearch and Kafka.\\n\\nIf you want to know more functions and cases of Seatunnel combined with ClickHouse, Elasticsearch and Kafka, you can go directly to the official website [https://seatunnel.apache.org/](https://seatunnel.apache.org/)\\n\\n-- Power by [InterestingLab](https://github.com/InterestingLab)"},{"id":"hive-to-clickhouse","metadata":{"permalink":"/blog/hive-to-clickhouse","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2021-12-30-hive-to-clickhouse.md","source":"@site/blog/2021-12-30-hive-to-clickhouse.md","title":"How to quickly import data from Hive into ClickHouse","description":"ClickHouse is a distributed columnar DBMS for OLAP. Our department has stored all log data related to data analysis in ClickHouse, an excellent data warehouse, and the current daily data volume has reached 30 billion.","date":"2021-12-30T00:00:00.000Z","formattedDate":"December 30, 2021","tags":[{"label":"Hive","permalink":"/blog/tags/hive"},{"label":"ClickHouse","permalink":"/blog/tags/click-house"}],"readingTime":4.215,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"hive-to-clickhouse","title":"How to quickly import data from Hive into ClickHouse","tags":["Hive","ClickHouse"]},"prevItem":{"title":"How to quickly import data from HDFS into ClickHouse","permalink":"/blog/hdfs-to-clickhouse"},"nextItem":{"title":"How to quickly write data to Elasticsearch using Spark","permalink":"/blog/spark-execute-elasticsearch"}},"content":"ClickHouse is a distributed columnar DBMS for OLAP. Our department has stored all log data related to data analysis in ClickHouse, an excellent data warehouse, and the current daily data volume has reached 30 billion.\\n\\nIn the previous article [How to quickly import data from HDFS into ClickHouse] (2021-12-30-hdfs-to-clickhouse.md), we mentioned the use of Seatunnel [https://github.com/apache/incubator -seatunnel](https://github.com/apache/incubator-seatunnel) After a very simple operation on the data in HDFS, the data can be written to ClickHouse. The data in HDFS is generally unstructured data, so what should we do with the structured data stored in Hive?\\n\\n![](/doc/image_zh/hive-logo.png)\\n\\n## Hive to ClickHouse\\n\\nAssuming that our data has been stored in Hive, we need to read the data in the Hive table and filter out the fields we care about, or convert the fields, and finally write the corresponding fields into the ClickHouse table.\\n\\n### Hive Schema\\n\\nThe structure of the data table we store in Hive is as follows, which stores common Nginx logs.\\n\\n```\\nCREATE TABLE `nginx_msg_detail`(\\n   `hostname` string,\\n   `domain` string,\\n   `remote_addr` string,\\n   `request_time` float,\\n   `datetime` string,\\n   `url` string,\\n   `status` int,\\n   `data_size` int,\\n   `referer` string,\\n   `cookie_info` string,\\n   `user_agent` string,\\n   `minute` string)\\n PARTITIONED BY (\\n   `date` string,\\n   `hour` string)\\n\\n```\\n\\n### ClickHouse Schema\\n\\nOur ClickHouse table creation statement is as follows, our table is partitioned by day\\n\\n```\\nCREATE TABLE cms.cms_msg\\n(\\n    date Date,\\n    datetime DateTime,\\n    url String,\\n    request_time Float32,\\n    status String,\\n    hostname String,\\n    domain String,\\n    remote_addr String,\\n    data_size Int32\\n) ENGINE = MergeTree PARTITION BY date ORDER BY (date, hostname) SETTINGS index_granularity = 16384\\n```\\n\\n## Seatunnel with ClickHouse\\n\\nNext, I will introduce to you how we write data from Hive to ClickHouse through Seatunnel.\\n\\n### Seatunnel\\n\\n[Seatunnel](https://github.com/apache/incubator-seatunnel) is a very easy-to-use, high-performance, real-time data processing product that can deal with massive data. It is built on Spark. Seatunnel has a very rich set of plug-ins that support reading data from Kafka, HDFS, and Kudu, performing various data processing, and writing the results to ClickHouse, Elasticsearch or Kafka.\\n\\nThe environment preparation and installation steps of Seatunnel will not be repeated here. For specific installation steps, please refer to the previous article or visit [Seatunnel Docs](/docs/intro/about)\\n\\n### Seatunnel Pipeline\\n\\nWe only need to write a configuration file of Seatunnel Pipeline to complete the data import.\\n\\nThe configuration file includes four parts, namely Spark, Input, filter and Output.\\n\\n#### Spark\\n\\n\\nThis part is the related configuration of Spark, which mainly configures the resource size required for Spark execution.\\n\\n```\\nspark {\\n  // This configuration is required\\n  spark.sql.catalogImplementation = \\"hive\\"\\n  spark.app.name = \\"seatunnel\\"\\n  spark.executor.instances = 2\\n  spark.executor.cores = 1\\n  spark.executor.memory = \\"1g\\"\\n}\\n```\\n\\n#### Input\\n\\nThis part defines the data source. The following is a configuration example of reading data in text format from a Hive file.\\n\\n```\\ninput {\\n    hive {\\n        pre_sql = \\"select * from access.nginx_msg_detail\\"\\n        table_name = \\"access_log\\"\\n    }\\n}\\n```\\n\\nSee, a very simple configuration can read data from Hive. `pre_sql` is the SQL to read data from Hive, and `table_name` is the name of the table that will register the read data as a temporary table in Spark, which can be any field.\\n\\nIt should be noted that it must be ensured that the metastore of hive is in the service state.\\n\\nWhen running in Cluster, Client, Local mode, the `hive-site.xml` file must be placed in the $HADOOP_CONF directory of the submit task node\\n\\n#### Filter\\n\\nIn the Filter section, here we configure a series of transformations, and here we discard the unnecessary minute and hour fields. Of course, we can also not read these fields through `pre_sql` when reading Hive\\n\\n```\\nfilter {\\n    remove {\\n        source_field = [\\"minute\\", \\"hour\\"]\\n    }\\n}\\n```\\n\\n#### Output\\n\\nFinally, we write the processed structured data to ClickHouse\\n\\n```\\noutput {\\n    clickhouse {\\n        host = \\"your.clickhouse.host:8123\\"\\n        database = \\"seatunnel\\"\\n        table = \\"nginx_log\\"\\n        fields = [\\"date\\", \\"datetime\\", \\"hostname\\", \\"url\\", \\"http_code\\", \\"request_time\\", \\"data_size\\", \\"domain\\"]\\n        username = \\"username\\"\\n        password = \\"password\\"\\n    }\\n}\\n```\\n\\n### Running Seatunnel\\n\\nWe combine the above four-part configuration into our configuration file `config/batch.conf`.\\n\\n    vim config/batch.conf\\n\\n```\\nspark {\\n  spark.app.name = \\"seatunnel\\"\\n  spark.executor.instances = 2\\n  spark.executor.cores = 1\\n  spark.executor.memory = \\"1g\\"\\n  // This configuration is required\\n  spark.sql.catalogImplementation = \\"hive\\"\\n}\\ninput {\\n    hive {\\n        pre_sql = \\"select * from access.nginx_msg_detail\\"\\n        table_name = \\"access_log\\"\\n    }\\n}\\nfilter {\\n    remove {\\n        source_field = [\\"minute\\", \\"hour\\"]\\n    }\\n}\\noutput {\\n    clickhouse {\\n        host = \\"your.clickhouse.host:8123\\"\\n        database = \\"seatunnel\\"\\n        table = \\"access_log\\"\\n        fields = [\\"date\\", \\"datetime\\", \\"hostname\\", \\"uri\\", \\"http_code\\", \\"request_time\\", \\"data_size\\", \\"domain\\"]\\n        username = \\"username\\"\\n        password = \\"password\\"\\n    }\\n}\\n```\\n\\nExecute the command, specify the configuration file, and run Seatunnel to write data to ClickHouse. Here we take the local mode as an example.\\n\\n    ./bin/start-seatunnel.sh --config config/batch.conf -e client -m \'local[2]\'\\n\\n\\n## Conclusion\\n\\nIn this post, we covered how to import data from Hive into ClickHouse using Seatunnel. The data import can be completed quickly through only one configuration file without writing any code, which is very simple.\\n\\nIf you want to know more functions and cases of Seatunnel combined with ClickHouse, Elasticsearch, Kafka, Hadoop, you can go directly to the official website [https://seatunnel.apache.org/](https://seatunnel.apache.org/)\\n\\n-- Power by [InterestingLab](https://github.com/InterestingLab)"},{"id":"spark-execute-elasticsearch","metadata":{"permalink":"/blog/spark-execute-elasticsearch","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2021-12-30-spark-execute-elasticsearch.md","source":"@site/blog/2021-12-30-spark-execute-elasticsearch.md","title":"How to quickly write data to Elasticsearch using Spark","description":"When it comes to writing data to Elasticsearch, the first thing that comes to mind must be Logstash. Logstash is accepted by the majority of users because of its simplicity, scalability, and scalability. However, the ruler is shorter and the inch is longer, and Logstash must have application scenarios that it cannot apply to, such as:","date":"2021-12-30T00:00:00.000Z","formattedDate":"December 30, 2021","tags":[{"label":"Spark","permalink":"/blog/tags/spark"},{"label":"Kafka","permalink":"/blog/tags/kafka"},{"label":"Elasticsearch","permalink":"/blog/tags/elasticsearch"}],"readingTime":5.725,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"spark-execute-elasticsearch","title":"How to quickly write data to Elasticsearch using Spark","tags":["Spark","Kafka","Elasticsearch"]},"prevItem":{"title":"How to quickly import data from Hive into ClickHouse","permalink":"/blog/hive-to-clickhouse"},"nextItem":{"title":"How to use Spark to do OLAP analysis on TiDB","permalink":"/blog/spark-execute-tidb"}},"content":"When it comes to writing data to Elasticsearch, the first thing that comes to mind must be Logstash. Logstash is accepted by the majority of users because of its simplicity, scalability, and scalability. However, the ruler is shorter and the inch is longer, and Logstash must have application scenarios that it cannot apply to, such as:\\n\\n* Massive data ETL\\n* Massive data aggregation\\n* Multi-source data processing\\n\\nIn order to meet these scenarios, many students will choose Spark, use Spark operators to process data, and finally write the processing results to Elasticsearch.\\n\\nOur department used Spark to analyze Nginx logs, counted our web service access, aggregated Nginx logs every minute and finally wrote the results to Elasticsearch, and then used Kibana to configure real-time monitoring of the Dashboard. Both Elasticsearch and Kibana are convenient and practical, but with more and more similar requirements, how to quickly write data to Elasticsearch through Spark has become a big problem for us.\\n\\nToday, I would like to recommend a black technology Seatunnel [https://github.com/apache/incubator-seatunnel](https://github.com/apache/incubator-seatunnel) that can realize fast data writing. It is very easy to use , a high-performance, real-time data processing product that can deal with massive data. It is built on Spark and is easy to use, flexibly configured, and requires no development.\\n\\n![](/doc/image_zh/wd-struct.png)\\n\\n\\n## Kafka to Elasticsearch\\n\\nLike Logstash, Seatunnel also supports multiple types of data input. Here we take the most common Kakfa as the input source as an example to explain how to use Seatunnel to quickly write data to Elasticsearch\\n\\n### Log Sample\\n\\nThe original log format is as follows:\\n```\\n127.0.0.1 elasticsearch.cn 114.250.140.241 0.001s \\"127.0.0.1:80\\" [26/Oct/2018:21:54:32 +0800] \\"GET /article HTTP/1.1\\" 200 123 \\"-\\" - \\"Dalvik/2.1.0 (Linux; U; Android 7.1.1; OPPO R11 Build/NMF26X)\\"\\n```\\n\\n### Elasticsearch Document\\n\\nWe want to count the visits of each domain name in one minute. The aggregated data has the following fields:\\n```\\ndomain String\\nhostname String\\nstatus int\\ndatetime String\\ncount int\\n```\\n\\n## Seatunnel with Elasticsearch\\n\\nNext, I will introduce you in detail, how we read the data in Kafka through Seatunnel, parse and aggregate the data, and finally write the processing results into Elasticsearch.\\n\\n### Seatunnel\\n\\n[Seatunnel](https://github.com/apache/incubator-seatunnel) also has a very rich plug-in that supports reading data from Kafka, HDFS, Hive, performing various data processing, and converting the results Write to Elasticsearch, Kudu or Kafka.\\n\\n### Prerequisites\\n\\nFirst of all, we need to install seatunnel, the installation is very simple, no need to configure system environment variables\\n1. Prepare the Spark environment\\n2. Install Seatunnel\\n3. Configure Seatunnel\\n\\nThe following are simple steps, the specific installation can refer to [Quick Start](/docs/quick-start)\\n\\n```yaml\\ncd /usr/local\\nwget https://archive.apache.org/dist/spark/spark-2.2.0/spark-2.2.0-bin-hadoop2.7.tgz\\ntar -xvf https://archive.apache.org/dist/spark/spark-2.2.0/spark-2.2.0-bin-hadoop2.7.tgz\\nwget https://github.com/InterestingLab/seatunnel/releases/download/v1.1.1/seatunnel-1.1.1.zip\\nunzip seatunnel-1.1.1.zip\\ncd seatunnel-1.1.1\\n\\nvim config/seatunnel-env.sh\\n# Specify the Spark installation path\\nSPARK_HOME=${SPARK_HOME:-/usr/local/spark-2.2.0-bin-hadoop2.7}\\n```\\n\\n### Seatunnel Pipeline\\n\\nLike Logstash, we only need to write a configuration file of Seatunnel Pipeline to complete the data import. I believe that friends who know Logstash can start Seatunnel configuration soon.\\n\\nThe configuration file includes four parts, namely Spark, Input, filter and Output.\\n\\n#### Spark\\n\\n\\nThis part is the related configuration of Spark, which mainly configures the resource size required for Spark execution.\\n```\\nspark {\\n  spark.app.name = \\"seatunnel\\"\\n  spark.executor.instances = 2\\n  spark.executor.cores = 1\\n  spark.executor.memory = \\"1g\\"\\n  spark.streaming.batchDuration = 5\\n}\\n```\\n\\n#### Input\\n\\nThis part defines the data source. The following is a configuration example of reading data from Kafka,\\n\\n```\\nkafkaStream {\\n    topics = \\"seatunnel-es\\"\\n    consumer.bootstrap.servers = \\"localhost:9092\\"\\n    consumer.group.id = \\"seatunnel_es_group\\"\\n    consumer.rebalance.max.retries = 100\\n}\\n```\\n\\n#### Filter\\n\\nIn the Filter section, here we configure a series of conversions, including regular parsing to split logs, time conversion to convert HTTPDATE to a date format supported by Elasticsearch, type conversion for fields of type Number, and data aggregation through SQL\\n```yaml\\nfilter {\\n    # Parse the original log using regex\\n    # The initial data is in the raw_message field\\n    grok {\\n        source_field = \\"raw_message\\"\\n        pattern = \'%{NOTSPACE:hostname}\\\\\\\\s%{NOTSPACE:domain}\\\\\\\\s%{IP:remote_addr}\\\\\\\\s%{NUMBER:request_time}s\\\\\\\\s\\\\\\"%{DATA:upstream_ip}\\\\\\"\\\\\\\\s\\\\\\\\[%{HTTPDATE:timestamp}\\\\\\\\]\\\\\\\\s\\\\\\"%{NOTSPACE:method}\\\\\\\\s%{DATA:url}\\\\\\\\s%{NOTSPACE:http_ver}\\\\\\"\\\\\\\\s%{NUMBER:status}\\\\\\\\s%{NUMBER:body_bytes_send}\\\\\\\\s%{DATA:referer}\\\\\\\\s%{NOTSPACE:cookie_info}\\\\\\\\s\\\\\\"%{DATA:user_agent}\'\\n   }\\n    # Convert data in \\"dd/MMM/yyyy:HH:mm:ss Z\\" format to\\n    # format supported in Elasticsearch\\n    date {\\n        source_field = \\"timestamp\\"\\n        target_field = \\"datetime\\"\\n        source_time_format = \\"dd/MMM/yyyy:HH:mm:ss Z\\"\\n        target_time_format = \\"yyyy-MM-dd\'T\'HH:mm:ss.SSS+08:00\\"\\n    }\\n    ## Aggregate data with SQL\\n    sql {\\n        table_name = \\"access_log\\"\\n        sql = \\"select domain, hostname, int(status), datetime, count(*) from access_log group by domain, hostname, status, datetime\\"\\n    }\\n }\\n```\\n\\n#### Output\\nFinally, we write the processed structured data to Elasticsearch.\\n\\n```yaml\\noutput {\\n    elasticsearch {\\n        hosts = [\\"localhost:9200\\"]\\n        index = \\"seatunnel-${now}\\"\\n        es.batch.size.entries = 100000\\n        index_time_format = \\"yyyy.MM.dd\\"\\n    }\\n}\\n```\\n\\n### Running Seatunnel\\n\\nWe combine the above four-part configuration into our configuration file `config/batch.conf`.\\n\\n    vim config/batch.conf\\n\\n```\\nspark {\\n  spark.app.name = \\"seatunnel\\"\\n  spark.executor.instances = 2\\n  spark.executor.cores = 1\\n  spark.executor.memory = \\"1g\\"\\n  spark.streaming.batchDuration = 5\\n}\\ninput {\\n    kafkaStream {\\n        topics = \\"seatunnel-es\\"\\n        consumer.bootstrap.servers = \\"localhost:9092\\"\\n        consumer.group.id = \\"seatunnel_es_group\\"\\n        consumer.rebalance.max.retries = 100\\n    }\\n}\\nfilter {\\n    # Parse the original log using regex\\n    # The initial data is in the raw_message field\\n    grok {\\n        source_field = \\"raw_message\\"\\n        pattern = \'%{IP:hostname}\\\\\\\\s%{NOTSPACE:domain}\\\\\\\\s%{IP:remote_addr}\\\\\\\\s%{NUMBER:request_time}s\\\\\\\\s\\\\\\"%{DATA:upstream_ip}\\\\\\"\\\\\\\\s\\\\\\\\[%{HTTPDATE:timestamp}\\\\\\\\]\\\\\\\\s\\\\\\"%{NOTSPACE:method}\\\\\\\\s%{DATA:url}\\\\\\\\s%{NOTSPACE:http_ver}\\\\\\"\\\\\\\\s%{NUMBER:status}\\\\\\\\s%{NUMBER:body_bytes_send}\\\\\\\\s%{DATA:referer}\\\\\\\\s%{NOTSPACE:cookie_info}\\\\\\\\s\\\\\\"%{DATA:user_agent}\'\\n   }\\n    # Convert data in \\"dd/MMM/yyyy:HH:mm:ss Z\\" format to\\n    # format supported in Elasticsearch\\n    date {\\n        source_field = \\"timestamp\\"\\n        target_field = \\"datetime\\"\\n        source_time_format = \\"dd/MMM/yyyy:HH:mm:ss Z\\"\\n        target_time_format = \\"yyyy-MM-dd\'T\'HH:mm:00.SSS+08:00\\"\\n    }\\n    ## Aggregate data with SQL\\n    sql {\\n        table_name = \\"access_log\\"\\n        sql = \\"select domain, hostname, status, datetime, count(*) from access_log group by domain, hostname, status, datetime\\"\\n    }\\n }\\noutput {\\n    elasticsearch {\\n        hosts = [\\"localhost:9200\\"]\\n        index = \\"seatunnel-${now}\\"\\n        es.batch.size.entries = 100000\\n        index_time_format = \\"yyyy.MM.dd\\"\\n    }\\n}\\n```\\n\\nExecute the command, specify the configuration file, and run Seatunnel to write data to Elasticsearch. Here we take the local mode as an example.\\n\\n    ./bin/start-seatunnel.sh --config config/batch.conf -e client -m \'local[2]\'\\n\\nFinally, the data written into Elasticsearch is as follows, and with Kibana, real-time monitoring of web services can be realized ^_^.\\n\\n```\\n\\"_source\\": {\\n    \\"domain\\": \\"elasticsearch.cn\\",\\n    \\"hostname\\": \\"localhost\\",\\n    \\"status\\": \\"200\\",\\n    \\"datetime\\": \\"2018-11-26T21:54:00.000+08:00\\",\\n    \\"count\\": 26\\n  }\\n```\\n\\n## Conclusion\\n\\nIn this post, we introduced how to write data from Kafka to Elasticsearch via Seatunnel. You can quickly run a Spark Application with only one configuration file, complete data processing and writing, and do not need to write any code, which is very simple.\\n\\nWhen there are scenarios that Logstash cannot support or the performance of Logstah cannot meet expectations during data processing, you can try to use Seatunnel to solve the problem.\\n\\nIf you want to know more functions and cases of using Seatunnel in combination with Elasticsearch, Kafka and Hadoop, you can go directly to the official website [https://seatunnel.apache.org/](https://seatunnel.apache.org/)\\n\\n\\n**We will publish another article \\"How to Use Spark and Elasticsearch for Interactive Data Analysis\\" in the near future, so stay tuned.**\\n\\n## Contract us\\n* Mailing list : **dev@seatunnel.apache.org**. Send anything to `dev-subscribe@seatunnel.apache.org` and subscribe to the mailing list according to the replies.\\n* Slack: Send a `Request to join SeaTunnel slack` email to the mailing list (`dev@seatunnel.apache.org`), and we will invite you to join (please make sure you are registered with Slack before doing so).\\n* [bilibili B station video](https://space.bilibili.com/1542095008)"},{"id":"spark-execute-tidb","metadata":{"permalink":"/blog/spark-execute-tidb","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2021-12-30-spark-execute-tidb.md","source":"@site/blog/2021-12-30-spark-execute-tidb.md","title":"How to use Spark to do OLAP analysis on TiDB","description":"TiDB is a fusion database product targeting online transaction processing/online analytical processing. Distributed transactions, real-time OLAP and other important features.","date":"2021-12-30T00:00:00.000Z","formattedDate":"December 30, 2021","tags":[{"label":"Spark","permalink":"/blog/tags/spark"},{"label":"TiDB","permalink":"/blog/tags/ti-db"}],"readingTime":6.705,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"spark-execute-tidb","title":"How to use Spark to do OLAP analysis on TiDB","tags":["Spark","TiDB"]},"prevItem":{"title":"How to quickly write data to Elasticsearch using Spark","permalink":"/blog/spark-execute-elasticsearch"},"nextItem":{"title":"How to support Spark StructuredStreaming","permalink":"/blog/spark-structured-streaming"}},"content":"![](https://download.pingcap.com/images/tidb-planet.jpg)\\n\\n[TiDB](https://github.com/pingcap/tidb) is a fusion database product targeting online transaction processing/online analytical processing. Distributed transactions, real-time OLAP and other important features.\\n\\nTiSpark is a product launched by PingCAP to solve the complex OLAP needs of users. It uses the Spark platform and integrates the advantages of TiKV distributed clusters.\\n\\nCompleting OLAP operations with TiSpark directly requires knowledge of Spark and some development work. So, are there some out-of-the-box tools that can help us use TiSpark to complete OLAP analysis on TiDB more quickly?\\n\\nAt present, there is a tool **Seatunnel** in the open source community, the project address [https://github.com/apache/incubator-seatunnel](https://github.com/apache/incubator-seatunnel), which can be based on Spark, Quickly implement TiDB data reading and OLAP analysis based on TiSpark.\\n\\n\\n## Operating TiDB with Seatunnel\\n\\nWe have such a requirement online. Read the website access data of a certain day from TiDB, count the number of visits of each domain name and the status code returned by the service, and finally write the statistical results to another table in TiDB. Let\'s see how Seatunnel implements such a function.\\n\\n### Seatunnel\\n\\n[Seatunnel](https://github.com/apache/incubator-seatunnel) is a very easy-to-use, high-performance, real-time data processing product that can deal with massive data. It is built on Spark. Seatunnel has a very rich set of plugins that support reading data from TiDB, Kafka, HDFS, Kudu, perform various data processing, and then write the results to TiDB, ClickHouse, Elasticsearch or Kafka.\\n\\n\\n#### Ready to work\\n\\n##### 1. Introduction to TiDB table structure\\n\\n**Input** (table where access logs are stored)\\n\\n```\\nCREATE TABLE access_log (\\n    domain VARCHAR(255),\\n    datetime VARCHAR(63),\\n    remote_addr VARCHAR(63),\\n    http_ver VARCHAR(15),\\n    body_bytes_send INT,\\n    status INT,\\n    request_time FLOAT,\\n    url TEXT\\n)\\n```\\n\\n```\\n+-----------------+--------------+------+------+---------+-------+\\n| Field           | Type         | Null | Key  | Default | Extra |\\n+-----------------+--------------+------+------+---------+-------+\\n| domain          | varchar(255) | YES  |      | NULL    |       |\\n| datetime        | varchar(63)  | YES  |      | NULL    |       |\\n| remote_addr     | varchar(63)  | YES  |      | NULL    |       |\\n| http_ver        | varchar(15)  | YES  |      | NULL    |       |\\n| body_bytes_send | int(11)      | YES  |      | NULL    |       |\\n| status          | int(11)      | YES  |      | NULL    |       |\\n| request_time    | float        | YES  |      | NULL    |       |\\n| url             | text         | YES  |      | NULL    |       |\\n+-----------------+--------------+------+------+---------+-------+\\n```\\n\\n**Output** (table where result data is stored)\\n\\n```\\nCREATE TABLE access_collect (\\n    date VARCHAR(23),\\n    domain VARCHAR(63),\\n    status INT,\\n    hit INT\\n)\\n```\\n\\n```\\n+--------+-------------+------+------+---------+-------+\\n| Field  | Type        | Null | Key  | Default | Extra |\\n+--------+-------------+------+------+---------+-------+\\n| date   | varchar(23) | YES  |      | NULL    |       |\\n| domain | varchar(63) | YES  |      | NULL    |       |\\n| status | int(11)     | YES  |      | NULL    |       |\\n| hit    | int(11)     | YES  |      | NULL    |       |\\n+--------+-------------+------+------+---------+-------+\\n```\\n\\n##### 2. Install Seatunnel\\n\\nAfter we have the input and output tables of TiDB, we need to install Seatunnel. The installation is very simple, and there is no need to configure system environment variables\\n1. Prepare the Spark environment\\n2. Install Seatunnel\\n3. Configure Seatunnel\\n\\nThe following are simple steps, the specific installation can refer to [Quick Start](/docs/quick-start)\\n\\n```\\n# Download and install Spark\\ncd /usr/local\\nwget https://archive.apache.org/dist/spark/spark-2.1.0/spark-2.1.0-bin-hadoop2.7.tgz\\ntar -xvf https://archive.apache.org/dist/spark/spark-2.1.0/spark-2.1.0-bin-hadoop2.7.tgz\\nwget\\n# Download and install seatunnel\\nhttps://github.com/InterestingLab/seatunnel/releases/download/v1.2.0/seatunnel-1.2.0.zip\\nunzip seatunnel-1.2.0.zip\\ncd seatunnel-1.2.0\\n\\nvim config/seatunnel-env.sh\\n# Specify the Spark installation path\\nSPARK_HOME=${SPARK_HOME:-/usr/local/spark-2.1.0-bin-hadoop2.7}\\n```\\n\\n\\n### Implement the Seatunnel processing flow\\n\\nWe only need to write a Seatunnel configuration file to read, process, and write data.\\n\\nThe Seatunnel configuration file consists of four parts, `Spark`, `Input`, `Filter` and `Output`. The `Input` part is used to specify the input source of the data, the `Filter` part is used to define various data processing and aggregation, and the `Output` part is responsible for writing the processed data to the specified database or message queue.\\n\\nThe whole processing flow is `Input` -> `Filter` -> `Output`, which constitutes the processing flow (Pipeline) of Seatunnel.\\n\\n> The following is a specific configuration, which is derived from an online practical application, but simplified for demonstration.\\n\\n\\n##### Input (TiDB)\\n\\nThis part of the configuration defines the input source. The following is to read data from a table in TiDB.\\n\\n    input {\\n        tidb {\\n            database = \\"nginx\\"\\n            pre_sql = \\"select * from nginx.access_log\\"\\n            table_name = \\"spark_nginx_input\\"\\n        }\\n    }\\n\\n##### Filter\\n\\nIn the Filter section, here we configure a series of transformations, most of the data analysis requirements are completed in the Filter. Seatunnel provides a wealth of plug-ins enough to meet various data analysis needs. Here we complete the data aggregation operation through the SQL plugin.\\n\\n    filter {\\n        sql {\\n            table_name = \\"spark_nginx_log\\"\\n            sql = \\"select count(*) as hit, domain, status, substring(datetime, 1, 10) as date from spark_nginx_log where substring(datetime, 1, 10)=\'2019-01-20\' group by domain, status, substring(datetime, 1, 10)\\"\\n        }\\n    }\\n\\n\\n##### Output (TiDB)\\n\\nFinally, we write the processed results to another table in TiDB. TiDB Output is implemented through JDBC\\n\\n    output {\\n        tidb {\\n            url = \\"jdbc:mysql://127.0.0.1:4000/nginx?useUnicode=true&characterEncoding=utf8\\"\\n            table = \\"access_collect\\"\\n            user = \\"username\\"\\n            password = \\"password\\"\\n            save_mode = \\"append\\"\\n        }\\n    }\\n\\n##### Spark\\n\\nThis part is related to Spark configuration. It mainly configures the resource size required for Spark execution and other Spark configurations.\\n\\nOur TiDB Input plugin is implemented based on TiSpark, which relies on TiKV cluster and Placement Driver (PD). So we need to specify PD node information and TiSpark related configuration `spark.tispark.pd.addresses` and `spark.sql.extensions`.\\n\\n    spark {\\n      spark.app.name = \\"seatunnel-tidb\\"\\n      spark.executor.instances = 2\\n      spark.executor.cores = 1\\n      spark.executor.memory = \\"1g\\"\\n      # Set for TiSpark\\n      spark.tispark.pd.addresses = \\"localhost:2379\\"\\n      spark.sql.extensions = \\"org.apache.spark.sql.TiExtensions\\"\\n    }\\n\\n\\n#### Run Seatunnel\\n\\nWe combine the above four parts into our final configuration file `conf/tidb.conf`\\n\\n```\\nspark {\\n    spark.app.name = \\"seatunnel-tidb\\"\\n    spark.executor.instances = 2\\n    spark.executor.cores = 1\\n    spark.executor.memory = \\"1g\\"\\n    # Set for TiSpark\\n    spark.tispark.pd.addresses = \\"localhost:2379\\"\\n    spark.sql.extensions = \\"org.apache.spark.sql.TiExtensions\\"\\n}\\ninput {\\n    tidb {\\n        database = \\"nginx\\"\\n        pre_sql = \\"select * from nginx.access_log\\"\\n        table_name = \\"spark_table\\"\\n    }\\n}\\nfilter {\\n    sql {\\n        table_name = \\"spark_nginx_log\\"\\n        sql = \\"select count(*) as hit, domain, status, substring(datetime, 1, 10) as date from spark_nginx_log where substring(datetime, 1, 10)=\'2019-01-20\' group by domain, status, substring(datetime, 1, 10)\\"\\n    }\\n}\\noutput {\\n    tidb {\\n        url = \\"jdbc:mysql://127.0.0.1:4000/nginx?useUnicode=true&characterEncoding=utf8\\"\\n        table = \\"access_collect\\"\\n        user = \\"username\\"\\n        password = \\"password\\"\\n        save_mode = \\"append\\"\\n    }\\n}\\n```\\n\\nExecute the command, specify the configuration file, and run Seatunnel to implement our data processing logic.\\n\\n* Local\\n\\n> ./bin/start-seatunnel.sh --config config/tidb.conf --deploy-mode client --master \'local[2]\'\\n\\n* yarn-client\\n\\n> ./bin/start-seatunnel.sh --config config/tidb.conf --deploy-mode client --master yarn\\n\\n* yarn-cluster\\n\\n> ./bin/start-seatunnel.sh --config config/tidb.conf --deploy-mode cluster -master yarn\\n\\nIf it is a local test and verification logic, you can use the local mode (Local). Generally, in the production environment, the `yarn-client` or `yarn-cluster` mode is used.\\n\\n#### test result\\n\\n```\\nmysql> select * from access_collect;\\n+------------+--------+--------+------+\\n| date       | domain | status | hit  |\\n+------------+--------+--------+------+\\n| 2019-01-20 | b.com  |    200 |   63 |\\n| 2019-01-20 | a.com  |    200 |   85 |\\n+------------+--------+--------+------+\\n2 rows in set (0.21 sec)\\n```\\n\\n\\n\\n## Conclusion\\n\\nIn this article, we introduced how to use Seatunnel to read data from TiDB, do simple data processing and write it to another table in TiDB. Data can be imported quickly with only one configuration file without writing any code.\\n\\nIn addition to supporting TiDB data sources, Seatunnel also supports Elasticsearch, Kafka, Kudu, ClickHouse and other data sources.\\n\\n**At the same time, we are developing an important function, which is to use the transaction features of TiDB in Seatunnel to realize streaming data processing from Kafka to TiDB, and support Exactly-Once data from end (Kafka) to end (TiDB). consistency. **\\n\\nIf you want to know more functions and cases of Seatunnel combined with TiDB, ClickHouse, Elasticsearch and Kafka, you can go directly to the official website [https://seatunnel.apache.org/](https://seatunnel.apache.org/)\\n\\n## Contract us\\n* Mailing list : **dev@seatunnel.apache.org**. Send anything to `dev-subscribe@seatunnel.apache.org` and subscribe to the mailing list according to the replies.\\n* Slack: Send a `Request to join SeaTunnel slack` email to the mailing list (`dev@seatunnel.apache.org`), and we will invite you to join (please make sure you are registered with Slack before doing so).\\n* [bilibili B station video](https://space.bilibili.com/1542095008)\\n\\n-- Power by [InterestingLab](https://github.com/InterestingLab)"},{"id":"spark-structured-streaming","metadata":{"permalink":"/blog/spark-structured-streaming","editUrl":"https://github.com/apache/incubator-seatunnel-website/edit/main/blog/2021-12-30-spark-structured-streaming.md","source":"@site/blog/2021-12-30-spark-structured-streaming.md","title":"How to support Spark StructuredStreaming","description":"Foreword","date":"2021-12-30T00:00:00.000Z","formattedDate":"December 30, 2021","tags":[{"label":"Spark","permalink":"/blog/tags/spark"},{"label":"StructuredStreaming","permalink":"/blog/tags/structured-streaming"}],"readingTime":7.8,"hasTruncateMarker":false,"authors":[],"frontMatter":{"slug":"spark-structured-streaming","title":"How to support Spark StructuredStreaming","tags":["Spark","StructuredStreaming"]},"prevItem":{"title":"How to use Spark to do OLAP analysis on TiDB","permalink":"/blog/spark-execute-tidb"}},"content":"### Foreword\\n\\nStructuredStreaming is a newly opened module after Spark 2.0. Compared with SparkStreaming, it has some prominent advantages:<br/> &emsp;&emsp;First, it can achieve lower latency;<br/>\\n&emsp;&emsp;Second, real-time aggregation can be done, such as real-time calculation of the total sales of each commodity every day;<br/>\\n&emsp;&emsp;Third, you can do the association between streams, for example, to calculate the click rate of an advertisement, you need to associate the exposure record of the advertisement with the click record. <br/>\\nThe above points may be cumbersome or difficult to implement if using SparkStreaming, but it will be easier to implement using StructuredStreaming.\\n### How to use StructuredStreaming\\nMaybe you have not studied StructuredStreaming in detail, but found that StructuredStreaming can solve your needs very well. How to quickly use StructuredStreaming to solve your needs? Currently there is a tool **Seatunnel** in the community, the project address: [https://github.com/apache/incubator-seatunnel](https://github.com/apache/incubator-seatunnel) ,\\nIt can help you use StructuredStreaming to complete your needs efficiently and at low cost.\\n\\n### Seatunnel\\n\\nSeatunnel is a very easy-to-use, high-performance, real-time data processing product that can deal with massive data. It is built on Spark. Seatunnel has a very rich set of plug-ins, supports reading data from Kafka, HDFS, Kudu, performs various data processing, and writes the results to ClickHouse, Elasticsearch or Kafka\\n\\n### Ready to work\\n\\nFirst we need to install Seatunnel, the installation is very simple, no need to configure system environment variables\\n\\n1. Prepare the Spark environment\\n2. Install Seatunnel\\n3. Configure Seatunnel\\n\\nThe following are simple steps, the specific installation can refer to [Quick Start](/docs/quick-start)\\n\\n```\\ncd /usr/local\\nwget https://archive.apache.org/dist/spark/spark-2.2.0/spark-2.2.0-bin-hadoop2.7.tgz\\ntar -xvf https://archive.apache.org/dist/spark/spark-2.2.0/spark-2.2.0-bin-hadoop2.7.tgz\\nwget https://github.com/InterestingLab/seatunnel/releases/download/v1.3.0/seatunnel-1.3.0.zip\\nunzip seatunnel-1.3.0.zip\\ncd seatunnel-1.3.0\\n\\nvim config/seatunnel-env.sh\\n# Specify the Spark installation path\\nSPARK_HOME=${SPARK_HOME:-/usr/local/spark-2.2.0-bin-hadoop2.7}\\n```\\n\\n### Seatunnel Pipeline\\n\\nWe only need to write a configuration file of Seatunnel Pipeline to complete the data import.\\n\\nThe configuration file includes four parts, namely Spark, Input, filter and Output.\\n\\n#### Spark\\n\\nThis part is the related configuration of Spark, which mainly configures the resource size required for Spark execution.\\n\\n```\\nspark {\\n  spark.app.name = \\"seatunnel\\"\\n  spark.executor.instances = 2\\n  spark.executor.cores = 1\\n  spark.executor.memory = \\"1g\\"\\n}\\n```\\n\\n#### Input\\n\\nBelow is an example of reading data from kafka\\n\\n```\\nkafkaStream {\\n    topics = \\"seatunnel\\"\\n    consumer.bootstrap.servers = \\"localhost:9092\\"\\n    schema = \\"{\\\\\\"name\\\\\\":\\\\\\"string\\\\\\",\\\\\\"age\\\\\\":\\\\\\"integer\\\\\\",\\\\\\"addrs\\\\\\":{\\\\\\"country\\\\\\":\\\\\\"string\\\\\\",\\\\\\"city\\\\\\":\\\\\\"string\\\\\\"}}\\"\\n}\\n```\\n\\nThrough the above configuration, the data in kafka can be read. Topics is the topic of kafka to be subscribed to. Subscribing to multiple topics at the same time can be separated by commas. Consumer.bootstrap.servers is the list of Kafka servers, and schema is optional. Because the value read by StructuredStreaming from kafka (official fixed field value) is of binary type, see http://spark.apache.org/docs/latest/structured-streaming-kafka-integration.html\\nBut if you are sure that the data in your kafka is a json string, you can specify the schema, and the input plugin will parse it according to the schema you specify\\n\\n#### Filter\\n\\nHere is a simple filter example\\n\\n```\\nfilter{\\n    sql{\\n        table_name = \\"student\\"\\n        sql = \\"select name,age from student\\"\\n    }\\n}\\n```\\n`table_name` is the registered temporary table name for easy use in the following sql\\n\\n#### Output\\n\\nThe processed data is output, assuming that our output is also kafka\\n\\n```\\noutput{\\n    kafka {\\n        topic = \\"seatunnel\\"\\n        producer.bootstrap.servers = \\"localhost:9092\\"\\n        streaming_output_mode = \\"update\\"\\n        checkpointLocation = \\"/your/path\\"\\n    }\\n}\\n```\\n\\n`topic` is the topic you want to output, `producer.bootstrap.servers` is a list of kafka clusters, `streaming_output_mode` is an output mode parameter of StructuredStreaming, there are three types of `append|update|complete`, for details, see the documentation http: //spark.apache.org/docs/latest/structured-streaming-programming-guide.html#output-modes\\n\\n`checkpointLocation` is the checkpoint path of StructuredStreaming. If configured, this directory will store the running information of the program. For example, if the program exits and restarts, it will continue to consume the last offset.\\n\\n### Scenario Analysis\\n\\nThe above is a simple example. Next, we will introduce a slightly more complex business scenario.\\n\\n#### Scenario 1: Real-time aggregation scenario\\n\\nSuppose there is now a mall with 10 kinds of products on it, and now it is necessary to find the daily sales of each product in real time, and even to find the number of buyers of each product (not very precise).\\nThe huge advantage of this is that massive data can be aggregated during real-time processing, and there is no need to write data into the data warehouse first, and then run offline scheduled tasks for aggregation.\\nIt is still very convenient to operate.\\n\\nThe data of kafka is as follows\\n\\n```\\n{\\"good_id\\":\\"abc\\",\\"price\\":300,\\"user_id\\":123456,\\"time\\":1553216320}\\n```\\n\\nSo how do we use Seatunnel to fulfill this requirement, of course, we only need to configure it.\\n\\n```\\n#The configuration in spark is configured according to business requirements\\nspark {\\n  spark.app.name = \\"seatunnel\\"\\n  spark.executor.instances = 2\\n  spark.executor.cores = 1\\n  spark.executor.memory = \\"1g\\"\\n}\\n\\n#configure input\\ninput {\\n    kafkaStream {\\n        topics = \\"good_topic\\"\\n        consumer.bootstrap.servers = \\"localhost:9092\\"\\n        schema = \\"{\\\\\\"good_id\\\\\\":\\\\\\"string\\\\\\",\\\\\\"price\\\\\\":\\\\\\"integer\\\\\\",\\\\\\"user_id\\\\\\":\\\\\\"Long\\\\\\",\\\\\\"time\\\\\\":\\\\\\"Long\\\\\\"}\\"\\n    }\\n}\\n\\n#configure filter    \\nfilter {\\n    \\n    #When the program is doing aggregation, it will internally store the aggregation state of the program since startup, which will lead to OOM over time. If the watermark is set, the program will automatically clean up the state other than the watermark.\\n    #Here means use the ts field to set the watermark, the limit is 1 day\\n\\n    Watermark {\\n        time_field = \\"time\\"\\n        time_type = \\"UNIX\\"              #UNIX represents a timestamp with a time field of 10, and other types can be found in the plugin documentation for details.\\n        time_pattern = \\"yyyy-MM-dd\\"     #The reason why the ts is assigned to the day is because the daily sales are sought, if the hourly sales are sought, the hour can be assigned `yyyy-MM-dd HH`\\n        delay_threshold = \\"1 day\\"\\n        watermark_field = \\"ts\\"          #After setting the watermark, a new field will be added, `ts` is the name of this field\\n    }\\n    \\n    #The reason for group by ts is to make the watermark take effect, approx_count_distinct is an estimate, not an exact count_distinct\\n    sql {\\n        table_name = \\"good_table_2\\"\\n        sql = \\"select good_id,sum(price) total,\\tapprox_count_distinct(user_id) person from good_table_2 group by ts,good_id\\"\\n    }\\n}\\n\\n#Next we choose to output the results to Kafka in real time\\noutput{\\n    kafka {\\n        topic = \\"seatunnel\\"\\n        producer.bootstrap.servers = \\"localhost:9092\\"\\n        streaming_output_mode = \\"update\\"\\n        checkpointLocation = \\"/your/path\\"\\n    }\\n}\\n\\n```\\nThe above configuration is complete, start Seatunnel, and you can get the results you want.\\n\\n#### Scenario 2: Multiple stream association scenarios\\n\\nSuppose you have placed an advertisement on a certain platform, and now you need to calculate the CTR (click-through rate) of each advertisement in real time. The data comes from two topics, one is the advertisement exposure log, and the other is the advertisement click log.\\nAt this point, we need to associate the two stream data together for calculation, and Seatunnel also supports this function recently, let\'s take a look at how to do it:\\n\\n\\nClick on topic data format\\n\\n```\\n{\\"ad_id\\":\\"abc\\",\\"click_time\\":1553216320,\\"user_id\\":12345}\\n\\n```\\n\\nExposure topic data format\\n\\n```\\n{\\"ad_id\\":\\"abc\\",\\"show_time\\":1553216220,\\"user_id\\":12345}\\n\\n```\\n\\n```\\n#The configuration in spark is configured according to business requirements\\nspark {\\n  spark.app.name = \\"seatunnel\\"\\n  spark.executor.instances = 2\\n  spark.executor.cores = 1\\n  spark.executor.memory = \\"1g\\"\\n}\\n\\n#configure input\\ninput {\\n    \\n    kafkaStream {\\n        topics = \\"click_topic\\"\\n        consumer.bootstrap.servers = \\"localhost:9092\\"\\n        schema = \\"{\\\\\\"ad_id\\\\\\":\\\\\\"string\\\\\\",\\\\\\"user_id\\\\\\":\\\\\\"Long\\\\\\",\\\\\\"click_time\\\\\\":\\\\\\"Long\\\\\\"}\\"\\n        table_name = \\"click_table\\"\\n    }\\n    \\n    kafkaStream {\\n        topics = \\"show_topic\\"\\n        consumer.bootstrap.servers = \\"localhost:9092\\"\\n        schema = \\"{\\\\\\"ad_id\\\\\\":\\\\\\"string\\\\\\",\\\\\\"user_id\\\\\\":\\\\\\"Long\\\\\\",\\\\\\"show_time\\\\\\":\\\\\\"Long\\\\\\"}\\"\\n        table_name = \\"show_table\\"\\n    }\\n}\\n\\nfilter {\\n    \\n    #Left association right table must set watermark\\n    #Right off left and right tables must set watermark\\n    #http://spark.apache.org/docs/latest/structured-streaming-programming-guide.html#inner-joins-with-optional-watermarking\\n    Watermark {\\n              source_table_name = \\"click_table\\" #Here you can specify to add a watermark to a temporary table. If you don\'t specify it, it will be the first one in the input.\\n              time_field = \\"time\\"\\n              time_type = \\"UNIX\\"               \\n              delay_threshold = \\"3 hours\\"\\n              watermark_field = \\"ts\\" \\n              result_table_name = \\"click_table_watermark\\" #After adding the watermark, it can be registered as a temporary table, which is convenient for subsequent use in sql\\n    }\\n    \\n    Watermark {\\n                source_table_name = \\"show_table\\" \\n                time_field = \\"time\\"\\n                time_type = \\"UNIX\\"               \\n                delay_threshold = \\"2 hours\\"\\n                watermark_field = \\"ts\\" \\n                result_table_name = \\"show_table_watermark\\" \\n     }\\n    \\n    \\n    sql {\\n        table_name = \\"show_table_watermark\\"\\n        sql = \\"select a.ad_id,count(b.user_id)/count(a.user_id) ctr from show_table_watermark as a left join click_table_watermark as b on a.ad_id = b.ad_id and a.user_id = b.user_id \\"\\n    }\\n    \\n}\\n\\n#Next we choose to output the results to Kafka in real time\\noutput {\\n    kafka {\\n        topic = \\"seatunnel\\"\\n        producer.bootstrap.servers = \\"localhost:9092\\"\\n        streaming_output_mode = \\"append\\" #Stream association only supports append mode\\n        checkpointLocation = \\"/your/path\\"\\n    }\\n}\\n```\\nThrough configuration, the case of stream association is also completed here.\\n\\n### Conclusion\\nThrough configuration, you can quickly use StructuredStreaming for real-time data processing, but you still need to understand some concepts of StructuredStreaming, such as the watermark mechanism, and the output mode of the program.\\n\\nFinally, Seatunnel also supports spark streaming and spark batching of course.\\nIf you are also interested in these two, you can read our previous article \\"[How to quickly import data from Hive into ClickHouse](2021-12-30-hive-to-clickhouse.md)\\",\\n\\"[Excellent data engineer, how to use Spark to do OLAP analysis on TiDB] (2021-12-30-spark-execute-tidb.md)\\",\\n\\"[How to use Spark to quickly write data to Elasticsearch] (2021-12-30-spark-execute-elasticsearch.md)\\"\\n\\nIf you want to know more functions and cases of Seatunnel combined with HBase, ClickHouse, Elasticsearch, Kafka, MySQL and other data sources, you can go directly to the official website [https://seatunnel.apache.org/](https://seatunnel.apache. org/)\\n\\n## \u8054\u7cfb\u6211\u4eec\\n* Mailing list : **dev@seatunnel.apache.org**. Send anything to `dev-subscribe@seatunnel.apache.org` and subscribe to the mailing list according to the replies.\\n* Slack: Send a `Request to join SeaTunnel slack` email to the mailing list (`dev@seatunnel.apache.org`), and we will invite you to join (please make sure you are registered with Slack before doing so).\\n* [bilibili B station video](https://space.bilibili.com/1542095008)"}]}')}}]);