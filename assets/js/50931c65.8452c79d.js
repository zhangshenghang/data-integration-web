"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[24231],{15680:(e,n,t)=>{t.d(n,{xA:()=>d,yg:()=>y});var r=t(96540);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=p(t),u=a,y=m["".concat(s,".").concat(u)]||m[u]||c[u]||o;return t?r.createElement(y,l(l({ref:n},d),{},{components:t})):r.createElement(y,l({ref:n},d))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=u;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i[m]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=t[p];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},74387:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(58168),a=(t(96540),t(15680));const o={},l="RowKindExtractor",i={unversionedId:"transform-v2/rowkind-extractor",id:"transform-v2/rowkind-extractor",title:"RowKindExtractor",description:"RowKindExtractor transform plugin",source:"@site/docs/transform-v2/rowkind-extractor.md",sourceDirName:"transform-v2",slug:"/transform-v2/rowkind-extractor",permalink:"/docs/transform-v2/rowkind-extractor",draft:!1,editUrl:"https://github.com/apache/incubator-seatunnel-website/edit/main/docs/transform-v2/rowkind-extractor.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Replace",permalink:"/docs/transform-v2/replace"},next:{title:"Split",permalink:"/docs/transform-v2/split"}},s={},p=[{value:"Description",id:"description",level:2},{value:"Options",id:"options",level:2},{value:"custom_field_name string",id:"custom_field_name-string",level:3},{value:"transform_type enum",id:"transform_type-enum",level:3},{value:"Examples",id:"examples",level:2}],d={toc:p},m="wrapper";function c(e){let{components:n,...t}=e;return(0,a.yg)(m,(0,r.A)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"rowkindextractor"},"RowKindExtractor"),(0,a.yg)("blockquote",null,(0,a.yg)("p",{parentName:"blockquote"},"RowKindExtractor transform plugin")),(0,a.yg)("h2",{id:"description"},"Description"),(0,a.yg)("p",null,"transform cdc row to append only row that contains the cdc RowKind. ",(0,a.yg)("br",null),"\nExample: ",(0,a.yg)("br",null),"\nCDC row: -D 1, test1, test2 ",(0,a.yg)("br",null),"\ntransformed Row: +I 1,test1,test2,DELETE"),(0,a.yg)("h2",{id:"options"},"Options"),(0,a.yg)("table",null,(0,a.yg)("thead",{parentName:"table"},(0,a.yg)("tr",{parentName:"thead"},(0,a.yg)("th",{parentName:"tr",align:null},"name"),(0,a.yg)("th",{parentName:"tr",align:null},"type"),(0,a.yg)("th",{parentName:"tr",align:null},"required"),(0,a.yg)("th",{parentName:"tr",align:null},"default value"))),(0,a.yg)("tbody",{parentName:"table"},(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"custom_field_name"),(0,a.yg)("td",{parentName:"tr",align:null},"string"),(0,a.yg)("td",{parentName:"tr",align:null},"yes"),(0,a.yg)("td",{parentName:"tr",align:null},"row_kind")),(0,a.yg)("tr",{parentName:"tbody"},(0,a.yg)("td",{parentName:"tr",align:null},"transform_type"),(0,a.yg)("td",{parentName:"tr",align:null},"enum"),(0,a.yg)("td",{parentName:"tr",align:null},"yes"),(0,a.yg)("td",{parentName:"tr",align:null},"SHORT")))),(0,a.yg)("h3",{id:"custom_field_name-string"},"custom_field_name ","[string]"),(0,a.yg)("p",null,"Custom field name of the RowKind field "),(0,a.yg)("h3",{id:"transform_type-enum"},"transform_type ","[enum]"),(0,a.yg)("p",null,"the RowKind field value formatting , the option can be ",(0,a.yg)("inlineCode",{parentName:"p"},"SHORT")," or ",(0,a.yg)("inlineCode",{parentName:"p"},"FULL")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"SHORT")," : +I, -U , +U, -D\n",(0,a.yg)("inlineCode",{parentName:"p"},"FULL")," : INSERT, UPDATE_BEFORE, UPDATE_AFTER , DELETE"),(0,a.yg)("h2",{id:"examples"},"Examples"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-yaml"},'\nenv {\n    parallelism = 1\n    job.mode = "BATCH"\n}\n\nsource {\n    FakeSource {\n        schema = {\n            fields {\n                pk_id = bigint\n                name = string\n                score = int\n            }\n            primaryKey {\n                name = "pk_id"\n                columnNames = [pk_id]\n            }\n        }\n        rows = [\n            {\n                kind = INSERT\n                fields = [1, "A", 100]\n            },\n            {\n                kind = INSERT\n                fields = [2, "B", 100]\n            },\n            {\n                kind = INSERT\n                fields = [3, "C", 100]\n            },\n            {\n                kind = INSERT\n                fields = [4, "D", 100]\n            },\n            {\n                kind = UPDATE_BEFORE\n                fields = [1, "A", 100]\n            },\n            {\n                kind = UPDATE_AFTER\n                fields = [1, "F", 100]\n            }\n            {\n                kind = UPDATE_BEFORE\n                fields = [2, "B", 100]\n            },\n            {\n                kind = UPDATE_AFTER\n                fields = [2, "G", 100]\n            },\n            {\n                kind = DELETE\n                fields = [3, "C", 100]\n            },\n            {\n                kind = DELETE\n                fields = [4, "D", 100]\n            }\n        ]\n    }\n}\n\ntransform {\n  RowKindExtractor {\n        custom_field_name = "custom_name"\n        transform_type = FULL\n        result_table_name = "trans_result"\n    }\n}\n\nsink {\n  Console {\n    source_table_name = "custom_name"\n  }\n}\n\n')))}c.isMDXComponent=!0}}]);