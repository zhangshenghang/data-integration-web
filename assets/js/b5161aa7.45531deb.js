"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[50671],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,g=m["".concat(s,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},99739:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var a=n(58168),r=(n(96540),n(15680));const o={sidebar_position:3},l="Source Common Options",i={unversionedId:"connector-v2/source-common-options",id:"connector-v2/source-common-options",title:"Source Common Options",description:"Common parameters of source connectors",source:"@site/docs/connector-v2/source-common-options.md",sourceDirName:"connector-v2",slug:"/connector-v2/source-common-options",permalink:"/docs/connector-v2/source-common-options",draft:!1,editUrl:"https://github.com/apache/incubator-seatunnel-website/edit/main/docs/connector-v2/source-common-options.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"docs",previous:{title:"Ogg Format",permalink:"/docs/connector-v2/formats/ogg-json"},next:{title:"Sink Common Options",permalink:"/docs/connector-v2/sink-common-options"}},s={},c=[{value:"Task Example",id:"task-example",level:2},{value:"Simple:",id:"simple",level:3},{value:"Multiple Pipeline Simple",id:"multiple-pipeline-simple",level:3}],p={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.yg)(m,(0,a.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"source-common-options"},"Source Common Options"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"Common parameters of source connectors")),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Name"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Required"),(0,r.yg)("th",{parentName:"tr",align:null},"Default"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"result_table_name"),(0,r.yg)("td",{parentName:"tr",align:null},"String"),(0,r.yg)("td",{parentName:"tr",align:null},"No"),(0,r.yg)("td",{parentName:"tr",align:null},"-"),(0,r.yg)("td",{parentName:"tr",align:null},"When ",(0,r.yg)("inlineCode",{parentName:"td"},"result_table_name")," is not specified, the data processed by this plugin will not be registered as a data set ",(0,r.yg)("inlineCode",{parentName:"td"},"(dataStream/dataset)")," that can be directly accessed by other plugins, or called a temporary table ",(0,r.yg)("inlineCode",{parentName:"td"},"(table)")," ",(0,r.yg)("br",null),"When ",(0,r.yg)("inlineCode",{parentName:"td"},"result_table_name")," is specified, the data processed by this plugin will be registered as a data set ",(0,r.yg)("inlineCode",{parentName:"td"},"(dataStream/dataset)")," that can be directly accessed by other plugins, or called a temporary table ",(0,r.yg)("inlineCode",{parentName:"td"},"(table)")," . The data set ",(0,r.yg)("inlineCode",{parentName:"td"},"(dataStream/dataset)")," registered here can be directly accessed by other plugins by specifying ",(0,r.yg)("inlineCode",{parentName:"td"},"source_table_name")," .")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},"parallelism"),(0,r.yg)("td",{parentName:"tr",align:null},"Int"),(0,r.yg)("td",{parentName:"tr",align:null},"No"),(0,r.yg)("td",{parentName:"tr",align:null},"-"),(0,r.yg)("td",{parentName:"tr",align:null},"When ",(0,r.yg)("inlineCode",{parentName:"td"},"parallelism")," is not specified, the ",(0,r.yg)("inlineCode",{parentName:"td"},"parallelism")," in env is used by default. ",(0,r.yg)("br",null),"When parallelism is specified, it will override the parallelism in env.")))),(0,r.yg)("h1",{id:"important-note"},"Important note"),(0,r.yg)("p",null,"When the job configuration ",(0,r.yg)("inlineCode",{parentName:"p"},"result_table_name")," you must set the ",(0,r.yg)("inlineCode",{parentName:"p"},"source_table_name")," parameter"),(0,r.yg)("h2",{id:"task-example"},"Task Example"),(0,r.yg)("h3",{id:"simple"},"Simple:"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"This registers a stream or batch data source and returns the table name ",(0,r.yg)("inlineCode",{parentName:"p"},"fake_table")," at registration")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'source {\n    FakeSourceStream {\n        result_table_name = "fake_table"\n    }\n}\n')),(0,r.yg)("h3",{id:"multiple-pipeline-simple"},"Multiple Pipeline Simple"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"This is to convert the data source fake and write it to two different sinks")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-bash"},'env {\n  job.mode = "BATCH"\n}\n\nsource {\n  FakeSource {\n    result_table_name = "fake"\n    row.num = 100\n    schema = {\n      fields {\n        id = "int"\n        name = "string"\n        age = "int"\n        c_timestamp = "timestamp"\n        c_date = "date"\n        c_map = "map<string, string>"\n        c_array = "array<int>"\n        c_decimal = "decimal(30, 8)"\n        c_row = {\n          c_row = {\n            c_int = int\n          }\n        }\n      }\n    }\n  }\n}\n\ntransform {\n  Sql {\n    source_table_name = "fake"\n    result_table_name = "fake1"\n    # the query table name must same as field \'source_table_name\'\n    query = "select id, regexp_replace(name, \'.+\', \'b\') as name, age+1 as age, pi() as pi, c_timestamp, c_date, c_map, c_array, c_decimal, c_row from fake"\n  }\n  # The SQL transform support base function and criteria operation\n  # But the complex SQL unsupported yet, include: multi source table/rows JOIN and AGGREGATE operation and the like\n}\n\nsink {\n  Console {\n    source_table_name = "fake1"\n  }\n   Console {\n    source_table_name = "fake"\n  }\n}\n')))}u.isMDXComponent=!0}}]);