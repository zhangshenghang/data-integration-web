"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[361],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),m=a,g=u["".concat(c,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(g,l(l({ref:t},p),{},{components:n})):r.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},60763:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(58168),a=(n(96540),n(15680));const o={},l="Intro To Connector V2 Features",i={unversionedId:"concept/connector-v2-features",id:"concept/connector-v2-features",title:"Intro To Connector V2 Features",description:"Differences Between Connector V2 And V1",source:"@site/docs/concept/connector-v2-features.md",sourceDirName:"concept",slug:"/concept/connector-v2-features",permalink:"/docs/concept/connector-v2-features",draft:!1,editUrl:"https://github.com/apache/seatunnel-website/edit/main/docs/concept/connector-v2-features.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Intro To Config File",permalink:"/docs/concept/config"},next:{title:"Intro To Schema Feature",permalink:"/docs/concept/schema-feature"}},c={},s=[{value:"Differences Between Connector V2 And V1",id:"differences-between-connector-v2-and-v1",level:2},{value:"Source Connector Features",id:"source-connector-features",level:2},{value:"exactly-once",id:"exactly-once",level:3},{value:"column projection",id:"column-projection",level:3},{value:"batch",id:"batch",level:3},{value:"stream",id:"stream",level:3},{value:"parallelism",id:"parallelism",level:3},{value:"multimodal",id:"multimodal",level:3},{value:"support user-defined split",id:"support-user-defined-split",level:3},{value:"support multiple table read",id:"support-multiple-table-read",level:3},{value:"Sink Connector Features",id:"sink-connector-features",level:2},{value:"exactly-once",id:"exactly-once-1",level:3},{value:"cdc(change data capture)",id:"cdcchange-data-capture",level:3},{value:"support multiple table write",id:"support-multiple-table-write",level:3},{value:"multimodal",id:"multimodal-1",level:3}],p={toc:s},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.yg)(u,(0,r.A)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"intro-to-connector-v2-features"},"Intro To Connector V2 Features"),(0,a.yg)("h2",{id:"differences-between-connector-v2-and-v1"},"Differences Between Connector V2 And V1"),(0,a.yg)("p",null,"Since ",(0,a.yg)("a",{parentName:"p",href:"https://github.com/apache/seatunnel/issues/1608"},"https://github.com/apache/seatunnel/issues/1608")," We Added Connector V2 Features.\nConnector V2 is a connector defined based on the SeaTunnel Connector API interface. Unlike Connector V1, V2 supports the following features:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Multi Engine Support")," SeaTunnel Connector API is an engine independent API. The connectors developed based on this API can run in multiple engines. Currently, Flink and Spark are supported, and we will support other engines in the future."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Multi Engine Version Support")," Decoupling the connector from the engine through the translation layer solves the problem that most connectors need to modify the code in order to support a new version of the underlying engine."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Unified Batch And Stream")," Connector V2 can perform batch processing or streaming processing. We do not need to develop connectors for batch and stream separately."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Multiplexing JDBC/Log connection.")," Connector V2 supports JDBC resource reuse and sharing database log parsing."),(0,a.yg)("li",{parentName:"ul"},(0,a.yg)("strong",{parentName:"li"},"Multimodal Data Integration")," Connector V2 supports multimodal data integration, including structured and unstructured text data, video, images, binary files, etc.")),(0,a.yg)("h2",{id:"source-connector-features"},"Source Connector Features"),(0,a.yg)("p",null,"Source connectors have some common core features, and each source connector supports them to varying degrees."),(0,a.yg)("h3",{id:"exactly-once"},"exactly-once"),(0,a.yg)("p",null,"If each piece of data in the data source will only be sent downstream by the source once, we think this source connector supports exactly once."),(0,a.yg)("p",null,"In SeaTunnel, we can save the read ",(0,a.yg)("strong",{parentName:"p"},"Split")," and its ",(0,a.yg)("strong",{parentName:"p"},"offset")," (The position of the read data in split at that time,\nsuch as line number, byte size, offset, etc.) as ",(0,a.yg)("strong",{parentName:"p"},"StateSnapshot")," when checkpointing. If the task restarted, we will get the last ",(0,a.yg)("strong",{parentName:"p"},"StateSnapshot"),"\nand then locate the ",(0,a.yg)("strong",{parentName:"p"},"Split")," and ",(0,a.yg)("strong",{parentName:"p"},"offset")," read last time and continue to send data downstream."),(0,a.yg)("p",null,"For example ",(0,a.yg)("inlineCode",{parentName:"p"},"File"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"Kafka"),"."),(0,a.yg)("h3",{id:"column-projection"},"column projection"),(0,a.yg)("p",null,"If the connector supports reading only specified columns from the data source (Note that if you read all columns first and then filter unnecessary columns through the schema, this method is not a real column projection)"),(0,a.yg)("p",null,"For example ",(0,a.yg)("inlineCode",{parentName:"p"},"JDBCSource")," can use sql to define reading columns."),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"KafkaSource")," will read all content from topic and then use ",(0,a.yg)("inlineCode",{parentName:"p"},"schema")," to filter unnecessary columns, This is not ",(0,a.yg)("inlineCode",{parentName:"p"},"column projection"),"."),(0,a.yg)("h3",{id:"batch"},"batch"),(0,a.yg)("p",null,"Batch Job Mode, The data read is bounded and the job will stop after completing all data read."),(0,a.yg)("h3",{id:"stream"},"stream"),(0,a.yg)("p",null,"Streaming Job Mode, The data read is unbounded and the job never stop."),(0,a.yg)("h3",{id:"parallelism"},"parallelism"),(0,a.yg)("p",null,"Parallelism Source Connector support config ",(0,a.yg)("inlineCode",{parentName:"p"},"parallelism"),", every parallelism will create a task to read the data.\nIn the ",(0,a.yg)("strong",{parentName:"p"},"Parallelism Source Connector"),", the source will be split into multiple splits, and then the enumerator will allocate the splits to the SourceReader for processing."),(0,a.yg)("h3",{id:"multimodal"},"multimodal"),(0,a.yg)("p",null,"Support multimodal data integration, including structured and unstructured text data, video, images, binary files, etc."),(0,a.yg)("h3",{id:"support-user-defined-split"},"support user-defined split"),(0,a.yg)("p",null,"User can config the split rule."),(0,a.yg)("h3",{id:"support-multiple-table-read"},"support multiple table read"),(0,a.yg)("p",null,"Supports reading multiple tables in one SeaTunnel job"),(0,a.yg)("h2",{id:"sink-connector-features"},"Sink Connector Features"),(0,a.yg)("p",null,"Sink connectors have some common core features, and each sink connector supports them to varying degrees."),(0,a.yg)("h3",{id:"exactly-once-1"},"exactly-once"),(0,a.yg)("p",null,"When any piece of data flows into a distributed system, if the system processes any piece of data accurately only once in the whole processing process and the processing results are correct, it is considered that the system meets the exact once consistency."),(0,a.yg)("p",null,"For sink connector, the sink connector supports exactly-once if any piece of data only write into target once. There are generally two ways to achieve this:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The target database supports key deduplication. For example ",(0,a.yg)("inlineCode",{parentName:"li"},"MySQL"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"Kudu"),"."),(0,a.yg)("li",{parentName:"ul"},"The target support ",(0,a.yg)("strong",{parentName:"li"},"XA Transaction"),"(This transaction can be used across sessions. Even if the program that created the transaction has ended, the newly started program only needs to know the ID of the last transaction to resubmit or roll back the transaction). Then we can use ",(0,a.yg)("strong",{parentName:"li"},"Two-phase Commit")," to ensure ",(0,a.yg)("strong",{parentName:"li"},"exactly-once"),". For example ",(0,a.yg)("inlineCode",{parentName:"li"},"File"),", ",(0,a.yg)("inlineCode",{parentName:"li"},"MySQL"),".")),(0,a.yg)("h3",{id:"cdcchange-data-capture"},"cdc(change data capture)"),(0,a.yg)("p",null,"If a sink connector supports writing row kinds(INSERT/UPDATE_BEFORE/UPDATE_AFTER/DELETE) based on primary key, we think it supports cdc(change data capture)."),(0,a.yg)("h3",{id:"support-multiple-table-write"},"support multiple table write"),(0,a.yg)("p",null,"Supports write multiple tables in one SeaTunnel job, users can dynamically specify the table's identifier by ",(0,a.yg)("a",{parentName:"p",href:"/docs/concept/sink-options-placeholders"},"configuring placeholders"),"."),(0,a.yg)("h3",{id:"multimodal-1"},"multimodal"),(0,a.yg)("p",null,"Support multimodal data integration, including structured and unstructured text data, video, images, binary files, etc."))}d.isMDXComponent=!0}}]);