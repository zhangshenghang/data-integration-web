"use strict";(self.webpackChunkseatunnel_website=self.webpackChunkseatunnel_website||[]).push([[84185],{15680:(e,n,t)=>{t.d(n,{xA:()=>g,yg:()=>d});var a=t(96540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},g=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,g=o(e,["components","mdxType","originalType","parentName"]),c=s(t),m=r,d=c["".concat(p,".").concat(m)]||c[m]||u[m]||i;return t?a.createElement(d,l(l({ref:n},g),{},{components:t})):a.createElement(d,l({ref:n},g))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=m;var o={};for(var p in n)hasOwnProperty.call(n,p)&&(o[p]=n[p]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},17398:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=t(58168),r=(t(96540),t(15680));const i={},l="Plugin development",o={unversionedId:"developing-plugin",id:"version-1.x/developing-plugin",title:"Plugin development",description:"Introduction to plugin system",source:"@site/versioned_docs/version-1.x/developing-plugin.md",sourceDirName:".",slug:"/developing-plugin",permalink:"/docs/1.x/developing-plugin",draft:!1,editUrl:"https://github.com/apache/incubator-seatunnel-website/edit/main/versioned_docs/version-1.x/developing-plugin.md",tags:[],version:"1.x",frontMatter:{},sidebar:"docs",previous:{title:"Deploy and run",permalink:"/docs/1.x/deployment"},next:{title:"monitoring",permalink:"/docs/1.x/monitoring"}},p={},s=[{value:"Introduction to plugin system",id:"introduction-to-plugin-system",level:2},{value:"Input",id:"input",level:3},{value:"Filter",id:"filter",level:3},{value:"Output",id:"output",level:3},{value:"Ready to work",id:"ready-to-work",level:2},{value:"1. Create a new pom.xml",id:"1-create-a-new-pomxml",level:2},{value:"2. Implement your own method",id:"2-implement-your-own-method",level:2},{value:"Input (live stream)",id:"input-live-stream",level:3},{value:"Filter",id:"filter-1",level:3},{value:"Output",id:"output-1",level:3},{value:"UDFs",id:"udfs",level:3},{value:"3. Package and use",id:"3-package-and-use",level:2}],g={toc:s},c="wrapper";function u(e){let{components:n,...t}=e;return(0,r.yg)(c,(0,a.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"plugin-development"},"Plugin development"),(0,r.yg)("h2",{id:"introduction-to-plugin-system"},"Introduction to plugin system"),(0,r.yg)("p",null,"The seatunnel plugin is divided into three parts, ",(0,r.yg)("strong",{parentName:"p"},"Input"),", ",(0,r.yg)("strong",{parentName:"p"},"Filter")," and ",(0,r.yg)("strong",{parentName:"p"},"Output")),(0,r.yg)("h3",{id:"input"},"Input"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Input")," is responsible for converting the data of the external data source into ",(0,r.yg)("inlineCode",{parentName:"p"},"DStream[(String, String)]")),(0,r.yg)("h3",{id:"filter"},"Filter"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Filter")," is a ",(0,r.yg)("a",{parentName:"p",href:"http://spark.apache.org/docs/latest/rdd-programming-guide.html#transformations"},"transform")," operation, responsible for operating on the data structure of Dataset","[Row]"),(0,r.yg)("h3",{id:"output"},"Output"),(0,r.yg)("p",null,(0,r.yg)("strong",{parentName:"p"},"Output")," is the ",(0,r.yg)("a",{parentName:"p",href:"http://spark.apache.org/docs/latest/rdd-programming-guide.html#actions"},"action")," operation, which is responsible for outputting the Dataset","[Row]"," to an external data source or printing it to terminal"),(0,r.yg)("h2",{id:"ready-to-work"},"Ready to work"),(0,r.yg)("p",null,"seatunnel supports Java/Scala as a development language for plug-ins, among which Scala is recommended for the ",(0,r.yg)("strong",{parentName:"p"},"Input")," plug-in, and both Java and Scala are available for other types of plug-ins."),(0,r.yg)("p",null,"Create a new Java/Scala project, or you can directly pull ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/InterestingLab/seatunnel-filter-example"},"seatunnel-filter-example"),", and then make modifications on this project"),(0,r.yg)("h2",{id:"1-create-a-new-pomxml"},"1. Create a new pom.xml"),(0,r.yg)("p",null,"Reference file ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/InterestingLab/seatunnel-filter-example/blob/master/pom.xml"},"pom.xml")),(0,r.yg)("p",null,"Add the interface provided by seatunnel to the project's dependencies"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre"},"<dependency>\n    <groupId>io.github.interestinglab.seatunnel</groupId>\n    <artifactId>seatunnel-apis_2.11</artifactId>\n    <version>1.1.0</version>\n</dependency>\n")),(0,r.yg)("h2",{id:"2-implement-your-own-method"},"2. Implement your own method"),(0,r.yg)("h3",{id:"input-live-stream"},"Input (live stream)"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Create a new class and inherit the parent class ",(0,r.yg)("inlineCode",{parentName:"p"},"BaseInput")," provided by ",(0,r.yg)("strong",{parentName:"p"},"seatunnel-apis")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"class ScalaHdfs extends BaseStreamingInput {\n\n  var config: Config = ConfigFactory.empty()\n\n  /**\n    * SetConfig.\n    **/\n  override def setConfig(config: Config): Unit = {\n    this.config = config\n  }\n\n  /**\n    * GetConfig.\n    **/\n  override def getConfig(): Config = {\n    this.config\n  }\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Override the ",(0,r.yg)("inlineCode",{parentName:"p"},"checkConfig"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"prepare")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"getDstream")," methods defined by the parent class"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-scala"},"override def checkConfig(): (Boolean, String) = {}\noverride def prepare(spark: SparkSession): Unit = {}\noverride def getDStream(ssc: StreamingContext): DStream[(String, String)] = {}\n\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"When the ",(0,r.yg)("strong",{parentName:"p"},"Input")," plugin is called, it will first execute the ",(0,r.yg)("inlineCode",{parentName:"p"},"checkConfig")," method to check whether the parameters passed in when calling the plugin are correct, then call the ",(0,r.yg)("inlineCode",{parentName:"p"},"prepare")," method to configure the default values \u200b\u200bof the parameters and initialize the member variables of the class, and finally call the ",(0,r.yg)("inlineCode",{parentName:"p"}," getStream")," method converts external data source to ",(0,r.yg)("inlineCode",{parentName:"p"},"DStream[(String, String)]"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Scala version ",(0,r.yg)("strong",{parentName:"p"},"Input")," plugin implementation refer to ","[ScalaHdfs]","(",(0,r.yg)("a",{parentName:"p",href:"https://github.com/InterestingLab/seatunnel-filter-example/blob/master/src/main/scala/org/interestinglab/seatunnel/input/ScalaHdfs"},"https://github.com/InterestingLab/seatunnel-filter-example/blob/master/src/main/scala/org/interestinglab/seatunnel/input/ScalaHdfs")," .scala)"))),(0,r.yg)("h3",{id:"filter-1"},"Filter"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Create a new class and inherit the parent class ",(0,r.yg)("inlineCode",{parentName:"li"},"BaseFilter")," provided by ",(0,r.yg)("strong",{parentName:"li"},"seatunnel-apis"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-Scala"},"class ScalaSubstring extends BaseFilter {\n\n  var config: Config = ConfigFactory.empty()\n\n  /**\n    * SetConfig.\n    **/\n  override def setConfig(config: Config): Unit = {\n    this.config = config\n  }\n\n  /**\n    * GetConfig.\n    **/\n  override def getConfig(): Config = {\n    this.config\n  }\n}\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-Java"},"public class JavaSubstring extends BaseFilter {\n\n    private Config config;\n\n    @Override\n    public Config getConfig() {\n        return config;\n    }\n\n    @Override\n    public void setConfig(Config config) {\n        this.config = config;\n    }\n}\n"))),(0,r.yg)("li",{parentName:"ul"},"Override the ",(0,r.yg)("inlineCode",{parentName:"li"},"checkConfig"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"prepare")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"process")," methods defined by the parent class",(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-Scala"},"override def checkConfig(): (Boolean, String) = {}\noverride def prepare(spark: SparkSession): Unit = {}\noverride def process(spark: SparkSession, ds: Dataset[Row]): Dataset[Row] = {}\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-Java"},"@Override\npublic Tuple2<Object, String> checkConfig() {}\n@Override\npublic void prepare(SparkSession spark, StreamingContext ssc) {}\n@Override\npublic Dataset<Row> process(SparkSession spark, Dataset<Row> df) {}\n")),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"When the ",(0,r.yg)("strong",{parentName:"li"},"Filter")," plugin is called, it will first execute the ",(0,r.yg)("inlineCode",{parentName:"li"},"checkConfig")," method to check whether the parameters passed in when calling the plugin are correct, then call the ",(0,r.yg)("inlineCode",{parentName:"li"},"prepare")," method to configure the default values \u200b\u200bof the parameters and initialize the member variables of the class, and finally call the ",(0,r.yg)("inlineCode",{parentName:"li"}," The process")," method processes data in ",(0,r.yg)("strong",{parentName:"li"},"Dataset","[Row]")," format."),(0,r.yg)("li",{parentName:"ul"},"For the implementation of the ",(0,r.yg)("strong",{parentName:"li"},"Filter")," plugin in the Java version, refer to ","[JavaSubstring]","(",(0,r.yg)("a",{parentName:"li",href:"https://github.com/InterestingLab/seatunnel-filter-example/blob/master/src/main/java/org/interestinglab/seatunnel/filter/"},"https://github.com/InterestingLab/seatunnel-filter-example/blob/master/src/main/java/org/interestinglab/seatunnel/filter/")," JavaSubstring.java), the implementation of the Scala version ",(0,r.yg)("strong",{parentName:"li"},"Filter")," plugin refers to ","[ScalaSubstring]","(",(0,r.yg)("a",{parentName:"li",href:"https://github.com/InterestingLab/seatunnel-filter-example/blob/master/src/main/scala/org/interestinglab/"},"https://github.com/InterestingLab/seatunnel-filter-example/blob/master/src/main/scala/org/interestinglab/")," seatunnel/filter/ScalaSubstring.scala)")))),(0,r.yg)("h3",{id:"output-1"},"Output"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Create a new class and inherit the parent class ",(0,r.yg)("inlineCode",{parentName:"li"},"BaseOutput")," provided by ",(0,r.yg)("strong",{parentName:"li"},"seatunnel-apis"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-Scala"},"class ScalaStdout extends BaseOutput {\n\n\n  var config: Config = ConfigFactory.empty()\n\n  /**\n    * SetConfig.\n    **/\n  override def setConfig(config: Config): Unit = {\n    this.config = config\n  }\n\n  /**\n    * GetConfig.\n    **/\n  override def getConfig(): Config = {\n    this.config\n  }\n}\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-Java"},"public class JavaStdout extends BaseOutput {\n\n    private Config config;\n\n    @Override\n    public Config getConfig() {\n        return config;\n    }\n\n    @Override\n    public void setConfig(Config config) {\n        this.config = config;\n    }\n}\n"))),(0,r.yg)("li",{parentName:"ul"},"Override the ",(0,r.yg)("inlineCode",{parentName:"li"},"checkConfig"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"prepare")," and ",(0,r.yg)("inlineCode",{parentName:"li"},"process")," methods defined by the parent class",(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-Scala"},"override def checkConfig(): (Boolean, String) = {}\noverride def prepare(spark: SparkSession): Unit = {}\noverride def process(spark: SparkSession, ds: Dataset[Row]): Dataset[Row] = {}\n")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-Java"},"@Override\npublic Tuple2<Object, String> checkConfig() {}\n@Override\npublic void prepare(SparkSession spark) {}\n@Override\npublic Dataset<Row> process(SparkSsession spark, Dataset<Row> ds) {}\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Output")," plugin call structure is similar to ",(0,r.yg)("strong",{parentName:"li"},"Filter")," plugin. When calling, it will first execute the ",(0,r.yg)("inlineCode",{parentName:"li"},"checkConfig")," method to check whether the parameters passed in when calling the plugin are correct, then call the ",(0,r.yg)("inlineCode",{parentName:"li"},"prepare")," method to configure the default values \u200b\u200bof the parameters and initialize the member variables of the class, and finally call the ",(0,r.yg)("inlineCode",{parentName:"li"},"process")," method to set the ",(0,r.yg)("strong",{parentName:"li"},"Dataset ","[Row]")," format data output to an external data source."),(0,r.yg)("li",{parentName:"ul"},"For the implementation of the ",(0,r.yg)("strong",{parentName:"li"},"Output")," plugin in the Java version, refer to ","[JavaStdout]","(",(0,r.yg)("a",{parentName:"li",href:"https://github.com/InterestingLab/seatunnel-filter-example/blob/master/src/main/java/org/interestinglab/seatunnel/output/"},"https://github.com/InterestingLab/seatunnel-filter-example/blob/master/src/main/java/org/interestinglab/seatunnel/output/")," JavaStdout.java), the implementation of the Scala version ",(0,r.yg)("strong",{parentName:"li"},"Output")," plugin refers to ","[ScalaStdout]","(",(0,r.yg)("a",{parentName:"li",href:"https://github.com/InterestingLab/seatunnel-filter-example/blob/master/src/main/scala/org/interestinglab/"},"https://github.com/InterestingLab/seatunnel-filter-example/blob/master/src/main/scala/org/interestinglab/")," seatunnel/output/ScalaStdout.scala)")),(0,r.yg)("h3",{id:"udfs"},"UDFs"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Create a new class and inherit the parent class ",(0,r.yg)("inlineCode",{parentName:"p"},"BaseFilter")," provided by ",(0,r.yg)("strong",{parentName:"p"},"seatunnel-apis")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-Scala"},"class ScalaSubstring extends BaseFilter {\n\n  var config: Config = ConfigFactory.empty()\n\n  /**\n    * SetConfig.\n    **/\n  override def setConfig(config: Config): Unit = {\n    this.config = config\n  }\n\n  /**\n    * GetConfig.\n    **/\n  override def getConfig(): Config = {\n    this.config\n  }\n}\n"))),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"Override the ",(0,r.yg)("inlineCode",{parentName:"p"},"checkConfig"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"prepare"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"getUdfList")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"process")," methods defined by the parent class. Only the ",(0,r.yg)("inlineCode",{parentName:"p"},"getUdfList")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"process")," methods are introduced here"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-Scala"},'override def getUdfList(): List[(String, UserDefinedFunction)] = {\n  val func = udf((s: String, pos: Int, len: Int) => s. substring(pos, pos+len))\n  List(("my_sub", func))\n}\noverride def process(spark: SparkSession, ds: Dataset[Row]): Dataset[Row] = {\n  val srcField = config.getString("source_field")\n  val targetField = config.getString("target_field")\n  val pos = config.getInt("pos")\n  val len = config.getInt("len")\n  val func = getUdfList().get(0)._2\n  df.withColumn(targetField, func(col(srcField), lit(pos), lit(len)))\n}\n')),(0,r.yg)("p",{parentName:"li"},"For a complete case of UDF plug-in development, refer to ","[ScalaSubstring]","(",(0,r.yg)("a",{parentName:"p",href:"https://github.com/InterestingLab/seatunnel-example/blob/rickyhuo.fea.udf/src/main/scala/org/interestinglab/seatunnel/filter/ScalaSubstring.scala"},"https://github.com/InterestingLab/seatunnel-example/blob/rickyhuo.fea.udf/src/main/scala/org/interestinglab/seatunnel/filter/ScalaSubstring.scala")," #L15)")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("p",{parentName:"li"},"New META-INF/services"),(0,r.yg)("p",{parentName:"li"},"Seatunnel will use the ",(0,r.yg)("strong",{parentName:"p"},"Service loader")," mechanism to register the method that implements ",(0,r.yg)("inlineCode",{parentName:"p"},"io.github.interestinglab.seatunnel.apis.BaseFilter")," as UDF according to the method returned by ",(0,r.yg)("inlineCode",{parentName:"p"},"getUdfList"),". If the interface implementation class is not specified in services, it will not be used. will be registered as a UDF."),(0,r.yg)("p",{parentName:"li"},"[META-INF]"," in the case (",(0,r.yg)("a",{parentName:"p",href:"https://github.com/InterestingLab/seatunnel-example/blob/master/src/main/resources/META-INF/services/io.github.interestinglab.seatunnel.apis.BaseFilter"},"https://github.com/InterestingLab/seatunnel-example/blob/master/src/main/resources/META-INF/services/io.github.interestinglab.seatunnel.apis.BaseFilter")," )"))),(0,r.yg)("h2",{id:"3-package-and-use"},"3. Package and use"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Packaging"),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},"mvn package"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Put the packaged Jar package in the seatunnel ",(0,r.yg)("inlineCode",{parentName:"p"},"plugins")," directory"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"cd seatunnel-1.1.0\nmkdir -p plugins/my_plugins/lib\ncd plugins/my_plugins/lib\n")),(0,r.yg)("p",{parentName:"li"},"Seatunnel needs to put the third-party Jar package, and must create a new ",(0,r.yg)("strong",{parentName:"p"},"lib")," folder"),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},"plugins/your_plugin_name/lib/your_jar_name")),(0,r.yg)("p",{parentName:"li"},"other files in"),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},"plugins/your_plugin_name/files/your_file_name"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Use plugins in configuration files"),(0,r.yg)("p",{parentName:"li"},"Here is a complete example using a third-party plugin and putting it in ",(0,r.yg)("inlineCode",{parentName:"p"},"config/application.conf")),(0,r.yg)("p",{parentName:"li"},"The test data is generated by the ",(0,r.yg)("inlineCode",{parentName:"p"},"Fake")," plugin, split with ",(0,r.yg)("inlineCode",{parentName:"p"},"Split"),", then the third-party plugin ",(0,r.yg)("inlineCode",{parentName:"p"},"ScalaSubstring")," is used to intercept the string, and finally the third-party plugin ",(0,r.yg)("inlineCode",{parentName:"p"},"JavaStdout")," is used to print to the terminal."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},'spark {\n    spark.streaming.batchDuration = 5\n    spark.app.name = "seatunnel-sample"\n    spark.ui.port = 13000\n    spark.executor.instances = 2\n    spark.executor.cores = 1\n    spark.executor.memory = "1g"\n}\n\ninput {\n    fakeStream {\n        content = ["INFO : gary is 28 years old", "WARN : suwey is 16 years old"]\n        rate = 5\n    }\n}\n\nfilter {\n    split {\n        fields = ["log_level", "message"]\n        delimiter = ":"\n    }\n    sql = {\n        table_name = "tmp"\n        # use UDF\n        sql = "select log_level, my_sub(message, 1, 3) from tmp"\n    }\n}\n\noutput {\n    org.interestinglab.seatunnel.output.JavaStdout {\n        limit = 2\n    }\n}\n'))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Start seatunnel"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},"./bin/start-seatunnel.sh --config config/application.conf --deploy-mode client --master local[2]\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"View the results"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre"},"+---------+--------------------------------+\n|log_level|UDF(message, 1, 3)|\n+---------+--------------------------------+\n|INFO |ary |\n|INFO |ary |\n+---------+--------------------------------+\nonly showing top 2 rows\n\n")))))}u.isMDXComponent=!0}}]);